package org.apache.commons.lang3.WillRandoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.jupiter.api.Disabled;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream6 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsStream6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.apache.commons.lang3.stream.Streams.ArrayCollector[][] arrayCollectorArray1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector[0][];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][] objArrayCollectorArray2 = (org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][]) arrayCollectorArray1;
        org.apache.commons.lang3.stream.Streams.ArrayCollector[][] arrayCollectorArray4 = new org.apache.commons.lang3.stream.Streams.ArrayCollector[0][];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][] objArrayCollectorArray5 = (org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][]) arrayCollectorArray4;
        org.apache.commons.lang3.stream.Streams.ArrayCollector[][] arrayCollectorArray7 = new org.apache.commons.lang3.stream.Streams.ArrayCollector[0][];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][] objArrayCollectorArray8 = (org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][]) arrayCollectorArray7;
        org.apache.commons.lang3.stream.Streams.ArrayCollector[][][] arrayCollectorArray10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector[3][][];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][][] objArrayCollectorArray11 = (org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][][]) arrayCollectorArray10;
        objArrayCollectorArray11[0] = objArrayCollectorArray2;
        objArrayCollectorArray11[1] = objArrayCollectorArray5;
        objArrayCollectorArray11[2] = objArrayCollectorArray8;
        java.util.stream.Stream<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][]> objArrayCollectorArrayStream18 = org.apache.commons.lang3.stream.Streams.of(objArrayCollectorArray11);
        org.junit.Assert.assertNotNull(arrayCollectorArray1);
        org.junit.Assert.assertNotNull(objArrayCollectorArray2);
        org.junit.Assert.assertNotNull(arrayCollectorArray4);
        org.junit.Assert.assertNotNull(objArrayCollectorArray5);
        org.junit.Assert.assertNotNull(arrayCollectorArray7);
        org.junit.Assert.assertNotNull(objArrayCollectorArray8);
        org.junit.Assert.assertNotNull(arrayCollectorArray10);
        org.junit.Assert.assertNotNull(objArrayCollectorArray11);
        org.junit.Assert.assertNotNull(objArrayCollectorArrayStream18);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean19 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean22 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean24 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean27 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean29 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean31 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        java.util.function.BinaryOperator[] binaryOperatorArray1 = new java.util.function.BinaryOperator[0];
        @SuppressWarnings("unchecked")
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>>[] objListBinaryOperatorArray2 = (java.util.function.BinaryOperator<java.util.List<java.lang.Object>>[]) binaryOperatorArray1;
        java.util.stream.Stream<java.util.function.BinaryOperator<java.util.List<java.lang.Object>>> objListBinaryOperatorStream3 = org.apache.commons.lang3.stream.Streams.of((java.util.function.BinaryOperator<java.util.List<java.lang.Object>>[]) binaryOperatorArray1);
        java.util.stream.Stream<java.util.function.BinaryOperator<java.util.List<java.lang.Object>>> objListBinaryOperatorStream4 = org.apache.commons.lang3.stream.Streams.of((java.util.function.BinaryOperator<java.util.List<java.lang.Object>>[]) binaryOperatorArray1);
        org.junit.Assert.assertNotNull(binaryOperatorArray1);
        org.junit.Assert.assertNotNull(objListBinaryOperatorArray2);
        org.junit.Assert.assertNotNull(objListBinaryOperatorStream3);
        org.junit.Assert.assertNotNull(objListBinaryOperatorStream4);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector6 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector6.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector6.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector6.characteristics();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray10 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj14 = null;
        int int15 = objectToStringComparator10.compare((java.lang.Object) "hi!", obj14);
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator9.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator10);
        int int18 = objectToStringComparator0.compare((java.lang.Object) objectToStringComparator9, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator20 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass23 = strPredicate22.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector24 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass23);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier25 = objArrayCollector24.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction26 = objArrayCollector24.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = objArrayCollector24.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer28 = objArrayCollector24.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer29 = objArrayCollector24.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction30 = objArrayCollector24.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer31 = objArrayCollector24.accumulator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator32 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator33 = objectToStringComparator32.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate35 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj36 = null;
        int int37 = objectToStringComparator32.compare((java.lang.Object) "hi!", obj36);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder39 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean42 = strComparableCheckBuilder39.betweenExclusive("", "");
        boolean boolean44 = strComparableCheckBuilder39.greaterThan("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator45 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator46 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator47 = objectToStringComparator46.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate49 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj50 = null;
        int int51 = objectToStringComparator46.compare((java.lang.Object) "hi!", obj50);
        java.util.Comparator<java.lang.Object> objComparator52 = objectToStringComparator45.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator46);
        int int53 = objectToStringComparator32.compare((java.lang.Object) "", (java.lang.Object) objComparator52);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator54 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator55 = objectToStringComparator54.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder57 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean59 = strComparableCheckBuilder57.greaterThan("hi!");
        boolean boolean62 = strComparableCheckBuilder57.between("hi!", "");
        boolean boolean64 = strComparableCheckBuilder57.lessThanOrEqualTo("hi!");
        int int66 = objectToStringComparator54.compare((java.lang.Object) strComparableCheckBuilder57, (java.lang.Object) 4);
        java.util.Comparator<java.lang.Object> objComparator67 = objectToStringComparator32.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator54);
        java.util.function.Predicate<java.lang.String> strPredicate69 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass70 = strPredicate69.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate72 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass73 = strPredicate72.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate75 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass76 = strPredicate75.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate78 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass79 = strPredicate78.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate81 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass82 = strPredicate81.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray83 = new java.lang.reflect.GenericDeclaration[] { wildcardClass70, wildcardClass73, wildcardClass76, wildcardClass79, wildcardClass82 };
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray84 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray83 };
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayStream85 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray84);
        java.lang.Class<?> wildcardClass86 = genericDeclarationArray84.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector87 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass86);
        java.util.function.Predicate<java.lang.String> strPredicate89 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass90 = strPredicate89.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector91 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass90);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier92 = objArrayCollector91.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator93 = objArrayCollector91.combiner();
        int int94 = objectToStringComparator54.compare((java.lang.Object) wildcardClass86, (java.lang.Object) objListBinaryOperator93);
        int int95 = objectToStringComparator0.compare((java.lang.Object) objArrayCollector24, (java.lang.Object) int94);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 62 + "'", int18 == 62);
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(objComparator20);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(objListSupplier25);
        org.junit.Assert.assertNotNull(objListFunction26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(objListBiConsumer28);
        org.junit.Assert.assertNotNull(objListBiConsumer29);
        org.junit.Assert.assertNotNull(objListFunction30);
        org.junit.Assert.assertNotNull(objListBiConsumer31);
        org.junit.Assert.assertNotNull(objComparator33);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objComparator47);
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(objComparator52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-50) + "'", int53 == (-50));
        org.junit.Assert.assertNotNull(objectToStringComparator54);
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 59 + "'", int66 == 59);
        org.junit.Assert.assertNotNull(objComparator67);
        org.junit.Assert.assertNotNull(strPredicate69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(strPredicate72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(strPredicate75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(strPredicate78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(strPredicate81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(genericDeclarationArray83);
        org.junit.Assert.assertNotNull(genericDeclarationArray84);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(strPredicate89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(objListSupplier92);
        org.junit.Assert.assertNotNull(objListBinaryOperator93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-12) + "'", int94 == (-12));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 66 + "'", int95 == 66);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams7 = new org.apache.commons.lang3.stream.Streams();
        int int8 = objectToStringComparator3.compare((java.lang.Object) strPredicate6, (java.lang.Object) streams7);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder10 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int13 = objectToStringComparator3.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate12);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator14.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams18 = new org.apache.commons.lang3.stream.Streams();
        int int19 = objectToStringComparator14.compare((java.lang.Object) strPredicate17, (java.lang.Object) streams18);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder21 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int24 = objectToStringComparator14.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate23);
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator14.reversed();
        java.util.Comparator<java.lang.Object> objComparator26 = objectToStringComparator3.thenComparing(objComparator25);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder28 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean30 = strComparableCheckBuilder28.greaterThan("hi!");
        boolean boolean33 = strComparableCheckBuilder28.betweenExclusive("", "");
        boolean boolean35 = strComparableCheckBuilder28.equalTo("hi!");
        boolean boolean37 = strComparableCheckBuilder28.lessThan("");
        boolean boolean39 = strComparableCheckBuilder28.lessThan("");
        boolean boolean41 = strComparableCheckBuilder28.lessThanOrEqualTo("");
        boolean boolean44 = strComparableCheckBuilder28.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder46 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean48 = strComparableCheckBuilder46.greaterThan("hi!");
        boolean boolean51 = strComparableCheckBuilder46.betweenExclusive("", "");
        boolean boolean53 = strComparableCheckBuilder46.equalTo("hi!");
        boolean boolean55 = strComparableCheckBuilder46.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder57 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean59 = strComparableCheckBuilder57.greaterThan("hi!");
        boolean boolean62 = strComparableCheckBuilder57.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder64 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean66 = strComparableCheckBuilder64.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray68 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray69 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray68;
        strComparableCheckBuilderArray69[0] = strComparableCheckBuilder28;
        strComparableCheckBuilderArray69[1] = strComparableCheckBuilder46;
        strComparableCheckBuilderArray69[2] = strComparableCheckBuilder57;
        strComparableCheckBuilderArray69[3] = strComparableCheckBuilder64;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream78 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray69);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream79 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream78);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream80 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream78);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream81 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream78);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream82 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream78);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream83 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream78);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream84 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream78);
        java.lang.Class<?> wildcardClass85 = strComparableCheckBuilderStream78.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate87 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass88 = strPredicate87.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector89 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass88);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier90 = objArrayCollector89.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction91 = objArrayCollector89.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer92 = objArrayCollector89.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer93 = objArrayCollector89.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet94 = objArrayCollector89.characteristics();
        int int95 = objectToStringComparator3.compare((java.lang.Object) strComparableCheckBuilderStream78, (java.lang.Object) objArrayCollector89);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator97 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator3, objectToStringComparatorBinaryOperator96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-16) + "'", int8 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-16) + "'", int19 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-7) + "'", int24 == (-7));
        org.junit.Assert.assertNotNull(objComparator25);
        org.junit.Assert.assertNotNull(objComparator26);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray68);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray69);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream78);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream79);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream80);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream81);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream82);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream83);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(strPredicate87);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(objListSupplier90);
        org.junit.Assert.assertNotNull(objListFunction91);
        org.junit.Assert.assertNotNull(objListBiConsumer92);
        org.junit.Assert.assertNotNull(objListBiConsumer93);
        org.junit.Assert.assertNotNull(characteristicsSet94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-5) + "'", int95 == (-5));
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.lang.Class<java.lang.Class<?>[]> wildcardClassArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.Class<?>[]> wildcardClassArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.Class<?>[]>(wildcardClassArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator8 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListBinaryOperator8);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        java.lang.Class<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>[]> characteristicsCollectionArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>[]> characteristicsCollectionArrayArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>[]>(characteristicsCollectionArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector6 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector6.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector6.characteristics();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray9 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
    }

//    @Disabled
//    @Test
//    public void test0513() throws Throwable {
//        if (debug)
//            System.out.format("%n%s%n", "RegressionTest1.test0513");
//        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
//        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
//        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
//        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator4 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator5 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator5.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        org.apache.commons.lang3.stream.Streams streams9 = new org.apache.commons.lang3.stream.Streams();
//        int int10 = objectToStringComparator5.compare((java.lang.Object) strPredicate8, (java.lang.Object) streams9);
//        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator4.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator5);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator12.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        org.apache.commons.lang3.stream.Streams streams16 = new org.apache.commons.lang3.stream.Streams();
//        int int17 = objectToStringComparator12.compare((java.lang.Object) strPredicate15, (java.lang.Object) streams16);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        java.util.function.Predicate<java.lang.String> strPredicate21 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
//        int int22 = objectToStringComparator12.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate21);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder24 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        boolean boolean26 = strComparableCheckBuilder24.greaterThan("hi!");
//        boolean boolean29 = strComparableCheckBuilder24.betweenExclusive("", "");
//        boolean boolean31 = strComparableCheckBuilder24.equalTo("hi!");
//        boolean boolean33 = strComparableCheckBuilder24.lessThan("");
//        boolean boolean35 = strComparableCheckBuilder24.lessThan("");
//        boolean boolean37 = strComparableCheckBuilder24.lessThanOrEqualTo("");
//        boolean boolean40 = strComparableCheckBuilder24.between("hi!", "hi!");
//        boolean boolean43 = strComparableCheckBuilder24.betweenExclusive("hi!", "hi!");
//        boolean boolean45 = strComparableCheckBuilder24.lessThanOrEqualTo("hi!");
//        boolean boolean47 = strComparableCheckBuilder24.greaterThan("hi!");
//        boolean boolean49 = strComparableCheckBuilder24.lessThan("hi!");
//        boolean boolean51 = strComparableCheckBuilder24.lessThanOrEqualTo("");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator52 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator53 = objectToStringComparator52.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate55 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj56 = null;
//        int int57 = objectToStringComparator52.compare((java.lang.Object) "hi!", obj56);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator58 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator59 = objectToStringComparator58.reversed();
//        java.util.Comparator<java.lang.Object> objComparator60 = objectToStringComparator52.thenComparing(objComparator59);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator61 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator62 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator63 = objectToStringComparator62.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate65 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj66 = null;
//        int int67 = objectToStringComparator62.compare((java.lang.Object) "hi!", obj66);
//        java.util.Comparator<java.lang.Object> objComparator68 = objectToStringComparator61.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator62);
//        int int70 = objectToStringComparator52.compare((java.lang.Object) objectToStringComparator61, (java.lang.Object) 1L);
//        int int71 = objectToStringComparator12.compare((java.lang.Object) "", (java.lang.Object) objectToStringComparator61);
//        java.util.Comparator<java.lang.Object> objComparator72 = objectToStringComparator4.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator12);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator73 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator74 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator75 = objectToStringComparator74.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate77 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj78 = null;
//        int int79 = objectToStringComparator74.compare((java.lang.Object) "hi!", obj78);
//        java.util.Comparator<java.lang.Object> objComparator80 = objectToStringComparator73.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator74);
//        java.util.Comparator<java.lang.Object> objComparator81 = objComparator72.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator74);
//        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator82 = null;
//        // The following exception was thrown during execution in test generation
//        try {
//            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator83 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator74, objectToStringComparatorBinaryOperator82);
//            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
//        } catch (java.lang.NullPointerException e) {
//            // Expected exception.
//        }
//        org.junit.Assert.assertNull(objectToStringComparatorStream2);
//        org.junit.Assert.assertNull(objectToStringComparatorStream3);
//        org.junit.Assert.assertNotNull(objComparator6);
//        org.junit.Assert.assertNotNull(strPredicate8);
//        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-16) + "'", int10 == (-16));
//        org.junit.Assert.assertNotNull(objComparator11);
//        org.junit.Assert.assertNotNull(objComparator13);
//        org.junit.Assert.assertNotNull(strPredicate15);
//        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-16) + "'", int17 == (-16));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
//        org.junit.Assert.assertNotNull(strPredicate21);
//        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-7) + "'", int22 == (-7));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder24);
//        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
//        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
//        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
//        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
//        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
//        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
//        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
//        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
//        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
//        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
//        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
//        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
//        org.junit.Assert.assertNotNull(objComparator53);
//        org.junit.Assert.assertNotNull(strPredicate55);
//        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
//        org.junit.Assert.assertNotNull(objComparator59);
//        org.junit.Assert.assertNotNull(objComparator60);
//        org.junit.Assert.assertNotNull(objComparator63);
//        org.junit.Assert.assertNotNull(strPredicate65);
//        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
//        org.junit.Assert.assertNotNull(objComparator68);
//        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 62 + "'", int70 == 62);
//        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-66) + "'", int71 == (-66));
//        org.junit.Assert.assertNotNull(objComparator72);
//        org.junit.Assert.assertNotNull(objComparator75);
//        org.junit.Assert.assertNotNull(strPredicate77);
//        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
//        org.junit.Assert.assertNotNull(objComparator80);
//        org.junit.Assert.assertNotNull(objComparator81);
//    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.Comparator<java.lang.Object> objComparator12 = objectToStringComparator10.reversed();
        java.util.Comparator<java.lang.Object> objComparator13 = objComparator9.thenComparing(objComparator12);
        java.util.Comparator<java.lang.Object> objComparator14 = objComparator12.reversed();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator6);
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertNotNull(objectToStringComparator10);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(objComparator12);
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(objComparator14);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        boolean boolean22 = strComparableCheckBuilder1.equalTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        boolean boolean22 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean25 = strComparableCheckBuilder1.between("", "");
        boolean boolean27 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean30 = strComparableCheckBuilder1.between("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream12 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
        org.junit.Assert.assertNotNull(characteristicsStream12);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean10 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        boolean boolean12 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream6 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate5 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass6 = strPredicate5.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector7 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass6);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector7.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector7.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer10 = objArrayCollector7.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = objArrayCollector7.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer12 = objArrayCollector7.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction13 = objArrayCollector7.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier14 = objArrayCollector7.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer15 = null;
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList17 = objectToStringComparatorFailableStream1.collect(objListSupplier14, objListBiConsumer15, objListBiConsumer16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(strPredicate5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListFunction9);
        org.junit.Assert.assertNotNull(objListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(objListBiConsumer12);
        org.junit.Assert.assertNotNull(objListFunction13);
        org.junit.Assert.assertNotNull(objListSupplier14);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range((-16));
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream12 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream13 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator14.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj18 = null;
        int int19 = objectToStringComparator14.compare((java.lang.Object) "hi!", obj18);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator14.thenComparing(objComparator21);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator23 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator24 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator24.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate27 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj28 = null;
        int int29 = objectToStringComparator24.compare((java.lang.Object) "hi!", obj28);
        java.util.Comparator<java.lang.Object> objComparator30 = objectToStringComparator23.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator24);
        int int32 = objectToStringComparator14.compare((java.lang.Object) objectToStringComparator23, (java.lang.Object) 1L);
        java.lang.Class<?> wildcardClass33 = objectToStringComparator23.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector34 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass33);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector35 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass33);
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator36 = objArrayCollector35.combiner();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray37 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNull(objectToStringComparatorStream12);
        org.junit.Assert.assertNull(objectToStringComparatorStream13);
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertNotNull(objComparator25);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(objComparator30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 62 + "'", int32 == 62);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(objListBinaryOperator36);
    }

//    @Test
//    public void test0524() throws Throwable {
//        if (debug)
//            System.out.format("%n%s%n", "RegressionTest1.test0524");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        org.apache.commons.lang3.stream.Streams streams4 = new org.apache.commons.lang3.stream.Streams();
//        int int5 = objectToStringComparator0.compare((java.lang.Object) strPredicate3, (java.lang.Object) streams4);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj10 = null;
//        int int11 = objectToStringComparator6.compare((java.lang.Object) "hi!", obj10);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator12.reversed();
//        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator6.thenComparing(objComparator13);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator15 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator16.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj20 = null;
//        int int21 = objectToStringComparator16.compare((java.lang.Object) "hi!", obj20);
//        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator15.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
//        int int24 = objectToStringComparator6.compare((java.lang.Object) objectToStringComparator15, (java.lang.Object) 1L);
//        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator15);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator26 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator27 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator28 = objectToStringComparator27.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate30 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        org.apache.commons.lang3.stream.Streams streams31 = new org.apache.commons.lang3.stream.Streams();
//        int int32 = objectToStringComparator27.compare((java.lang.Object) strPredicate30, (java.lang.Object) streams31);
//        java.util.Comparator<java.lang.Object> objComparator33 = objectToStringComparator26.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator27);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator34 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator35 = objectToStringComparator34.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate37 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        org.apache.commons.lang3.stream.Streams streams38 = new org.apache.commons.lang3.stream.Streams();
//        int int39 = objectToStringComparator34.compare((java.lang.Object) strPredicate37, (java.lang.Object) streams38);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder41 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        java.util.function.Predicate<java.lang.String> strPredicate43 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
//        int int44 = objectToStringComparator34.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate43);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder46 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        boolean boolean48 = strComparableCheckBuilder46.greaterThan("hi!");
//        boolean boolean51 = strComparableCheckBuilder46.betweenExclusive("", "");
//        boolean boolean53 = strComparableCheckBuilder46.equalTo("hi!");
//        boolean boolean55 = strComparableCheckBuilder46.lessThan("");
//        boolean boolean57 = strComparableCheckBuilder46.lessThan("");
//        boolean boolean59 = strComparableCheckBuilder46.lessThanOrEqualTo("");
//        boolean boolean62 = strComparableCheckBuilder46.between("hi!", "hi!");
//        boolean boolean65 = strComparableCheckBuilder46.betweenExclusive("hi!", "hi!");
//        boolean boolean67 = strComparableCheckBuilder46.lessThanOrEqualTo("hi!");
//        boolean boolean69 = strComparableCheckBuilder46.greaterThan("hi!");
//        boolean boolean71 = strComparableCheckBuilder46.lessThan("hi!");
//        boolean boolean73 = strComparableCheckBuilder46.lessThanOrEqualTo("");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator74 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator75 = objectToStringComparator74.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate77 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj78 = null;
//        int int79 = objectToStringComparator74.compare((java.lang.Object) "hi!", obj78);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator80 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator81 = objectToStringComparator80.reversed();
//        java.util.Comparator<java.lang.Object> objComparator82 = objectToStringComparator74.thenComparing(objComparator81);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator83 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator84 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator85 = objectToStringComparator84.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate87 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj88 = null;
//        int int89 = objectToStringComparator84.compare((java.lang.Object) "hi!", obj88);
//        java.util.Comparator<java.lang.Object> objComparator90 = objectToStringComparator83.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator84);
//        int int92 = objectToStringComparator74.compare((java.lang.Object) objectToStringComparator83, (java.lang.Object) 1L);
//        int int93 = objectToStringComparator34.compare((java.lang.Object) "", (java.lang.Object) objectToStringComparator83);
//        java.util.Comparator<java.lang.Object> objComparator94 = objectToStringComparator26.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator34);
//        java.util.Comparator<java.lang.Object> objComparator95 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator26);
//        org.junit.Assert.assertNotNull(objComparator1);
//        org.junit.Assert.assertNotNull(strPredicate3);
//        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-16) + "'", int5 == (-16));
//        org.junit.Assert.assertNotNull(objComparator7);
//        org.junit.Assert.assertNotNull(strPredicate9);
//        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
//        org.junit.Assert.assertNotNull(objComparator13);
//        org.junit.Assert.assertNotNull(objComparator14);
//        org.junit.Assert.assertNotNull(objComparator17);
//        org.junit.Assert.assertNotNull(strPredicate19);
//        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
//        org.junit.Assert.assertNotNull(objComparator22);
//        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 62 + "'", int24 == 62);
//        org.junit.Assert.assertNotNull(objComparator25);
//        org.junit.Assert.assertNotNull(objComparator28);
//        org.junit.Assert.assertNotNull(strPredicate30);
//        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-16) + "'", int32 == (-16));
//        org.junit.Assert.assertNotNull(objComparator33);
//        org.junit.Assert.assertNotNull(objComparator35);
//        org.junit.Assert.assertNotNull(strPredicate37);
//        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-16) + "'", int39 == (-16));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder41);
//        org.junit.Assert.assertNotNull(strPredicate43);
//        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-7) + "'", int44 == (-7));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder46);
//        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
//        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
//        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
//        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
//        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
//        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
//        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
//        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
//        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
//        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
//        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
//        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
//        org.junit.Assert.assertNotNull(objComparator75);
//        org.junit.Assert.assertNotNull(strPredicate77);
//        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
//        org.junit.Assert.assertNotNull(objComparator81);
//        org.junit.Assert.assertNotNull(objComparator82);
//        org.junit.Assert.assertNotNull(objComparator85);
//        org.junit.Assert.assertNotNull(strPredicate87);
//        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
//        org.junit.Assert.assertNotNull(objComparator90);
//        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 62 + "'", int92 == 62);
//        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-66) + "'", int93 == (-66));
//        org.junit.Assert.assertNotNull(objComparator94);
//        org.junit.Assert.assertNotNull(objComparator95);
//    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector12 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass11);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier13 = objArrayCollector12.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction14 = objArrayCollector12.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = objArrayCollector12.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer16 = objArrayCollector12.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer17 = objArrayCollector12.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction18 = objArrayCollector12.finisher();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector12.finisher();
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass22 = strPredicate21.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector23 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass22);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = objArrayCollector23.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = objArrayCollector23.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream26 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet25);
        int int27 = objectToStringComparator0.compare((java.lang.Object) objListFunction19, (java.lang.Object) characteristicsStream26);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator6);
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(objListSupplier13);
        org.junit.Assert.assertNotNull(objListFunction14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(objListBiConsumer16);
        org.junit.Assert.assertNotNull(objListBiConsumer17);
        org.junit.Assert.assertNotNull(objListFunction18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(characteristicsStream26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream60 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream60);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean13 = strComparableCheckBuilder1.between("", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream60 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream61 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream62 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream60);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream61);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream62);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean22 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean24 = strComparableCheckBuilder1.lessThan("");
        boolean boolean26 = strComparableCheckBuilder1.greaterThan("hi!");
        java.lang.Class<?> wildcardClass27 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams4 = new org.apache.commons.lang3.stream.Streams();
        int int5 = objectToStringComparator0.compare((java.lang.Object) strPredicate3, (java.lang.Object) streams4);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder7 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int10 = objectToStringComparator0.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate9);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder12 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean14 = strComparableCheckBuilder12.greaterThan("hi!");
        boolean boolean17 = strComparableCheckBuilder12.betweenExclusive("", "");
        boolean boolean19 = strComparableCheckBuilder12.equalTo("hi!");
        boolean boolean21 = strComparableCheckBuilder12.lessThan("");
        boolean boolean23 = strComparableCheckBuilder12.lessThan("");
        boolean boolean25 = strComparableCheckBuilder12.lessThanOrEqualTo("");
        boolean boolean28 = strComparableCheckBuilder12.between("hi!", "hi!");
        boolean boolean31 = strComparableCheckBuilder12.betweenExclusive("hi!", "hi!");
        boolean boolean33 = strComparableCheckBuilder12.lessThanOrEqualTo("hi!");
        boolean boolean35 = strComparableCheckBuilder12.greaterThan("hi!");
        boolean boolean37 = strComparableCheckBuilder12.lessThan("hi!");
        boolean boolean39 = strComparableCheckBuilder12.lessThanOrEqualTo("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator40 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator41 = objectToStringComparator40.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj44 = null;
        int int45 = objectToStringComparator40.compare((java.lang.Object) "hi!", obj44);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator46 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator47 = objectToStringComparator46.reversed();
        java.util.Comparator<java.lang.Object> objComparator48 = objectToStringComparator40.thenComparing(objComparator47);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator49 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator50 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator51 = objectToStringComparator50.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate53 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj54 = null;
        int int55 = objectToStringComparator50.compare((java.lang.Object) "hi!", obj54);
        java.util.Comparator<java.lang.Object> objComparator56 = objectToStringComparator49.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator50);
        int int58 = objectToStringComparator40.compare((java.lang.Object) objectToStringComparator49, (java.lang.Object) 1L);
        int int59 = objectToStringComparator0.compare((java.lang.Object) "", (java.lang.Object) objectToStringComparator49);
        java.lang.Class<?> wildcardClass60 = objectToStringComparator49.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector61 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass60);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector62 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass60);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet63 = objArrayCollector62.characteristics();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-16) + "'", int5 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objComparator41);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(objComparator47);
        org.junit.Assert.assertNotNull(objComparator48);
        org.junit.Assert.assertNotNull(objComparator51);
        org.junit.Assert.assertNotNull(strPredicate53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(objComparator56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 62 + "'", int58 == 62);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-65) + "'", int59 == (-65));
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(characteristicsSet63);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]> objCollector12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray13 = objectToStringComparatorFailableStream1.collect(objCollector12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer7 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream12 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(objListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
        org.junit.Assert.assertNotNull(characteristicsStream12);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator18 = objArrayCollector16.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator20 = objArrayCollector16.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder22 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean24 = strComparableCheckBuilder22.greaterThan("hi!");
        boolean boolean27 = strComparableCheckBuilder22.betweenExclusive("", "");
        boolean boolean29 = strComparableCheckBuilder22.equalTo("hi!");
        boolean boolean31 = strComparableCheckBuilder22.lessThan("");
        boolean boolean33 = strComparableCheckBuilder22.equalTo("");
        boolean boolean35 = strComparableCheckBuilder22.lessThan("hi!");
        boolean boolean37 = strComparableCheckBuilder22.greaterThan("hi!");
        int int38 = objectToStringComparator0.compare((java.lang.Object) objArrayCollector16, (java.lang.Object) "hi!");
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer39 = objArrayCollector16.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet40 = objArrayCollector16.characteristics();
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListBinaryOperator18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListBinaryOperator20);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 7 + "'", int38 == 7);
        org.junit.Assert.assertNotNull(objListBiConsumer39);
        org.junit.Assert.assertNotNull(characteristicsSet40);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector8 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass7);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector8.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector8.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction11 = objArrayCollector8.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator12 = objArrayCollector8.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction13 = objArrayCollector8.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier14 = objArrayCollector8.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass17 = strPredicate16.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector18 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass17);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier19 = objArrayCollector18.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction20 = objArrayCollector18.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = objArrayCollector18.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = objArrayCollector18.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer23 = objArrayCollector18.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList25 = objectToStringComparatorFailableStream1.collect(objListSupplier14, objListBiConsumer23, objListBiConsumer24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
        org.junit.Assert.assertNotNull(objListFunction11);
        org.junit.Assert.assertNotNull(objListBinaryOperator12);
        org.junit.Assert.assertNotNull(objListFunction13);
        org.junit.Assert.assertNotNull(objListSupplier14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objListSupplier19);
        org.junit.Assert.assertNotNull(objListFunction20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(objListBiConsumer23);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator3 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder5 = org.apache.commons.lang3.compare.ComparableUtils.is("");
        boolean boolean8 = strComparableCheckBuilder5.between("", "");
        boolean boolean10 = strComparableCheckBuilder5.greaterThan("hi!");
        boolean boolean12 = strComparableCheckBuilder5.greaterThan("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction18 = objArrayCollector16.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer19 = objArrayCollector16.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = objArrayCollector16.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer21 = objArrayCollector16.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier22 = objArrayCollector16.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator23 = objArrayCollector16.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer24 = objArrayCollector16.accumulator();
        int int25 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder5, (java.lang.Object) objListBiConsumer24);
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(objComparator3);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListFunction18);
        org.junit.Assert.assertNotNull(objListBiConsumer19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(objListBiConsumer21);
        org.junit.Assert.assertNotNull(objListSupplier22);
        org.junit.Assert.assertNotNull(objListBinaryOperator23);
        org.junit.Assert.assertNotNull(objListBiConsumer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-16) + "'", int25 == (-16));
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        java.lang.Class<java.lang.Iterable<java.util.stream.Collector.Characteristics>[]> characteristicsIterableArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Iterable<java.util.stream.Collector.Characteristics>[]> characteristicsIterableArrayArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Iterable<java.util.stream.Collector.Characteristics>[]>(characteristicsIterableArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean10 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        boolean boolean13 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean15 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        java.lang.Class<java.util.Set<java.util.stream.Collector.Characteristics>> characteristicsSetClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.Set<java.util.stream.Collector.Characteristics>> characteristicsSetEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.Set<java.util.stream.Collector.Characteristics>>(characteristicsSetClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((int) (short) 1);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        java.lang.Class<java.util.stream.IntStream> intStreamClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.stream.IntStream> intStreamArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.stream.IntStream>(intStreamClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(objListFunction8);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean7 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean9 = strComparableCheckBuilder1.equalTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean18 = strComparableCheckBuilder1.lessThan("");
        java.lang.Class<?> wildcardClass19 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction10 = objArrayCollector3.finisher();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction11 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(objListFunction10);
        org.junit.Assert.assertNotNull(objListFunction11);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.equalTo("");
        boolean boolean26 = strComparableCheckBuilder1.equalTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        java.lang.Class<java.util.Set<java.util.stream.Collector.Characteristics>[]> characteristicsSetArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.Set<java.util.stream.Collector.Characteristics>[]> characteristicsSetArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.Set<java.util.stream.Collector.Characteristics>[]>(characteristicsSetArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator12.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj16 = null;
        int int17 = objectToStringComparator12.compare((java.lang.Object) "hi!", obj16);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator18 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator18.reversed();
        java.util.Comparator<java.lang.Object> objComparator20 = objectToStringComparator12.thenComparing(objComparator19);
        java.util.stream.Collector.Characteristics[] characteristicsArray22 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList23 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList23, characteristicsArray22);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream25 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList23);
        java.util.stream.Collector.Characteristics[] characteristicsArray26 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList27 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList27, characteristicsArray26);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream29 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList27);
        java.util.stream.Collector.Characteristics[] characteristicsArray30 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList31 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList31, characteristicsArray30);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream33 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList31);
        java.util.stream.Collector.Characteristics[] characteristicsArray34 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList35 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList35, characteristicsArray34);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream37 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList35);
        java.util.stream.Collector.Characteristics[] characteristicsArray38 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList39 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList39, characteristicsArray38);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream41 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList39);
        java.util.RandomAccess[] randomAccessArray42 = new java.util.RandomAccess[] { characteristicsList23, characteristicsList27, characteristicsList31, characteristicsList35, characteristicsList39 };
        java.util.stream.Stream<java.util.RandomAccess> randomAccessStream43 = org.apache.commons.lang3.stream.Streams.of(randomAccessArray42);
        java.lang.Class<?> wildcardClass44 = randomAccessArray42.getClass();
        int int45 = objectToStringComparator12.compare((java.lang.Object) (byte) 10, (java.lang.Object) wildcardClass44);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator47 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator12, objectToStringComparatorBinaryOperator46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(objComparator20);
        org.junit.Assert.assertNotNull(characteristicsArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream25);
        org.junit.Assert.assertNotNull(characteristicsArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream29);
        org.junit.Assert.assertNotNull(characteristicsArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream33);
        org.junit.Assert.assertNotNull(characteristicsArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream37);
        org.junit.Assert.assertNotNull(characteristicsArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream41);
        org.junit.Assert.assertNotNull(randomAccessArray42);
        org.junit.Assert.assertNotNull(randomAccessStream43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-50) + "'", int45 == (-50));
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean16 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass12 = strPredicate11.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector13 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier14 = objArrayCollector13.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass17 = strPredicate16.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector18 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass17);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier19 = objArrayCollector18.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator20 = objArrayCollector18.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction21 = objArrayCollector18.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier22 = objArrayCollector18.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator23 = objArrayCollector18.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer24 = objArrayCollector18.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList26 = objectToStringComparatorFailableStream1.collect(objListSupplier14, objListBiConsumer24, objListBiConsumer25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(objListSupplier14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objListSupplier19);
        org.junit.Assert.assertNotNull(objListBinaryOperator20);
        org.junit.Assert.assertNotNull(objListFunction21);
        org.junit.Assert.assertNotNull(objListSupplier22);
        org.junit.Assert.assertNotNull(objListBinaryOperator23);
        org.junit.Assert.assertNotNull(objListBiConsumer24);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        java.lang.Class<java.lang.reflect.AnnotatedElement> annotatedElementClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.AnnotatedElement> annotatedElementEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.AnnotatedElement>(annotatedElementClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean21 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((-20));
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams4 = new org.apache.commons.lang3.stream.Streams();
        int int5 = objectToStringComparator0.compare((java.lang.Object) strPredicate3, (java.lang.Object) streams4);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder7 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int10 = objectToStringComparator0.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate9);
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator12.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams16 = new org.apache.commons.lang3.stream.Streams();
        int int17 = objectToStringComparator12.compare((java.lang.Object) strPredicate15, (java.lang.Object) streams16);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int22 = objectToStringComparator12.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate21);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder24 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean26 = strComparableCheckBuilder24.greaterThan("hi!");
        boolean boolean29 = strComparableCheckBuilder24.betweenExclusive("", "");
        boolean boolean31 = strComparableCheckBuilder24.equalTo("hi!");
        boolean boolean33 = strComparableCheckBuilder24.lessThan("");
        boolean boolean35 = strComparableCheckBuilder24.lessThan("");
        boolean boolean37 = strComparableCheckBuilder24.greaterThanOrEqualTo("");
        boolean boolean39 = strComparableCheckBuilder24.greaterThanOrEqualTo("");
        boolean boolean41 = strComparableCheckBuilder24.lessThanOrEqualTo("");
        boolean boolean44 = strComparableCheckBuilder24.between("hi!", "");
        int int45 = objectToStringComparator0.compare((java.lang.Object) strPredicate21, (java.lang.Object) "hi!");
        java.util.function.Predicate<java.lang.String> strPredicate47 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass48 = strPredicate47.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector49 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass48);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier50 = objArrayCollector49.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction51 = objArrayCollector49.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator52 = objArrayCollector49.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction53 = objArrayCollector49.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet54 = objArrayCollector49.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet55 = objArrayCollector49.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream56 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet55);
        java.util.function.Predicate<java.lang.String> strPredicate58 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass59 = strPredicate58.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector60 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass59);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier61 = objArrayCollector60.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction62 = objArrayCollector60.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator63 = objArrayCollector60.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator64 = objArrayCollector60.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier65 = objArrayCollector60.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet66 = objArrayCollector60.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator67 = objArrayCollector60.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier68 = objArrayCollector60.supplier();
        int int69 = objectToStringComparator0.compare((java.lang.Object) characteristicsSet55, (java.lang.Object) objArrayCollector60);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream70 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet55);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-16) + "'", int5 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-16) + "'", int17 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-7) + "'", int22 == (-7));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
        org.junit.Assert.assertNotNull(strPredicate47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(objListSupplier50);
        org.junit.Assert.assertNotNull(objListFunction51);
        org.junit.Assert.assertNotNull(objListBinaryOperator52);
        org.junit.Assert.assertNotNull(objListFunction53);
        org.junit.Assert.assertNotNull(characteristicsSet54);
        org.junit.Assert.assertNotNull(characteristicsSet55);
        org.junit.Assert.assertNotNull(characteristicsFailableStream56);
        org.junit.Assert.assertNotNull(strPredicate58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(objListSupplier61);
        org.junit.Assert.assertNotNull(objListFunction62);
        org.junit.Assert.assertNotNull(objListBinaryOperator63);
        org.junit.Assert.assertNotNull(objListBinaryOperator64);
        org.junit.Assert.assertNotNull(objListSupplier65);
        org.junit.Assert.assertNotNull(characteristicsSet66);
        org.junit.Assert.assertNotNull(objListBinaryOperator67);
        org.junit.Assert.assertNotNull(objListSupplier68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-20) + "'", int69 == (-20));
        org.junit.Assert.assertNotNull(characteristicsStream70);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean11 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean14 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        boolean boolean13 = strComparableCheckBuilder3.between("hi!", "");
        java.lang.Class<?> wildcardClass14 = strComparableCheckBuilder3.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector15 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass14);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector15.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass19 = strPredicate18.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector20 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass19);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier21 = objArrayCollector20.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction22 = objArrayCollector20.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer23 = objArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = objArrayCollector20.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier25 = objArrayCollector20.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator26 = objArrayCollector20.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer27 = objArrayCollector20.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList29 = objectToStringComparatorFailableStream1.collect(objListSupplier16, objListBiConsumer27, objListBiConsumer28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(objListSupplier21);
        org.junit.Assert.assertNotNull(objListFunction22);
        org.junit.Assert.assertNotNull(objListBiConsumer23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(objListSupplier25);
        org.junit.Assert.assertNotNull(objListBinaryOperator26);
        org.junit.Assert.assertNotNull(objListBiConsumer27);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream3 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        java.lang.Class<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>> objArrayCollectorClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>> objArrayCollectorArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>>(objArrayCollectorClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        java.lang.Class<java.util.function.BinaryOperator<java.util.List<java.lang.Object>>> objListBinaryOperatorClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.function.BinaryOperator<java.util.List<java.lang.Object>>> objListBinaryOperatorEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.function.BinaryOperator<java.util.List<java.lang.Object>>>(objListBinaryOperatorClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("");
        java.lang.Class<?> wildcardClass15 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate7 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass8 = strPredicate7.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray15 = new java.lang.reflect.GenericDeclaration[] { wildcardClass2, wildcardClass5, wildcardClass8, wildcardClass11, wildcardClass14 };
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray16 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray15 };
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayStream17 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray16);
        java.lang.Class<?> wildcardClass18 = genericDeclarationArray16.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector19 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass18);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector20 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass18);
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator21 = objArrayCollector20.combiner();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(genericDeclarationArray15);
        org.junit.Assert.assertNotNull(genericDeclarationArray16);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(objListBinaryOperator21);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector12 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass11);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier13 = objArrayCollector12.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator14 = objArrayCollector12.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = objArrayCollector12.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = objArrayCollector12.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator17 = objArrayCollector12.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = objArrayCollector12.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = objArrayCollector12.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier20 = objArrayCollector12.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer21 = null;
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList23 = objectToStringComparatorFailableStream1.collect(objListSupplier20, objListBiConsumer21, objListBiConsumer22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(objListSupplier13);
        org.junit.Assert.assertNotNull(objListBinaryOperator14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(objListBinaryOperator17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(objListSupplier20);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator7 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator7.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj11 = null;
        int int12 = objectToStringComparator7.compare((java.lang.Object) "hi!", obj11);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder14 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean17 = strComparableCheckBuilder14.betweenExclusive("", "");
        boolean boolean19 = strComparableCheckBuilder14.greaterThan("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator21 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator21.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj25 = null;
        int int26 = objectToStringComparator21.compare((java.lang.Object) "hi!", obj25);
        java.util.Comparator<java.lang.Object> objComparator27 = objectToStringComparator20.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator21);
        int int28 = objectToStringComparator7.compare((java.lang.Object) "", (java.lang.Object) objComparator27);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator30 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator7, objectToStringComparatorBinaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(objComparator27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-50) + "'", int28 == (-50));
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean16 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean18 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean21 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass13 = strPredicate12.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector14 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass13);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier15 = objArrayCollector14.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator16 = objArrayCollector14.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = objArrayCollector14.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = objArrayCollector14.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector14.finisher();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray20 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objListSupplier15);
        org.junit.Assert.assertNotNull(objListBinaryOperator16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(objListFunction19);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        boolean boolean19 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean21 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream60 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream60);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.equalTo("");
        boolean boolean26 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        java.lang.Class<java.util.Collection<java.util.stream.Collector.Characteristics>> characteristicsCollectionClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.Collection<java.util.stream.Collector.Characteristics>> characteristicsCollectionEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.Collection<java.util.stream.Collector.Characteristics>>(characteristicsCollectionClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.lang.Class<?> wildcardClass9 = characteristicsSet6.getClass();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("");
        boolean boolean19 = strComparableCheckBuilder1.between("", "");
        boolean boolean22 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator5 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator5.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj9 = null;
        int int10 = objectToStringComparator5.compare((java.lang.Object) "hi!", obj9);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator11 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator12 = objectToStringComparator11.reversed();
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator5.thenComparing(objComparator12);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder15 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean17 = strComparableCheckBuilder15.greaterThan("hi!");
        boolean boolean19 = strComparableCheckBuilder15.greaterThanOrEqualTo("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.apache.commons.lang3.compare.ComparableUtils.between("", "");
        int int23 = objectToStringComparator5.compare((java.lang.Object) boolean19, (java.lang.Object) strPredicate22);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator25 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator5, objectToStringComparatorBinaryOperator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(objComparator6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(objComparator12);
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean25 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean27 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector6 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector6.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector6.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer9 = objArrayCollector6.accumulator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray10 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objListFunction8);
        org.junit.Assert.assertNotNull(objListBiConsumer9);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier5 = objArrayCollector3.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier6 = objArrayCollector3.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector3.supplier();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListSupplier5);
        org.junit.Assert.assertNotNull(objListSupplier6);
        org.junit.Assert.assertNotNull(objListSupplier7);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        java.lang.Class<?> wildcardClass55 = strComparableCheckBuilderFailableStream54.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector56 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray1 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray0 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray2 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray3 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray2 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray4 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray5 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray4 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray6 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray7 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray6 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray8 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray9 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray8 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray10 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray11 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray10 };
        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray12 = new java.lang.reflect.GenericDeclaration[][][] { genericDeclarationArray1, genericDeclarationArray3, genericDeclarationArray5, genericDeclarationArray7, genericDeclarationArray9, genericDeclarationArray11 };
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayStream13 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray12);
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNotNull(genericDeclarationArray1);
        org.junit.Assert.assertNotNull(genericDeclarationArray2);
        org.junit.Assert.assertNotNull(genericDeclarationArray3);
        org.junit.Assert.assertNotNull(genericDeclarationArray4);
        org.junit.Assert.assertNotNull(genericDeclarationArray5);
        org.junit.Assert.assertNotNull(genericDeclarationArray6);
        org.junit.Assert.assertNotNull(genericDeclarationArray7);
        org.junit.Assert.assertNotNull(genericDeclarationArray8);
        org.junit.Assert.assertNotNull(genericDeclarationArray9);
        org.junit.Assert.assertNotNull(genericDeclarationArray10);
        org.junit.Assert.assertNotNull(genericDeclarationArray11);
        org.junit.Assert.assertNotNull(genericDeclarationArray12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream13);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean19 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean21 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean23 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((-4));
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range(6);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range((int) (byte) 10);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean6 = strComparableCheckBuilder1.equalTo("");
        boolean boolean8 = strComparableCheckBuilder1.lessThan("");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj14 = null;
        int int15 = objectToStringComparator10.compare((java.lang.Object) "hi!", obj14);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator16.reversed();
        java.util.Comparator<java.lang.Object> objComparator18 = objectToStringComparator10.thenComparing(objComparator17);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator19 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj24 = null;
        int int25 = objectToStringComparator20.compare((java.lang.Object) "hi!", obj24);
        java.util.Comparator<java.lang.Object> objComparator26 = objectToStringComparator19.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator20);
        int int28 = objectToStringComparator10.compare((java.lang.Object) objectToStringComparator19, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator29 = objectToStringComparator10.reversed();
        java.util.Comparator<java.lang.Object> objComparator30 = objectToStringComparator10.reversed();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator32 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator10, objectToStringComparatorBinaryOperator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(objComparator18);
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(objComparator26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 62 + "'", int28 == 62);
        org.junit.Assert.assertNotNull(objComparator29);
        org.junit.Assert.assertNotNull(objComparator30);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder13 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean15 = strComparableCheckBuilder13.greaterThan("hi!");
        boolean boolean18 = strComparableCheckBuilder13.between("hi!", "");
        boolean boolean20 = strComparableCheckBuilder13.lessThanOrEqualTo("hi!");
        int int22 = objectToStringComparator10.compare((java.lang.Object) strComparableCheckBuilder13, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass25 = strPredicate24.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector26 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass25);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier27 = objArrayCollector26.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator28 = objArrayCollector26.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction29 = objArrayCollector26.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator30 = objArrayCollector26.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder32 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean34 = strComparableCheckBuilder32.greaterThan("hi!");
        boolean boolean37 = strComparableCheckBuilder32.betweenExclusive("", "");
        boolean boolean39 = strComparableCheckBuilder32.equalTo("hi!");
        boolean boolean41 = strComparableCheckBuilder32.lessThan("");
        boolean boolean43 = strComparableCheckBuilder32.equalTo("");
        boolean boolean45 = strComparableCheckBuilder32.lessThan("hi!");
        boolean boolean47 = strComparableCheckBuilder32.greaterThan("hi!");
        int int48 = objectToStringComparator10.compare((java.lang.Object) objArrayCollector26, (java.lang.Object) "hi!");
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator49 = objArrayCollector26.combiner();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray50 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNotNull(objectToStringComparator10);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objListSupplier27);
        org.junit.Assert.assertNotNull(objListBinaryOperator28);
        org.junit.Assert.assertNotNull(objListFunction29);
        org.junit.Assert.assertNotNull(objListBinaryOperator30);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
        org.junit.Assert.assertNotNull(objListBinaryOperator49);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator14.reversed();
        java.util.Comparator<java.lang.Object> objComparator16 = objComparator15.reversed();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator0.thenComparing(objComparator16);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator18 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator19 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator20 = objectToStringComparator19.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams23 = new org.apache.commons.lang3.stream.Streams();
        int int24 = objectToStringComparator19.compare((java.lang.Object) strPredicate22, (java.lang.Object) streams23);
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator18.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator19);
        java.util.Comparator<java.lang.Object> objComparator26 = objComparator25.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator27 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int30 = objectToStringComparator27.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.Comparator<java.lang.Object> objComparator31 = objectToStringComparator27.reversed();
        java.util.Comparator<java.lang.Object> objComparator32 = objComparator25.thenComparing(objComparator31);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder34 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean37 = strComparableCheckBuilder34.between("", "");
        boolean boolean39 = strComparableCheckBuilder34.equalTo("");
        boolean boolean41 = strComparableCheckBuilder34.lessThan("");
        boolean boolean43 = strComparableCheckBuilder34.greaterThan("hi!");
        boolean boolean45 = strComparableCheckBuilder34.greaterThanOrEqualTo("");
        int int46 = objectToStringComparator0.compare((java.lang.Object) objComparator25, (java.lang.Object) "");
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(objComparator20);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-16) + "'", int24 == (-16));
        org.junit.Assert.assertNotNull(objComparator25);
        org.junit.Assert.assertNotNull(objComparator26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objComparator31);
        org.junit.Assert.assertNotNull(objComparator32);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 50 + "'", int46 == 50);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream12 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsStream12);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("");
        boolean boolean18 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean20 = strComparableCheckBuilder1.lessThan("");
        boolean boolean22 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean25 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        java.lang.Class<?> wildcardClass26 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate7 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass8 = strPredicate7.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray15 = new java.lang.reflect.GenericDeclaration[] { wildcardClass2, wildcardClass5, wildcardClass8, wildcardClass11, wildcardClass14 };
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray16 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray15 };
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayStream17 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray16);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayFailableStream18 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.reflect.GenericDeclaration[]>(genericDeclarationArrayStream17);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(genericDeclarationArray15);
        org.junit.Assert.assertNotNull(genericDeclarationArray16);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream17);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer7 = objArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator8 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction10 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListBiConsumer7);
        org.junit.Assert.assertNotNull(objListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(objListFunction10);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector8 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass7);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector8.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction10 = objArrayCollector8.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer11 = objArrayCollector8.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction12 = objArrayCollector8.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier13 = objArrayCollector8.supplier();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator14.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder17 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean19 = strComparableCheckBuilder17.greaterThan("hi!");
        boolean boolean22 = strComparableCheckBuilder17.between("hi!", "");
        boolean boolean24 = strComparableCheckBuilder17.lessThanOrEqualTo("hi!");
        int int26 = objectToStringComparator14.compare((java.lang.Object) strComparableCheckBuilder17, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate28 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass29 = strPredicate28.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector30 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass29);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier31 = objArrayCollector30.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator32 = objArrayCollector30.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction33 = objArrayCollector30.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator34 = objArrayCollector30.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder36 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean38 = strComparableCheckBuilder36.greaterThan("hi!");
        boolean boolean41 = strComparableCheckBuilder36.betweenExclusive("", "");
        boolean boolean43 = strComparableCheckBuilder36.equalTo("hi!");
        boolean boolean45 = strComparableCheckBuilder36.lessThan("");
        boolean boolean47 = strComparableCheckBuilder36.equalTo("");
        boolean boolean49 = strComparableCheckBuilder36.lessThan("hi!");
        boolean boolean51 = strComparableCheckBuilder36.greaterThan("hi!");
        int int52 = objectToStringComparator14.compare((java.lang.Object) objArrayCollector30, (java.lang.Object) "hi!");
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator53 = objArrayCollector30.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet54 = objArrayCollector30.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer55 = objArrayCollector30.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList57 = objectToStringComparatorFailableStream1.collect(objListSupplier13, objListBiConsumer55, objListBiConsumer56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListFunction10);
        org.junit.Assert.assertNotNull(objListBiConsumer11);
        org.junit.Assert.assertNotNull(objListFunction12);
        org.junit.Assert.assertNotNull(objListSupplier13);
        org.junit.Assert.assertNotNull(objectToStringComparator14);
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(strPredicate28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(objListSupplier31);
        org.junit.Assert.assertNotNull(objListBinaryOperator32);
        org.junit.Assert.assertNotNull(objListFunction33);
        org.junit.Assert.assertNotNull(objListBinaryOperator34);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 7 + "'", int52 == 7);
        org.junit.Assert.assertNotNull(objListBinaryOperator53);
        org.junit.Assert.assertNotNull(characteristicsSet54);
        org.junit.Assert.assertNotNull(objListBiConsumer55);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        java.lang.Class<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>[]> intBaseStreamArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>[]> intBaseStreamArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>[]>(intBaseStreamArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream14 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
        org.junit.Assert.assertNotNull(characteristicsFailableStream14);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate5 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass6 = strPredicate5.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector7 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass6);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector7.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector7.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction10 = objArrayCollector7.finisher();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction11 = objArrayCollector7.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector7.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction18 = objArrayCollector16.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer19 = objArrayCollector16.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = objArrayCollector16.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer21 = objArrayCollector16.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier22 = objArrayCollector16.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer23 = objArrayCollector16.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList25 = objectToStringComparatorFailableStream1.collect(objListSupplier12, objListBiConsumer23, objListBiConsumer24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(strPredicate5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListFunction10);
        org.junit.Assert.assertNotNull(objListFunction11);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListFunction18);
        org.junit.Assert.assertNotNull(objListBiConsumer19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(objListBiConsumer21);
        org.junit.Assert.assertNotNull(objListSupplier22);
        org.junit.Assert.assertNotNull(objListBiConsumer23);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector8 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass7);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector8.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector8.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator11 = objArrayCollector8.combiner();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray12 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListSupplier10);
        org.junit.Assert.assertNotNull(objListBinaryOperator11);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator8 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector3.supplier();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBinaryOperator8);
        org.junit.Assert.assertNotNull(objListSupplier9);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean18 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean20 = strComparableCheckBuilder1.equalTo("");
        boolean boolean23 = strComparableCheckBuilder1.between("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean15 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        boolean boolean17 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass9 = strPredicate8.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass9);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction12 = objArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator13 = objArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator14 = objArrayCollector10.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier15 = objArrayCollector10.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = objArrayCollector10.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator17 = objArrayCollector10.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction18 = objArrayCollector10.finisher();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector10.finisher();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray20 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(objListFunction12);
        org.junit.Assert.assertNotNull(objListBinaryOperator13);
        org.junit.Assert.assertNotNull(objListBinaryOperator14);
        org.junit.Assert.assertNotNull(objListSupplier15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(objListBinaryOperator17);
        org.junit.Assert.assertNotNull(objListFunction18);
        org.junit.Assert.assertNotNull(objListFunction19);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream13 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsStream13);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer7 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer11 = objArrayCollector3.accumulator();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(objListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(objListFunction9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(objListBiConsumer11);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator4 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListBinaryOperator4);
        org.junit.Assert.assertNotNull(objListFunction5);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("");
        boolean boolean18 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream5 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsStream5);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        java.lang.Class<java.lang.String> strClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.String> strEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.String>(strClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        java.lang.Class<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.GenericDeclaration[]>(genericDeclarationArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        java.lang.Class<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.GenericDeclaration[][][][]>(genericDeclarationArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer10 = objArrayCollector3.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction11 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator12 = objArrayCollector3.combiner();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(objListBiConsumer10);
        org.junit.Assert.assertNotNull(objListFunction11);
        org.junit.Assert.assertNotNull(objListBinaryOperator12);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("");
        boolean boolean18 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean20 = strComparableCheckBuilder1.lessThan("");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean25 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.equalTo("");
        boolean boolean25 = strComparableCheckBuilder1.between("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean11 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean13 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector11.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator13 = objArrayCollector11.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = objArrayCollector11.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = objArrayCollector11.characteristics();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray16 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objListBinaryOperator13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction10 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListFunction10);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        java.lang.Class<java.lang.Iterable<java.util.stream.Collector.Characteristics>[]> characteristicsIterableArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.Iterable<java.util.stream.Collector.Characteristics>[]> characteristicsIterableArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.Iterable<java.util.stream.Collector.Characteristics>[]>(characteristicsIterableArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams5 = new org.apache.commons.lang3.stream.Streams();
        int int6 = objectToStringComparator1.compare((java.lang.Object) strPredicate4, (java.lang.Object) streams5);
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int11 = objectToStringComparator8.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector15 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass14);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction17 = objArrayCollector15.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer18 = objArrayCollector15.accumulator();
        int int19 = objectToStringComparator0.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer18);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams24 = new org.apache.commons.lang3.stream.Streams();
        int int25 = objectToStringComparator20.compare((java.lang.Object) strPredicate23, (java.lang.Object) streams24);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int30 = objectToStringComparator20.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate29);
        java.util.Comparator<java.lang.Object> objComparator31 = objectToStringComparator20.reversed();
        java.util.Comparator<java.lang.Object> objComparator32 = objectToStringComparator20.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder34 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean36 = strComparableCheckBuilder34.greaterThanOrEqualTo("");
        int int37 = objectToStringComparator0.compare((java.lang.Object) objComparator32, (java.lang.Object) boolean36);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator38 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator39 = objectToStringComparator38.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams42 = new org.apache.commons.lang3.stream.Streams();
        int int43 = objectToStringComparator38.compare((java.lang.Object) strPredicate41, (java.lang.Object) streams42);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder45 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate47 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int48 = objectToStringComparator38.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate47);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator49 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator50 = objectToStringComparator49.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate52 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams53 = new org.apache.commons.lang3.stream.Streams();
        int int54 = objectToStringComparator49.compare((java.lang.Object) strPredicate52, (java.lang.Object) streams53);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder56 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate58 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int59 = objectToStringComparator49.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate58);
        java.util.Comparator<java.lang.Object> objComparator60 = objectToStringComparator49.reversed();
        java.util.Comparator<java.lang.Object> objComparator61 = objectToStringComparator38.thenComparing(objComparator60);
        java.util.Comparator<java.lang.Object> objComparator62 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator38);
        java.util.Comparator<java.lang.Object> objComparator63 = objComparator62.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator64 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator65 = objectToStringComparator64.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate67 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams68 = new org.apache.commons.lang3.stream.Streams();
        int int69 = objectToStringComparator64.compare((java.lang.Object) strPredicate67, (java.lang.Object) streams68);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder71 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate73 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int74 = objectToStringComparator64.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate73);
        java.util.Comparator<java.lang.Object> objComparator75 = objectToStringComparator64.reversed();
        java.util.Comparator<java.lang.Object> objComparator76 = objectToStringComparator64.reversed();
        java.util.Comparator<java.lang.Object> objComparator77 = objComparator76.reversed();
        java.util.Comparator<java.lang.Object> objComparator78 = objComparator77.reversed();
        java.util.Comparator<java.lang.Object> objComparator79 = objComparator62.thenComparing(objComparator78);
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-16) + "'", int6 == (-16));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(objListFunction17);
        org.junit.Assert.assertNotNull(objListBiConsumer18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-62) + "'", int19 == (-62));
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-16) + "'", int25 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-7) + "'", int30 == (-7));
        org.junit.Assert.assertNotNull(objComparator31);
        org.junit.Assert.assertNotNull(objComparator32);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-10) + "'", int37 == (-10));
        org.junit.Assert.assertNotNull(objComparator39);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-16) + "'", int43 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder45);
        org.junit.Assert.assertNotNull(strPredicate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-7) + "'", int48 == (-7));
        org.junit.Assert.assertNotNull(objComparator50);
        org.junit.Assert.assertNotNull(strPredicate52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-16) + "'", int54 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder56);
        org.junit.Assert.assertNotNull(strPredicate58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-7) + "'", int59 == (-7));
        org.junit.Assert.assertNotNull(objComparator60);
        org.junit.Assert.assertNotNull(objComparator61);
        org.junit.Assert.assertNotNull(objComparator62);
        org.junit.Assert.assertNotNull(objComparator63);
        org.junit.Assert.assertNotNull(objComparator65);
        org.junit.Assert.assertNotNull(strPredicate67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-16) + "'", int69 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder71);
        org.junit.Assert.assertNotNull(strPredicate73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-7) + "'", int74 == (-7));
        org.junit.Assert.assertNotNull(objComparator75);
        org.junit.Assert.assertNotNull(objComparator76);
        org.junit.Assert.assertNotNull(objComparator77);
        org.junit.Assert.assertNotNull(objComparator78);
        org.junit.Assert.assertNotNull(objComparator79);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        java.util.Comparator<java.lang.Object> objComparator9 = objComparator7.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator11 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator12 = objectToStringComparator11.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams15 = new org.apache.commons.lang3.stream.Streams();
        int int16 = objectToStringComparator11.compare((java.lang.Object) strPredicate14, (java.lang.Object) streams15);
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator10.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator11);
        java.util.Comparator<java.lang.Object> objComparator18 = objComparator17.reversed();
        java.util.Comparator<java.lang.Object> objComparator19 = objComparator17.reversed();
        java.util.Comparator<java.lang.Object> objComparator20 = objComparator9.thenComparing(objComparator19);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertNotNull(objComparator12);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-16) + "'", int16 == (-16));
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(objComparator18);
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(objComparator20);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream60 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream61 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream60);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream61);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator7 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator7.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams11 = new org.apache.commons.lang3.stream.Streams();
        int int12 = objectToStringComparator7.compare((java.lang.Object) strPredicate10, (java.lang.Object) streams11);
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator6.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int17 = objectToStringComparator14.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass20 = strPredicate19.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector21 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass20);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier22 = objArrayCollector21.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction23 = objArrayCollector21.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer24 = objArrayCollector21.accumulator();
        int int25 = objectToStringComparator6.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer24);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator26 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator27 = objectToStringComparator26.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams30 = new org.apache.commons.lang3.stream.Streams();
        int int31 = objectToStringComparator26.compare((java.lang.Object) strPredicate29, (java.lang.Object) streams30);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder33 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate35 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int36 = objectToStringComparator26.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate35);
        java.util.Comparator<java.lang.Object> objComparator37 = objectToStringComparator26.reversed();
        java.util.Comparator<java.lang.Object> objComparator38 = objectToStringComparator26.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder40 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean42 = strComparableCheckBuilder40.greaterThanOrEqualTo("");
        int int43 = objectToStringComparator6.compare((java.lang.Object) objComparator38, (java.lang.Object) boolean42);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator44 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator45 = objectToStringComparator44.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate47 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams48 = new org.apache.commons.lang3.stream.Streams();
        int int49 = objectToStringComparator44.compare((java.lang.Object) strPredicate47, (java.lang.Object) streams48);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder51 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate53 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int54 = objectToStringComparator44.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate53);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator55 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator56 = objectToStringComparator55.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate58 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams59 = new org.apache.commons.lang3.stream.Streams();
        int int60 = objectToStringComparator55.compare((java.lang.Object) strPredicate58, (java.lang.Object) streams59);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder62 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate64 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int65 = objectToStringComparator55.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate64);
        java.util.Comparator<java.lang.Object> objComparator66 = objectToStringComparator55.reversed();
        java.util.Comparator<java.lang.Object> objComparator67 = objectToStringComparator44.thenComparing(objComparator66);
        java.util.Comparator<java.lang.Object> objComparator68 = objectToStringComparator6.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator44);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator70 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator6, objectToStringComparatorBinaryOperator69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-16) + "'", int12 == (-16));
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(objListSupplier22);
        org.junit.Assert.assertNotNull(objListFunction23);
        org.junit.Assert.assertNotNull(objListBiConsumer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-62) + "'", int25 == (-62));
        org.junit.Assert.assertNotNull(objComparator27);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-16) + "'", int31 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder33);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-7) + "'", int36 == (-7));
        org.junit.Assert.assertNotNull(objComparator37);
        org.junit.Assert.assertNotNull(objComparator38);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-10) + "'", int43 == (-10));
        org.junit.Assert.assertNotNull(objComparator45);
        org.junit.Assert.assertNotNull(strPredicate47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-16) + "'", int49 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder51);
        org.junit.Assert.assertNotNull(strPredicate53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-7) + "'", int54 == (-7));
        org.junit.Assert.assertNotNull(objComparator56);
        org.junit.Assert.assertNotNull(strPredicate58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-16) + "'", int60 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder62);
        org.junit.Assert.assertNotNull(strPredicate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-7) + "'", int65 == (-7));
        org.junit.Assert.assertNotNull(objComparator66);
        org.junit.Assert.assertNotNull(objComparator67);
        org.junit.Assert.assertNotNull(objComparator68);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator4 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator5 = objectToStringComparator4.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate7 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj8 = null;
        int int9 = objectToStringComparator4.compare((java.lang.Object) "hi!", obj8);
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator4.reversed();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator4.reversed();
        java.lang.Class<?> wildcardClass12 = objectToStringComparator4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector13 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray14 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(objComparator5);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean19 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream60 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream61 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream62 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream60);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream61);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream62);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj14 = null;
        int int15 = objectToStringComparator10.compare((java.lang.Object) "hi!", obj14);
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator9.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator10);
        int int18 = objectToStringComparator0.compare((java.lang.Object) objectToStringComparator9, (java.lang.Object) 1L);
        java.lang.Class<?> wildcardClass19 = objectToStringComparator9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector20 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass19);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector21 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass19);
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer22 = objArrayCollector21.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator23 = objArrayCollector21.combiner();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 62 + "'", int18 == 62);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(objListBiConsumer22);
        org.junit.Assert.assertNotNull(objListBinaryOperator23);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean13 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean15 = strComparableCheckBuilder1.equalTo("");
        boolean boolean18 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams4 = new org.apache.commons.lang3.stream.Streams();
        int int5 = objectToStringComparator0.compare((java.lang.Object) strPredicate3, (java.lang.Object) streams4);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder7 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int10 = objectToStringComparator0.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate9);
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator12.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams16 = new org.apache.commons.lang3.stream.Streams();
        int int17 = objectToStringComparator12.compare((java.lang.Object) strPredicate15, (java.lang.Object) streams16);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int22 = objectToStringComparator12.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate21);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder24 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean26 = strComparableCheckBuilder24.greaterThan("hi!");
        boolean boolean29 = strComparableCheckBuilder24.betweenExclusive("", "");
        boolean boolean31 = strComparableCheckBuilder24.equalTo("hi!");
        boolean boolean33 = strComparableCheckBuilder24.lessThan("");
        boolean boolean35 = strComparableCheckBuilder24.lessThan("");
        boolean boolean37 = strComparableCheckBuilder24.greaterThanOrEqualTo("");
        boolean boolean39 = strComparableCheckBuilder24.greaterThanOrEqualTo("");
        boolean boolean41 = strComparableCheckBuilder24.lessThanOrEqualTo("");
        boolean boolean44 = strComparableCheckBuilder24.between("hi!", "");
        int int45 = objectToStringComparator0.compare((java.lang.Object) strPredicate21, (java.lang.Object) "hi!");
        java.util.function.Predicate<java.lang.String> strPredicate47 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass48 = strPredicate47.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector49 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass48);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier50 = objArrayCollector49.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction51 = objArrayCollector49.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator52 = objArrayCollector49.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction53 = objArrayCollector49.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet54 = objArrayCollector49.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet55 = objArrayCollector49.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream56 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet55);
        java.util.function.Predicate<java.lang.String> strPredicate58 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass59 = strPredicate58.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector60 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass59);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier61 = objArrayCollector60.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction62 = objArrayCollector60.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator63 = objArrayCollector60.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator64 = objArrayCollector60.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier65 = objArrayCollector60.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet66 = objArrayCollector60.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator67 = objArrayCollector60.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier68 = objArrayCollector60.supplier();
        int int69 = objectToStringComparator0.compare((java.lang.Object) characteristicsSet55, (java.lang.Object) objArrayCollector60);
        java.lang.Object obj70 = null;
        java.util.function.Predicate<java.lang.String> strPredicate73 = org.apache.commons.lang3.compare.ComparableUtils.betweenExclusive("hi!", "");
        int int74 = objectToStringComparator0.compare(obj70, (java.lang.Object) "");
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-16) + "'", int5 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-16) + "'", int17 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-7) + "'", int22 == (-7));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
        org.junit.Assert.assertNotNull(strPredicate47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(objListSupplier50);
        org.junit.Assert.assertNotNull(objListFunction51);
        org.junit.Assert.assertNotNull(objListBinaryOperator52);
        org.junit.Assert.assertNotNull(objListFunction53);
        org.junit.Assert.assertNotNull(characteristicsSet54);
        org.junit.Assert.assertNotNull(characteristicsSet55);
        org.junit.Assert.assertNotNull(characteristicsFailableStream56);
        org.junit.Assert.assertNotNull(strPredicate58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(objListSupplier61);
        org.junit.Assert.assertNotNull(objListFunction62);
        org.junit.Assert.assertNotNull(objListBinaryOperator63);
        org.junit.Assert.assertNotNull(objListBinaryOperator64);
        org.junit.Assert.assertNotNull(objListSupplier65);
        org.junit.Assert.assertNotNull(characteristicsSet66);
        org.junit.Assert.assertNotNull(objListBinaryOperator67);
        org.junit.Assert.assertNotNull(objListSupplier68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-20) + "'", int69 == (-20));
        org.junit.Assert.assertNotNull(strPredicate73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer7 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.stream.Collector.Characteristics>[] characteristicsListArray2 = (java.util.List<java.util.stream.Collector.Characteristics>[]) listArray1;
        java.util.stream.Stream<java.util.List<java.util.stream.Collector.Characteristics>> characteristicsListStream3 = org.apache.commons.lang3.stream.Streams.of(characteristicsListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(characteristicsListArray2);
        org.junit.Assert.assertNotNull(characteristicsListStream3);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams14 = new org.apache.commons.lang3.stream.Streams();
        int int15 = objectToStringComparator10.compare((java.lang.Object) strPredicate13, (java.lang.Object) streams14);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator16.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj20 = null;
        int int21 = objectToStringComparator16.compare((java.lang.Object) "hi!", obj20);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator22 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator22.reversed();
        java.util.Comparator<java.lang.Object> objComparator24 = objectToStringComparator16.thenComparing(objComparator23);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator25 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator26 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator27 = objectToStringComparator26.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj30 = null;
        int int31 = objectToStringComparator26.compare((java.lang.Object) "hi!", obj30);
        java.util.Comparator<java.lang.Object> objComparator32 = objectToStringComparator25.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator26);
        int int34 = objectToStringComparator16.compare((java.lang.Object) objectToStringComparator25, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator35 = objectToStringComparator10.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator25);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator36 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator37 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator38 = objectToStringComparator37.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams41 = new org.apache.commons.lang3.stream.Streams();
        int int42 = objectToStringComparator37.compare((java.lang.Object) strPredicate40, (java.lang.Object) streams41);
        java.util.Comparator<java.lang.Object> objComparator43 = objectToStringComparator36.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator37);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator44 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int47 = objectToStringComparator44.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate49 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass50 = strPredicate49.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector51 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass50);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier52 = objArrayCollector51.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction53 = objArrayCollector51.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer54 = objArrayCollector51.accumulator();
        int int55 = objectToStringComparator36.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer54);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator56 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator57 = objectToStringComparator56.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate59 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams60 = new org.apache.commons.lang3.stream.Streams();
        int int61 = objectToStringComparator56.compare((java.lang.Object) strPredicate59, (java.lang.Object) streams60);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder63 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate65 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int66 = objectToStringComparator56.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate65);
        java.util.Comparator<java.lang.Object> objComparator67 = objectToStringComparator56.reversed();
        java.util.Comparator<java.lang.Object> objComparator68 = objectToStringComparator56.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder70 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean72 = strComparableCheckBuilder70.greaterThanOrEqualTo("");
        int int73 = objectToStringComparator36.compare((java.lang.Object) objComparator68, (java.lang.Object) boolean72);
        java.util.Comparator<java.lang.Object> objComparator74 = objectToStringComparator10.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator36);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator76 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator36, objectToStringComparatorBinaryOperator75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-16) + "'", int15 == (-16));
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertNotNull(objComparator24);
        org.junit.Assert.assertNotNull(objComparator27);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(objComparator32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 62 + "'", int34 == 62);
        org.junit.Assert.assertNotNull(objComparator35);
        org.junit.Assert.assertNotNull(objComparator38);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-16) + "'", int42 == (-16));
        org.junit.Assert.assertNotNull(objComparator43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(objListSupplier52);
        org.junit.Assert.assertNotNull(objListFunction53);
        org.junit.Assert.assertNotNull(objListBiConsumer54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-62) + "'", int55 == (-62));
        org.junit.Assert.assertNotNull(objComparator57);
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-16) + "'", int61 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder63);
        org.junit.Assert.assertNotNull(strPredicate65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-7) + "'", int66 == (-7));
        org.junit.Assert.assertNotNull(objComparator67);
        org.junit.Assert.assertNotNull(objComparator68);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-10) + "'", int73 == (-10));
        org.junit.Assert.assertNotNull(objComparator74);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        java.lang.Class<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>[][]> intBaseStreamArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>[][]> intBaseStreamArrayArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>[][]>(intBaseStreamArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream12 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier18 = objArrayCollector16.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = objArrayCollector16.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction20 = objArrayCollector16.finisher();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray21 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNull(objectToStringComparatorStream12);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListSupplier18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(objListFunction20);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier5 = objArrayCollector3.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier6 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListSupplier5);
        org.junit.Assert.assertNotNull(objListSupplier6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.equalTo("");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.greaterThan("");
        java.lang.Class<?> wildcardClass20 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector3.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer10 = objArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator11 = objArrayCollector3.combiner();
        java.lang.Class<?> wildcardClass12 = objArrayCollector3.getClass();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListBiConsumer10);
        org.junit.Assert.assertNotNull(objListBinaryOperator11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator2 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator3 = objectToStringComparator2.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate5 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj6 = null;
        int int7 = objectToStringComparator2.compare((java.lang.Object) "hi!", obj6);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator8.reversed();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator2.thenComparing(objComparator9);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator11 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator12.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj16 = null;
        int int17 = objectToStringComparator12.compare((java.lang.Object) "hi!", obj16);
        java.util.Comparator<java.lang.Object> objComparator18 = objectToStringComparator11.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator12);
        int int20 = objectToStringComparator2.compare((java.lang.Object) objectToStringComparator11, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator2.reversed();
        java.util.Comparator<java.lang.Object> objComparator22 = objComparator21.reversed();
        java.util.Comparator<java.lang.Object> objComparator23 = objComparator21.reversed();
        java.util.Comparator<java.lang.Object> objComparator24 = objectToStringComparator0.thenComparing(objComparator23);
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(objComparator3);
        org.junit.Assert.assertNotNull(strPredicate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(objComparator18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 62 + "'", int20 == 62);
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertNotNull(objComparator24);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder13 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean15 = strComparableCheckBuilder13.greaterThan("hi!");
        boolean boolean18 = strComparableCheckBuilder13.between("hi!", "");
        boolean boolean20 = strComparableCheckBuilder13.lessThanOrEqualTo("hi!");
        int int22 = objectToStringComparator10.compare((java.lang.Object) strComparableCheckBuilder13, (java.lang.Object) 4);
        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator10.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator24 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator24.reversed();
        java.util.Comparator<java.lang.Object> objComparator26 = objComparator25.reversed();
        java.util.Comparator<java.lang.Object> objComparator27 = objectToStringComparator10.thenComparing(objComparator26);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder29 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean31 = strComparableCheckBuilder29.greaterThan("hi!");
        boolean boolean34 = strComparableCheckBuilder29.betweenExclusive("", "");
        boolean boolean36 = strComparableCheckBuilder29.equalTo("");
        boolean boolean38 = strComparableCheckBuilder29.equalTo("hi!");
        boolean boolean40 = strComparableCheckBuilder29.lessThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder42 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean44 = strComparableCheckBuilder42.greaterThan("hi!");
        boolean boolean47 = strComparableCheckBuilder42.betweenExclusive("", "");
        boolean boolean49 = strComparableCheckBuilder42.equalTo("hi!");
        boolean boolean51 = strComparableCheckBuilder42.lessThan("");
        boolean boolean53 = strComparableCheckBuilder42.lessThan("hi!");
        boolean boolean55 = strComparableCheckBuilder42.greaterThan("hi!");
        int int56 = objectToStringComparator10.compare((java.lang.Object) strComparableCheckBuilder29, (java.lang.Object) boolean55);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator58 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator10, objectToStringComparatorBinaryOperator57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNotNull(objectToStringComparator10);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertNotNull(objComparator25);
        org.junit.Assert.assertNotNull(objComparator26);
        org.junit.Assert.assertNotNull(objComparator27);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream12 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator18 = objArrayCollector16.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector16.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier20 = objArrayCollector16.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator21 = objArrayCollector16.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier22 = objArrayCollector16.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass25 = strPredicate24.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector26 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass25);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier27 = objArrayCollector26.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction28 = objArrayCollector26.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator29 = objArrayCollector26.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier30 = objArrayCollector26.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer31 = objArrayCollector26.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList33 = objectToStringComparatorFailableStream1.collect(objListSupplier22, objListBiConsumer31, objListBiConsumer32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNull(objectToStringComparatorStream12);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListBinaryOperator18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListSupplier20);
        org.junit.Assert.assertNotNull(objListBinaryOperator21);
        org.junit.Assert.assertNotNull(objListSupplier22);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objListSupplier27);
        org.junit.Assert.assertNotNull(objListFunction28);
        org.junit.Assert.assertNotNull(objListBinaryOperator29);
        org.junit.Assert.assertNotNull(objListSupplier30);
        org.junit.Assert.assertNotNull(objListBiConsumer31);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean16 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListFunction9);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean15 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean27 = strComparableCheckBuilder1.between("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.lang.CharSequence[] charSequenceArray3 = new java.lang.CharSequence[] { "hi!" };
        java.lang.CharSequence[] charSequenceArray5 = new java.lang.CharSequence[] { "hi!" };
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.lang.CharSequence[][] charSequenceArray8 = new java.lang.CharSequence[][] { charSequenceArray1, charSequenceArray3, charSequenceArray5, charSequenceArray7 };
        java.lang.CharSequence[] charSequenceArray10 = new java.lang.CharSequence[] { "hi!" };
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!" };
        java.lang.CharSequence[][] charSequenceArray17 = new java.lang.CharSequence[][] { charSequenceArray10, charSequenceArray12, charSequenceArray14, charSequenceArray16 };
        java.lang.CharSequence[] charSequenceArray19 = new java.lang.CharSequence[] { "hi!" };
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "hi!" };
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "hi!" };
        java.lang.CharSequence[] charSequenceArray25 = new java.lang.CharSequence[] { "hi!" };
        java.lang.CharSequence[][] charSequenceArray26 = new java.lang.CharSequence[][] { charSequenceArray19, charSequenceArray21, charSequenceArray23, charSequenceArray25 };
        java.lang.CharSequence[] charSequenceArray28 = new java.lang.CharSequence[] { "hi!" };
        java.lang.CharSequence[] charSequenceArray30 = new java.lang.CharSequence[] { "hi!" };
        java.lang.CharSequence[] charSequenceArray32 = new java.lang.CharSequence[] { "hi!" };
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "hi!" };
        java.lang.CharSequence[][] charSequenceArray35 = new java.lang.CharSequence[][] { charSequenceArray28, charSequenceArray30, charSequenceArray32, charSequenceArray34 };
        java.lang.CharSequence[][][] charSequenceArray36 = new java.lang.CharSequence[][][] { charSequenceArray8, charSequenceArray17, charSequenceArray26, charSequenceArray35 };
        java.lang.CharSequence[][][][] charSequenceArray37 = new java.lang.CharSequence[][][][] { charSequenceArray36 };
        java.util.stream.Stream<java.lang.CharSequence[][][]> charSequenceArrayStream38 = org.apache.commons.lang3.stream.Streams.of(charSequenceArray37);
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertNotNull(charSequenceArray3);
        org.junit.Assert.assertNotNull(charSequenceArray5);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertNotNull(charSequenceArray10);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertNotNull(charSequenceArray17);
        org.junit.Assert.assertNotNull(charSequenceArray19);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertNotNull(charSequenceArray25);
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertNotNull(charSequenceArray28);
        org.junit.Assert.assertNotNull(charSequenceArray30);
        org.junit.Assert.assertNotNull(charSequenceArray32);
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertNotNull(charSequenceArray35);
        org.junit.Assert.assertNotNull(charSequenceArray36);
        org.junit.Assert.assertNotNull(charSequenceArray37);
        org.junit.Assert.assertNotNull(charSequenceArrayStream38);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed(6);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator11 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator11, objectToStringComparatorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams4 = new org.apache.commons.lang3.stream.Streams();
        int int5 = objectToStringComparator0.compare((java.lang.Object) strPredicate3, (java.lang.Object) streams4);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder7 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int10 = objectToStringComparator0.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate9);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder12 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean14 = strComparableCheckBuilder12.greaterThan("hi!");
        boolean boolean17 = strComparableCheckBuilder12.betweenExclusive("", "");
        boolean boolean19 = strComparableCheckBuilder12.equalTo("hi!");
        boolean boolean21 = strComparableCheckBuilder12.lessThan("");
        boolean boolean23 = strComparableCheckBuilder12.lessThan("");
        boolean boolean25 = strComparableCheckBuilder12.lessThanOrEqualTo("");
        boolean boolean28 = strComparableCheckBuilder12.between("hi!", "hi!");
        boolean boolean31 = strComparableCheckBuilder12.betweenExclusive("hi!", "hi!");
        boolean boolean33 = strComparableCheckBuilder12.lessThanOrEqualTo("hi!");
        boolean boolean35 = strComparableCheckBuilder12.greaterThan("hi!");
        boolean boolean37 = strComparableCheckBuilder12.lessThan("hi!");
        boolean boolean39 = strComparableCheckBuilder12.lessThanOrEqualTo("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator40 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator41 = objectToStringComparator40.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj44 = null;
        int int45 = objectToStringComparator40.compare((java.lang.Object) "hi!", obj44);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator46 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator47 = objectToStringComparator46.reversed();
        java.util.Comparator<java.lang.Object> objComparator48 = objectToStringComparator40.thenComparing(objComparator47);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator49 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator50 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator51 = objectToStringComparator50.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate53 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj54 = null;
        int int55 = objectToStringComparator50.compare((java.lang.Object) "hi!", obj54);
        java.util.Comparator<java.lang.Object> objComparator56 = objectToStringComparator49.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator50);
        int int58 = objectToStringComparator40.compare((java.lang.Object) objectToStringComparator49, (java.lang.Object) 1L);
        int int59 = objectToStringComparator0.compare((java.lang.Object) "", (java.lang.Object) objectToStringComparator49);
        java.lang.Class<?> wildcardClass60 = objectToStringComparator0.getClass();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-16) + "'", int5 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objComparator41);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(objComparator47);
        org.junit.Assert.assertNotNull(objComparator48);
        org.junit.Assert.assertNotNull(objComparator51);
        org.junit.Assert.assertNotNull(strPredicate53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(objComparator56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 62 + "'", int58 == 62);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-66) + "'", int59 == (-66));
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream13 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream14 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsStream13);
        org.junit.Assert.assertNotNull(characteristicsStream14);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean13 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean15 = strComparableCheckBuilder1.equalTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction11 = objArrayCollector3.finisher();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction12 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer13 = objArrayCollector3.accumulator();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
        org.junit.Assert.assertNotNull(objListFunction11);
        org.junit.Assert.assertNotNull(objListFunction12);
        org.junit.Assert.assertNotNull(objListBiConsumer13);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean9 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean11 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        java.lang.Class<java.lang.Iterable<java.util.stream.Collector.Characteristics>[]> characteristicsIterableArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.Iterable<java.util.stream.Collector.Characteristics>[]> characteristicsIterableArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.Iterable<java.util.stream.Collector.Characteristics>[]>(characteristicsIterableArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream60 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream60);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean7 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean9 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean11 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean13 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier5 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListSupplier5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((-7));
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "");
        boolean boolean19 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean21 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean21 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass12 = strPredicate11.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector13 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier14 = objArrayCollector13.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction15 = objArrayCollector13.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator16 = objArrayCollector13.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator17 = objArrayCollector13.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier18 = objArrayCollector13.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = objArrayCollector13.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer20 = objArrayCollector13.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier21 = objArrayCollector13.supplier();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray22 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(objListSupplier14);
        org.junit.Assert.assertNotNull(objListFunction15);
        org.junit.Assert.assertNotNull(objListBinaryOperator16);
        org.junit.Assert.assertNotNull(objListBinaryOperator17);
        org.junit.Assert.assertNotNull(objListSupplier18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(objListBiConsumer20);
        org.junit.Assert.assertNotNull(objListSupplier21);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream6 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams5 = new org.apache.commons.lang3.stream.Streams();
        int int6 = objectToStringComparator1.compare((java.lang.Object) strPredicate4, (java.lang.Object) streams5);
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
        java.util.Comparator<java.lang.Object> objComparator8 = objComparator7.reversed();
        java.lang.Class<?> wildcardClass9 = objComparator8.getClass();
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-16) + "'", int6 == (-16));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        java.lang.Class<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.GenericDeclaration[][][]>(genericDeclarationArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        java.lang.Class<?> wildcardClass4 = strComparableCheckBuilder1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector5 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass4);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj14 = null;
        int int15 = objectToStringComparator10.compare((java.lang.Object) "hi!", obj14);
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator9.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator10);
        int int18 = objectToStringComparator0.compare((java.lang.Object) objectToStringComparator9, (java.lang.Object) 1L);
        java.lang.Class<?> wildcardClass19 = objectToStringComparator9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector20 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass19);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector21 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass19);
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer22 = objArrayCollector21.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier23 = objArrayCollector21.supplier();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 62 + "'", int18 == 62);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(objListBiConsumer22);
        org.junit.Assert.assertNotNull(objListSupplier23);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass4 = strPredicate3.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector5 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass4);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier6 = objArrayCollector5.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector5.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = null;
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList10 = objectToStringComparatorFailableStream1.collect(objListSupplier7, objListBiConsumer8, objListBiConsumer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(objListSupplier6);
        org.junit.Assert.assertNotNull(objListSupplier7);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        java.lang.Class<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.GenericDeclaration[][]>(genericDeclarationArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator9.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams13 = new org.apache.commons.lang3.stream.Streams();
        int int14 = objectToStringComparator9.compare((java.lang.Object) strPredicate12, (java.lang.Object) streams13);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder16 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int19 = objectToStringComparator9.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate18);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams24 = new org.apache.commons.lang3.stream.Streams();
        int int25 = objectToStringComparator20.compare((java.lang.Object) strPredicate23, (java.lang.Object) streams24);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int30 = objectToStringComparator20.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate29);
        java.util.Comparator<java.lang.Object> objComparator31 = objectToStringComparator20.reversed();
        java.util.Comparator<java.lang.Object> objComparator32 = objectToStringComparator9.thenComparing(objComparator31);
        java.util.Comparator<java.lang.Object> objComparator33 = objComparator8.thenComparing(objComparator32);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator34 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator35 = objectToStringComparator34.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate37 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj38 = null;
        int int39 = objectToStringComparator34.compare((java.lang.Object) "hi!", obj38);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator40 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator41 = objectToStringComparator40.reversed();
        java.util.Comparator<java.lang.Object> objComparator42 = objectToStringComparator34.thenComparing(objComparator41);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator43 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator44 = objectToStringComparator43.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate46 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams47 = new org.apache.commons.lang3.stream.Streams();
        int int48 = objectToStringComparator43.compare((java.lang.Object) strPredicate46, (java.lang.Object) streams47);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder50 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate52 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int53 = objectToStringComparator43.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate52);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator54 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator55 = objectToStringComparator54.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams58 = new org.apache.commons.lang3.stream.Streams();
        int int59 = objectToStringComparator54.compare((java.lang.Object) strPredicate57, (java.lang.Object) streams58);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder61 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate63 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int64 = objectToStringComparator54.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate63);
        java.util.Comparator<java.lang.Object> objComparator65 = objectToStringComparator54.reversed();
        java.util.Comparator<java.lang.Object> objComparator66 = objectToStringComparator43.thenComparing(objComparator65);
        java.util.Comparator<java.lang.Object> objComparator67 = objComparator42.thenComparing(objComparator66);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator68 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator69 = objectToStringComparator68.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate71 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams72 = new org.apache.commons.lang3.stream.Streams();
        int int73 = objectToStringComparator68.compare((java.lang.Object) strPredicate71, (java.lang.Object) streams72);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder75 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate77 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int78 = objectToStringComparator68.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate77);
        java.util.Comparator<java.lang.Object> objComparator79 = objectToStringComparator68.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator80 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator81 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator82 = objectToStringComparator81.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate84 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj85 = null;
        int int86 = objectToStringComparator81.compare((java.lang.Object) "hi!", obj85);
        java.util.Comparator<java.lang.Object> objComparator87 = objectToStringComparator80.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator81);
        java.util.Comparator<java.lang.Object> objComparator88 = objectToStringComparator68.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator81);
        java.util.Comparator<java.lang.Object> objComparator89 = objComparator66.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator68);
        java.util.Comparator<java.lang.Object> objComparator90 = objComparator8.thenComparing(objComparator89);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-16) + "'", int14 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder16);
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-7) + "'", int19 == (-7));
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-16) + "'", int25 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-7) + "'", int30 == (-7));
        org.junit.Assert.assertNotNull(objComparator31);
        org.junit.Assert.assertNotNull(objComparator32);
        org.junit.Assert.assertNotNull(objComparator33);
        org.junit.Assert.assertNotNull(objComparator35);
        org.junit.Assert.assertNotNull(strPredicate37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(objComparator41);
        org.junit.Assert.assertNotNull(objComparator42);
        org.junit.Assert.assertNotNull(objComparator44);
        org.junit.Assert.assertNotNull(strPredicate46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-16) + "'", int48 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder50);
        org.junit.Assert.assertNotNull(strPredicate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-7) + "'", int53 == (-7));
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-16) + "'", int59 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder61);
        org.junit.Assert.assertNotNull(strPredicate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-7) + "'", int64 == (-7));
        org.junit.Assert.assertNotNull(objComparator65);
        org.junit.Assert.assertNotNull(objComparator66);
        org.junit.Assert.assertNotNull(objComparator67);
        org.junit.Assert.assertNotNull(objComparator69);
        org.junit.Assert.assertNotNull(strPredicate71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-16) + "'", int73 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder75);
        org.junit.Assert.assertNotNull(strPredicate77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-7) + "'", int78 == (-7));
        org.junit.Assert.assertNotNull(objComparator79);
        org.junit.Assert.assertNotNull(objComparator82);
        org.junit.Assert.assertNotNull(strPredicate84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(objComparator87);
        org.junit.Assert.assertNotNull(objComparator88);
        org.junit.Assert.assertNotNull(objComparator89);
        org.junit.Assert.assertNotNull(objComparator90);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        java.lang.Class<java.lang.CharSequence[][]> charSequenceArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.CharSequence[][]> charSequenceArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.CharSequence[][]>(charSequenceArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj14 = null;
        int int15 = objectToStringComparator10.compare((java.lang.Object) "hi!", obj14);
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator9.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator10);
        int int18 = objectToStringComparator0.compare((java.lang.Object) objectToStringComparator9, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj24 = null;
        int int25 = objectToStringComparator20.compare((java.lang.Object) "hi!", obj24);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean30 = strComparableCheckBuilder27.betweenExclusive("", "");
        boolean boolean32 = strComparableCheckBuilder27.greaterThan("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator33 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator34 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator35 = objectToStringComparator34.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate37 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj38 = null;
        int int39 = objectToStringComparator34.compare((java.lang.Object) "hi!", obj38);
        java.util.Comparator<java.lang.Object> objComparator40 = objectToStringComparator33.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator34);
        int int41 = objectToStringComparator20.compare((java.lang.Object) "", (java.lang.Object) objComparator40);
        java.util.Comparator<java.lang.Object> objComparator42 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator20);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder44 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean46 = strComparableCheckBuilder44.greaterThan("hi!");
        boolean boolean49 = strComparableCheckBuilder44.betweenExclusive("", "");
        boolean boolean51 = strComparableCheckBuilder44.equalTo("hi!");
        boolean boolean53 = strComparableCheckBuilder44.lessThan("");
        boolean boolean55 = strComparableCheckBuilder44.lessThan("");
        boolean boolean57 = strComparableCheckBuilder44.lessThanOrEqualTo("");
        boolean boolean60 = strComparableCheckBuilder44.between("", "hi!");
        boolean boolean63 = strComparableCheckBuilder44.betweenExclusive("hi!", "hi!");
        boolean boolean66 = strComparableCheckBuilder44.betweenExclusive("hi!", "");
        java.lang.Object obj67 = null;
        int int68 = objectToStringComparator0.compare((java.lang.Object) "", obj67);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator69 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator70 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator71 = objectToStringComparator70.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate73 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams74 = new org.apache.commons.lang3.stream.Streams();
        int int75 = objectToStringComparator70.compare((java.lang.Object) strPredicate73, (java.lang.Object) streams74);
        java.util.Comparator<java.lang.Object> objComparator76 = objectToStringComparator69.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator70);
        java.util.Comparator<java.lang.Object> objComparator77 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator69);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 62 + "'", int18 == 62);
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objComparator35);
        org.junit.Assert.assertNotNull(strPredicate37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(objComparator40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-50) + "'", int41 == (-50));
        org.junit.Assert.assertNotNull(objComparator42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(objComparator71);
        org.junit.Assert.assertNotNull(strPredicate73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-16) + "'", int75 == (-16));
        org.junit.Assert.assertNotNull(objComparator76);
        org.junit.Assert.assertNotNull(objComparator77);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder7 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean10 = strComparableCheckBuilder7.betweenExclusive("", "");
        boolean boolean12 = strComparableCheckBuilder7.greaterThan("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator14.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj18 = null;
        int int19 = objectToStringComparator14.compare((java.lang.Object) "hi!", obj18);
        java.util.Comparator<java.lang.Object> objComparator20 = objectToStringComparator13.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator14);
        int int21 = objectToStringComparator0.compare((java.lang.Object) "", (java.lang.Object) objComparator20);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator22 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator22.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder25 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean27 = strComparableCheckBuilder25.greaterThan("hi!");
        boolean boolean30 = strComparableCheckBuilder25.between("hi!", "");
        boolean boolean32 = strComparableCheckBuilder25.lessThanOrEqualTo("hi!");
        int int34 = objectToStringComparator22.compare((java.lang.Object) strComparableCheckBuilder25, (java.lang.Object) 4);
        java.util.Comparator<java.lang.Object> objComparator35 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator22);
        java.util.Comparator<java.lang.Object> objComparator36 = objectToStringComparator22.reversed();
        java.lang.Class<?> wildcardClass37 = objectToStringComparator22.getClass();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(objComparator20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-50) + "'", int21 == (-50));
        org.junit.Assert.assertNotNull(objectToStringComparator22);
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 59 + "'", int34 == 59);
        org.junit.Assert.assertNotNull(objComparator35);
        org.junit.Assert.assertNotNull(objComparator36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector15 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass14);
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction16 = objArrayCollector15.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator17 = objArrayCollector15.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator18 = objArrayCollector15.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier19 = objArrayCollector15.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass22 = strPredicate21.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector23 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass22);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier24 = objArrayCollector23.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction25 = objArrayCollector23.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = objArrayCollector23.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = objArrayCollector23.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer28 = objArrayCollector23.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList30 = objectToStringComparatorFailableStream1.collect(objListSupplier19, objListBiConsumer28, objListBiConsumer29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objListFunction16);
        org.junit.Assert.assertNotNull(objListBinaryOperator17);
        org.junit.Assert.assertNotNull(objListBinaryOperator18);
        org.junit.Assert.assertNotNull(objListSupplier19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(objListSupplier24);
        org.junit.Assert.assertNotNull(objListFunction25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(objListBiConsumer28);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.equalTo("");
        boolean boolean26 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean28 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean30 = strComparableCheckBuilder1.greaterThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer7 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction10 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(objListFunction10);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream12 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator13.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams17 = new org.apache.commons.lang3.stream.Streams();
        int int18 = objectToStringComparator13.compare((java.lang.Object) strPredicate16, (java.lang.Object) streams17);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder20 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int23 = objectToStringComparator13.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate22);
        java.util.Comparator<java.lang.Object> objComparator24 = objectToStringComparator13.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator25 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator26 = objectToStringComparator25.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate28 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj29 = null;
        int int30 = objectToStringComparator25.compare((java.lang.Object) "hi!", obj29);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder32 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean35 = strComparableCheckBuilder32.betweenExclusive("", "");
        boolean boolean37 = strComparableCheckBuilder32.greaterThan("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator38 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator39 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator40 = objectToStringComparator39.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate42 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj43 = null;
        int int44 = objectToStringComparator39.compare((java.lang.Object) "hi!", obj43);
        java.util.Comparator<java.lang.Object> objComparator45 = objectToStringComparator38.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator39);
        int int46 = objectToStringComparator25.compare((java.lang.Object) "", (java.lang.Object) objComparator45);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator47 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator48 = objectToStringComparator47.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder50 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean52 = strComparableCheckBuilder50.greaterThan("hi!");
        boolean boolean55 = strComparableCheckBuilder50.between("hi!", "");
        boolean boolean57 = strComparableCheckBuilder50.lessThanOrEqualTo("hi!");
        int int59 = objectToStringComparator47.compare((java.lang.Object) strComparableCheckBuilder50, (java.lang.Object) 4);
        java.util.Comparator<java.lang.Object> objComparator60 = objectToStringComparator25.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        java.util.Comparator<java.lang.Object> objComparator61 = objectToStringComparator47.reversed();
        java.util.Comparator<java.lang.Object> objComparator62 = objectToStringComparator13.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator64 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator47, objectToStringComparatorBinaryOperator63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNull(objectToStringComparatorStream12);
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-16) + "'", int18 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder20);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-7) + "'", int23 == (-7));
        org.junit.Assert.assertNotNull(objComparator24);
        org.junit.Assert.assertNotNull(objComparator26);
        org.junit.Assert.assertNotNull(strPredicate28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objComparator40);
        org.junit.Assert.assertNotNull(strPredicate42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(objComparator45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-50) + "'", int46 == (-50));
        org.junit.Assert.assertNotNull(objectToStringComparator47);
        org.junit.Assert.assertNotNull(objComparator48);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
        org.junit.Assert.assertNotNull(objComparator60);
        org.junit.Assert.assertNotNull(objComparator61);
        org.junit.Assert.assertNotNull(objComparator62);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream5 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.apache.commons.lang3.event.EventUtils eventUtils0 = new org.apache.commons.lang3.event.EventUtils();
        org.apache.commons.lang3.event.EventUtils eventUtils1 = new org.apache.commons.lang3.event.EventUtils();
        org.apache.commons.lang3.event.EventUtils[] eventUtilsArray2 = new org.apache.commons.lang3.event.EventUtils[] { eventUtils0, eventUtils1 };
        java.util.stream.Stream<org.apache.commons.lang3.event.EventUtils> eventUtilsStream3 = org.apache.commons.lang3.stream.Streams.of(eventUtilsArray2);
        java.util.stream.Stream<org.apache.commons.lang3.event.EventUtils> eventUtilsStream4 = org.apache.commons.lang3.stream.Streams.of(eventUtilsArray2);
        org.junit.Assert.assertNotNull(eventUtilsArray2);
        org.junit.Assert.assertNotNull(eventUtilsStream3);
        org.junit.Assert.assertNotNull(eventUtilsStream4);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams5 = new org.apache.commons.lang3.stream.Streams();
        int int6 = objectToStringComparator1.compare((java.lang.Object) strPredicate4, (java.lang.Object) streams5);
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int11 = objectToStringComparator8.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector15 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass14);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction17 = objArrayCollector15.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer18 = objArrayCollector15.accumulator();
        int int19 = objectToStringComparator0.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer18);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams24 = new org.apache.commons.lang3.stream.Streams();
        int int25 = objectToStringComparator20.compare((java.lang.Object) strPredicate23, (java.lang.Object) streams24);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int30 = objectToStringComparator20.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate29);
        java.util.Comparator<java.lang.Object> objComparator31 = objectToStringComparator20.reversed();
        java.util.Comparator<java.lang.Object> objComparator32 = objectToStringComparator20.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder34 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean36 = strComparableCheckBuilder34.greaterThanOrEqualTo("");
        int int37 = objectToStringComparator0.compare((java.lang.Object) objComparator32, (java.lang.Object) boolean36);
        java.util.function.Predicate<java.lang.String> strPredicate39 = org.apache.commons.lang3.compare.ComparableUtils.gt("");
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass42 = strPredicate41.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector43 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass42);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier44 = objArrayCollector43.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction45 = objArrayCollector43.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer46 = objArrayCollector43.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet47 = objArrayCollector43.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier48 = objArrayCollector43.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator49 = objArrayCollector43.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet50 = objArrayCollector43.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator51 = objArrayCollector43.combiner();
        int int52 = objectToStringComparator0.compare((java.lang.Object) strPredicate39, (java.lang.Object) objArrayCollector43);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet53 = objArrayCollector43.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet53);
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-16) + "'", int6 == (-16));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(objListFunction17);
        org.junit.Assert.assertNotNull(objListBiConsumer18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-62) + "'", int19 == (-62));
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-16) + "'", int25 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-7) + "'", int30 == (-7));
        org.junit.Assert.assertNotNull(objComparator31);
        org.junit.Assert.assertNotNull(objComparator32);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-10) + "'", int37 == (-10));
        org.junit.Assert.assertNotNull(strPredicate39);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(objListSupplier44);
        org.junit.Assert.assertNotNull(objListFunction45);
        org.junit.Assert.assertNotNull(objListBiConsumer46);
        org.junit.Assert.assertNotNull(characteristicsSet47);
        org.junit.Assert.assertNotNull(objListSupplier48);
        org.junit.Assert.assertNotNull(objListBinaryOperator49);
        org.junit.Assert.assertNotNull(characteristicsSet50);
        org.junit.Assert.assertNotNull(objListBinaryOperator51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-16) + "'", int52 == (-16));
        org.junit.Assert.assertNotNull(characteristicsSet53);
        org.junit.Assert.assertNotNull(characteristicsFailableStream54);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((int) (byte) 100);
        java.lang.Class<?> wildcardClass2 = intStream1.getClass();
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean16 = strComparableCheckBuilder1.lessThan("");
        java.lang.Class<?> wildcardClass17 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams7 = new org.apache.commons.lang3.stream.Streams();
        int int8 = objectToStringComparator3.compare((java.lang.Object) strPredicate6, (java.lang.Object) streams7);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder10 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int13 = objectToStringComparator3.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate12);
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator3.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator15 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator16.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj20 = null;
        int int21 = objectToStringComparator16.compare((java.lang.Object) "hi!", obj20);
        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator15.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator3.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
        java.util.Comparator<java.lang.Object> objComparator24 = objComparator2.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
        java.util.Comparator<java.lang.Object> objComparator25 = objComparator24.reversed();
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-16) + "'", int8 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertNotNull(objComparator24);
        org.junit.Assert.assertNotNull(objComparator25);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean26 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean28 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean30 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean32 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction6 = objArrayCollector3.finisher();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator8 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(objListFunction6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListBinaryOperator8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((int) '#');
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector3.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer10 = objArrayCollector3.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction11 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator12 = objArrayCollector3.combiner();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListBiConsumer10);
        org.junit.Assert.assertNotNull(objListFunction11);
        org.junit.Assert.assertNotNull(objListBinaryOperator12);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean9 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean12 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("");
        boolean boolean16 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream60 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream61 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream60);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream61);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean9 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("");
        boolean boolean19 = strComparableCheckBuilder1.between("hi!", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed(20);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.lang.Class<?> wildcardClass11 = characteristicsSet6.getClass();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream6 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.lang.Class<?> wildcardClass10 = characteristicsStream9.getClass();
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator8 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        java.lang.CharSequence[][] charSequenceArray0 = new java.lang.CharSequence[][] {};
        java.lang.CharSequence[][] charSequenceArray1 = new java.lang.CharSequence[][] {};
        java.lang.CharSequence[][][] charSequenceArray2 = new java.lang.CharSequence[][][] { charSequenceArray0, charSequenceArray1 };
        java.util.stream.Stream<java.lang.CharSequence[][]> charSequenceArrayStream3 = org.apache.commons.lang3.stream.Streams.of(charSequenceArray2);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.CharSequence[][]> charSequenceArrayFailableStream4 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.CharSequence[][]>(charSequenceArrayStream3);
        org.junit.Assert.assertNotNull(charSequenceArray0);
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertNotNull(charSequenceArrayStream3);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean7 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean9 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean13 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean15 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams7 = new org.apache.commons.lang3.stream.Streams();
        int int8 = objectToStringComparator3.compare((java.lang.Object) strPredicate6, (java.lang.Object) streams7);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder10 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int13 = objectToStringComparator3.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate12);
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator3.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator15 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator16.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj20 = null;
        int int21 = objectToStringComparator16.compare((java.lang.Object) "hi!", obj20);
        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator15.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator3.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
        java.util.Comparator<java.lang.Object> objComparator24 = objComparator2.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
        java.util.Comparator<java.lang.Object> objComparator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<java.lang.Object> objComparator26 = objComparator24.thenComparing(objComparator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-16) + "'", int8 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertNotNull(objComparator24);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream14 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
        org.junit.Assert.assertNotNull(characteristicsStream14);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        java.lang.Class<org.apache.commons.lang3.stream.Streams> streamsClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.stream.Streams> streamsEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.stream.Streams>(streamsClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range((int) '#');
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        java.lang.Class<java.lang.String[]> strArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.String[]> strArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.String[]>(strArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams5 = new org.apache.commons.lang3.stream.Streams();
        int int6 = objectToStringComparator1.compare((java.lang.Object) strPredicate4, (java.lang.Object) streams5);
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator8.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams12 = new org.apache.commons.lang3.stream.Streams();
        int int13 = objectToStringComparator8.compare((java.lang.Object) strPredicate11, (java.lang.Object) streams12);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder15 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int18 = objectToStringComparator8.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate17);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder20 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean22 = strComparableCheckBuilder20.greaterThan("hi!");
        boolean boolean25 = strComparableCheckBuilder20.betweenExclusive("", "");
        boolean boolean27 = strComparableCheckBuilder20.equalTo("hi!");
        boolean boolean29 = strComparableCheckBuilder20.lessThan("");
        boolean boolean31 = strComparableCheckBuilder20.lessThan("");
        boolean boolean33 = strComparableCheckBuilder20.lessThanOrEqualTo("");
        boolean boolean36 = strComparableCheckBuilder20.between("hi!", "hi!");
        boolean boolean39 = strComparableCheckBuilder20.betweenExclusive("hi!", "hi!");
        boolean boolean41 = strComparableCheckBuilder20.lessThanOrEqualTo("hi!");
        boolean boolean43 = strComparableCheckBuilder20.greaterThan("hi!");
        boolean boolean45 = strComparableCheckBuilder20.lessThan("hi!");
        boolean boolean47 = strComparableCheckBuilder20.lessThanOrEqualTo("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator48 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator49 = objectToStringComparator48.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate51 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj52 = null;
        int int53 = objectToStringComparator48.compare((java.lang.Object) "hi!", obj52);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator54 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator55 = objectToStringComparator54.reversed();
        java.util.Comparator<java.lang.Object> objComparator56 = objectToStringComparator48.thenComparing(objComparator55);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator57 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator58 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator59 = objectToStringComparator58.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate61 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj62 = null;
        int int63 = objectToStringComparator58.compare((java.lang.Object) "hi!", obj62);
        java.util.Comparator<java.lang.Object> objComparator64 = objectToStringComparator57.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator58);
        int int66 = objectToStringComparator48.compare((java.lang.Object) objectToStringComparator57, (java.lang.Object) 1L);
        int int67 = objectToStringComparator8.compare((java.lang.Object) "", (java.lang.Object) objectToStringComparator57);
        java.util.Comparator<java.lang.Object> objComparator68 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator8);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator69 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator70 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator71 = objectToStringComparator70.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate73 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj74 = null;
        int int75 = objectToStringComparator70.compare((java.lang.Object) "hi!", obj74);
        java.util.Comparator<java.lang.Object> objComparator76 = objectToStringComparator69.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator70);
        java.util.Comparator<java.lang.Object> objComparator77 = objComparator68.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator70);
        java.util.Comparator<java.lang.Object> objComparator78 = objComparator68.reversed();
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-16) + "'", int6 == (-16));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-16) + "'", int13 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-7) + "'", int18 == (-7));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objComparator49);
        org.junit.Assert.assertNotNull(strPredicate51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(objComparator56);
        org.junit.Assert.assertNotNull(objComparator59);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(objComparator64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 62 + "'", int66 == 62);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-66) + "'", int67 == (-66));
        org.junit.Assert.assertNotNull(objComparator68);
        org.junit.Assert.assertNotNull(objComparator71);
        org.junit.Assert.assertNotNull(strPredicate73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(objComparator76);
        org.junit.Assert.assertNotNull(objComparator77);
        org.junit.Assert.assertNotNull(objComparator78);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        java.util.Comparator<java.lang.Object> objComparator9 = objComparator7.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams14 = new org.apache.commons.lang3.stream.Streams();
        int int15 = objectToStringComparator10.compare((java.lang.Object) strPredicate13, (java.lang.Object) streams14);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder17 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int20 = objectToStringComparator10.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate19);
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator10.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator22 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator22.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate25 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj26 = null;
        int int27 = objectToStringComparator22.compare((java.lang.Object) "hi!", obj26);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder29 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder29.betweenExclusive("", "");
        boolean boolean34 = strComparableCheckBuilder29.greaterThan("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator35 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator36 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator37 = objectToStringComparator36.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate39 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj40 = null;
        int int41 = objectToStringComparator36.compare((java.lang.Object) "hi!", obj40);
        java.util.Comparator<java.lang.Object> objComparator42 = objectToStringComparator35.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator36);
        int int43 = objectToStringComparator22.compare((java.lang.Object) "", (java.lang.Object) objComparator42);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator44 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator45 = objectToStringComparator44.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder47 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean49 = strComparableCheckBuilder47.greaterThan("hi!");
        boolean boolean52 = strComparableCheckBuilder47.between("hi!", "");
        boolean boolean54 = strComparableCheckBuilder47.lessThanOrEqualTo("hi!");
        int int56 = objectToStringComparator44.compare((java.lang.Object) strComparableCheckBuilder47, (java.lang.Object) 4);
        java.util.Comparator<java.lang.Object> objComparator57 = objectToStringComparator22.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator44);
        java.util.Comparator<java.lang.Object> objComparator58 = objectToStringComparator44.reversed();
        java.util.Comparator<java.lang.Object> objComparator59 = objectToStringComparator10.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator44);
        java.util.Comparator<java.lang.Object> objComparator60 = objComparator9.thenComparing(objComparator59);
        java.util.Comparator<java.lang.Object> objComparator61 = objComparator60.reversed();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-16) + "'", int15 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder17);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-7) + "'", int20 == (-7));
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objComparator37);
        org.junit.Assert.assertNotNull(strPredicate39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(objComparator42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-50) + "'", int43 == (-50));
        org.junit.Assert.assertNotNull(objectToStringComparator44);
        org.junit.Assert.assertNotNull(objComparator45);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 59 + "'", int56 == 59);
        org.junit.Assert.assertNotNull(objComparator57);
        org.junit.Assert.assertNotNull(objComparator58);
        org.junit.Assert.assertNotNull(objComparator59);
        org.junit.Assert.assertNotNull(objComparator60);
        org.junit.Assert.assertNotNull(objComparator61);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = null;
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector15 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass14);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction17 = objArrayCollector15.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = objArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector15.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator20 = objArrayCollector15.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier21 = objArrayCollector15.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer22 = objArrayCollector15.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList24 = objectToStringComparatorFailableStream1.collect(objListSupplier11, objListBiConsumer22, objListBiConsumer23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(objListFunction17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListBinaryOperator20);
        org.junit.Assert.assertNotNull(objListSupplier21);
        org.junit.Assert.assertNotNull(objListBiConsumer22);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction6 = objArrayCollector3.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector3.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(objListFunction6);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        java.lang.Class<java.util.List<java.util.stream.Collector.Characteristics>[]> characteristicsListArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.List<java.util.stream.Collector.Characteristics>[]> characteristicsListArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.List<java.util.stream.Collector.Characteristics>[]>(characteristicsListArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream14 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
        org.junit.Assert.assertNotNull(characteristicsStream14);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        java.lang.Class<java.lang.CharSequence[][]> charSequenceArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.CharSequence[][]> charSequenceArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.CharSequence[][]>(charSequenceArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams7 = new org.apache.commons.lang3.stream.Streams();
        int int8 = objectToStringComparator3.compare((java.lang.Object) strPredicate6, (java.lang.Object) streams7);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder10 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int13 = objectToStringComparator3.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate12);
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator3.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator15 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator16.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj20 = null;
        int int21 = objectToStringComparator16.compare((java.lang.Object) "hi!", obj20);
        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator15.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator3.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
        java.util.Comparator<java.lang.Object> objComparator24 = objComparator2.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator16.reversed();
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-16) + "'", int8 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertNotNull(objComparator24);
        org.junit.Assert.assertNotNull(objComparator25);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator9.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams13 = new org.apache.commons.lang3.stream.Streams();
        int int14 = objectToStringComparator9.compare((java.lang.Object) strPredicate12, (java.lang.Object) streams13);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder16 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int19 = objectToStringComparator9.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate18);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams24 = new org.apache.commons.lang3.stream.Streams();
        int int25 = objectToStringComparator20.compare((java.lang.Object) strPredicate23, (java.lang.Object) streams24);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int30 = objectToStringComparator20.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate29);
        java.util.Comparator<java.lang.Object> objComparator31 = objectToStringComparator20.reversed();
        java.util.Comparator<java.lang.Object> objComparator32 = objectToStringComparator9.thenComparing(objComparator31);
        java.util.Comparator<java.lang.Object> objComparator33 = objComparator8.thenComparing(objComparator32);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator34 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator35 = objectToStringComparator34.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate37 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams38 = new org.apache.commons.lang3.stream.Streams();
        int int39 = objectToStringComparator34.compare((java.lang.Object) strPredicate37, (java.lang.Object) streams38);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder41 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int44 = objectToStringComparator34.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate43);
        java.util.Comparator<java.lang.Object> objComparator45 = objectToStringComparator34.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator46 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator47 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator48 = objectToStringComparator47.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate50 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj51 = null;
        int int52 = objectToStringComparator47.compare((java.lang.Object) "hi!", obj51);
        java.util.Comparator<java.lang.Object> objComparator53 = objectToStringComparator46.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        java.util.Comparator<java.lang.Object> objComparator54 = objectToStringComparator34.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        java.util.Comparator<java.lang.Object> objComparator55 = objComparator32.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator34);
        java.util.Comparator<java.lang.Object> objComparator56 = objComparator55.reversed();
        java.util.Comparator<java.lang.Object> objComparator57 = objComparator56.reversed();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-16) + "'", int14 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder16);
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-7) + "'", int19 == (-7));
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-16) + "'", int25 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-7) + "'", int30 == (-7));
        org.junit.Assert.assertNotNull(objComparator31);
        org.junit.Assert.assertNotNull(objComparator32);
        org.junit.Assert.assertNotNull(objComparator33);
        org.junit.Assert.assertNotNull(objComparator35);
        org.junit.Assert.assertNotNull(strPredicate37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-16) + "'", int39 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder41);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-7) + "'", int44 == (-7));
        org.junit.Assert.assertNotNull(objComparator45);
        org.junit.Assert.assertNotNull(objComparator48);
        org.junit.Assert.assertNotNull(strPredicate50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(objComparator53);
        org.junit.Assert.assertNotNull(objComparator54);
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(objComparator56);
        org.junit.Assert.assertNotNull(objComparator57);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean5 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean10 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj14 = null;
        int int15 = objectToStringComparator10.compare((java.lang.Object) "hi!", obj14);
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator9.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator10);
        int int18 = objectToStringComparator0.compare((java.lang.Object) objectToStringComparator9, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj24 = null;
        int int25 = objectToStringComparator20.compare((java.lang.Object) "hi!", obj24);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean30 = strComparableCheckBuilder27.betweenExclusive("", "");
        boolean boolean32 = strComparableCheckBuilder27.greaterThan("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator33 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator34 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator35 = objectToStringComparator34.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate37 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj38 = null;
        int int39 = objectToStringComparator34.compare((java.lang.Object) "hi!", obj38);
        java.util.Comparator<java.lang.Object> objComparator40 = objectToStringComparator33.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator34);
        int int41 = objectToStringComparator20.compare((java.lang.Object) "", (java.lang.Object) objComparator40);
        java.util.Comparator<java.lang.Object> objComparator42 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator20);
        java.util.Comparator<java.lang.Object> objComparator43 = objComparator42.reversed();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 62 + "'", int18 == 62);
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objComparator35);
        org.junit.Assert.assertNotNull(strPredicate37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(objComparator40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-50) + "'", int41 == (-50));
        org.junit.Assert.assertNotNull(objComparator42);
        org.junit.Assert.assertNotNull(objComparator43);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.io.Serializable[] serializableArray13 = new java.io.Serializable[] { int12 };
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator14.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder17 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean19 = strComparableCheckBuilder17.greaterThan("hi!");
        boolean boolean22 = strComparableCheckBuilder17.between("hi!", "");
        boolean boolean24 = strComparableCheckBuilder17.lessThanOrEqualTo("hi!");
        int int26 = objectToStringComparator14.compare((java.lang.Object) strComparableCheckBuilder17, (java.lang.Object) 4);
        java.io.Serializable[] serializableArray27 = new java.io.Serializable[] { int26 };
        java.io.Serializable[][] serializableArray28 = new java.io.Serializable[][] { serializableArray13, serializableArray27 };
        java.util.stream.Stream<java.io.Serializable[]> serializableArrayStream29 = org.apache.commons.lang3.stream.Streams.of(serializableArray28);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.io.Serializable[]> serializableArrayFailableStream30 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.io.Serializable[]>(serializableArrayStream29);
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(serializableArray13);
        org.junit.Assert.assertNotNull(objectToStringComparator14);
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(serializableArray27);
        org.junit.Assert.assertNotNull(serializableArray28);
        org.junit.Assert.assertNotNull(serializableArrayStream29);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector8 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass7);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector8.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction10 = objArrayCollector8.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = objArrayCollector8.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator12 = objArrayCollector8.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer13 = objArrayCollector8.accumulator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray14 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListFunction10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(objListBinaryOperator12);
        org.junit.Assert.assertNotNull(objListBiConsumer13);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean9 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean12 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator14.reversed();
        java.util.Comparator<java.lang.Object> objComparator16 = objComparator15.reversed();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator0.thenComparing(objComparator16);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("");
        boolean boolean28 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean30 = strComparableCheckBuilder19.lessThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder32 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean34 = strComparableCheckBuilder32.greaterThan("hi!");
        boolean boolean37 = strComparableCheckBuilder32.betweenExclusive("", "");
        boolean boolean39 = strComparableCheckBuilder32.equalTo("hi!");
        boolean boolean41 = strComparableCheckBuilder32.lessThan("");
        boolean boolean43 = strComparableCheckBuilder32.lessThan("hi!");
        boolean boolean45 = strComparableCheckBuilder32.greaterThan("hi!");
        int int46 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder19, (java.lang.Object) boolean45);
        java.lang.Class<?> wildcardClass47 = objectToStringComparator0.getClass();
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int11 = objectToStringComparator8.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator8, objectToStringComparatorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams7 = new org.apache.commons.lang3.stream.Streams();
        int int8 = objectToStringComparator3.compare((java.lang.Object) strPredicate6, (java.lang.Object) streams7);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder10 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int13 = objectToStringComparator3.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate12);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder15 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean17 = strComparableCheckBuilder15.greaterThan("hi!");
        boolean boolean20 = strComparableCheckBuilder15.betweenExclusive("", "");
        boolean boolean22 = strComparableCheckBuilder15.equalTo("hi!");
        boolean boolean24 = strComparableCheckBuilder15.lessThan("");
        boolean boolean26 = strComparableCheckBuilder15.lessThan("");
        boolean boolean28 = strComparableCheckBuilder15.lessThanOrEqualTo("");
        boolean boolean31 = strComparableCheckBuilder15.between("hi!", "hi!");
        boolean boolean34 = strComparableCheckBuilder15.betweenExclusive("hi!", "hi!");
        boolean boolean36 = strComparableCheckBuilder15.lessThanOrEqualTo("hi!");
        boolean boolean38 = strComparableCheckBuilder15.greaterThan("hi!");
        boolean boolean40 = strComparableCheckBuilder15.lessThan("hi!");
        boolean boolean42 = strComparableCheckBuilder15.lessThanOrEqualTo("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator43 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator44 = objectToStringComparator43.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate46 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj47 = null;
        int int48 = objectToStringComparator43.compare((java.lang.Object) "hi!", obj47);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator49 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator50 = objectToStringComparator49.reversed();
        java.util.Comparator<java.lang.Object> objComparator51 = objectToStringComparator43.thenComparing(objComparator50);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator52 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator53 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator54 = objectToStringComparator53.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj57 = null;
        int int58 = objectToStringComparator53.compare((java.lang.Object) "hi!", obj57);
        java.util.Comparator<java.lang.Object> objComparator59 = objectToStringComparator52.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator53);
        int int61 = objectToStringComparator43.compare((java.lang.Object) objectToStringComparator52, (java.lang.Object) 1L);
        int int62 = objectToStringComparator3.compare((java.lang.Object) "", (java.lang.Object) objectToStringComparator52);
        java.lang.Class<?> wildcardClass63 = objectToStringComparator52.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector64 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass63);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector65 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray66 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-16) + "'", int8 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objComparator44);
        org.junit.Assert.assertNotNull(strPredicate46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(objComparator50);
        org.junit.Assert.assertNotNull(objComparator51);
        org.junit.Assert.assertNotNull(objComparator54);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(objComparator59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 62 + "'", int61 == 62);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj10 = null;
        int int11 = objectToStringComparator6.compare((java.lang.Object) "hi!", obj10);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator12.reversed();
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator6.thenComparing(objComparator13);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder16 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean18 = strComparableCheckBuilder16.greaterThan("hi!");
        boolean boolean20 = strComparableCheckBuilder16.greaterThanOrEqualTo("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.between("", "");
        int int24 = objectToStringComparator6.compare((java.lang.Object) boolean20, (java.lang.Object) strPredicate23);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator26 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator6, objectToStringComparatorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("");
        boolean boolean18 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean20 = strComparableCheckBuilder1.lessThan("");
        boolean boolean22 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean25 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean27 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListFunction9);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams5 = new org.apache.commons.lang3.stream.Streams();
        int int6 = objectToStringComparator1.compare((java.lang.Object) strPredicate4, (java.lang.Object) streams5);
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int11 = objectToStringComparator8.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector15 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass14);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction17 = objArrayCollector15.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer18 = objArrayCollector15.accumulator();
        int int19 = objectToStringComparator0.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer18);
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass22 = strPredicate21.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector23 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass22);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier24 = objArrayCollector23.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier25 = objArrayCollector23.supplier();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean29 = strComparableCheckBuilder27.greaterThan("hi!");
        boolean boolean32 = strComparableCheckBuilder27.betweenExclusive("", "");
        boolean boolean34 = strComparableCheckBuilder27.equalTo("hi!");
        boolean boolean36 = strComparableCheckBuilder27.lessThan("");
        boolean boolean38 = strComparableCheckBuilder27.lessThan("");
        boolean boolean40 = strComparableCheckBuilder27.lessThanOrEqualTo("");
        boolean boolean43 = strComparableCheckBuilder27.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder45 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean47 = strComparableCheckBuilder45.greaterThan("hi!");
        boolean boolean50 = strComparableCheckBuilder45.betweenExclusive("", "");
        boolean boolean52 = strComparableCheckBuilder45.equalTo("hi!");
        boolean boolean54 = strComparableCheckBuilder45.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder56 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean58 = strComparableCheckBuilder56.greaterThan("hi!");
        boolean boolean61 = strComparableCheckBuilder56.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder63 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean65 = strComparableCheckBuilder63.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray67 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray68 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray67;
        strComparableCheckBuilderArray68[0] = strComparableCheckBuilder27;
        strComparableCheckBuilderArray68[1] = strComparableCheckBuilder45;
        strComparableCheckBuilderArray68[2] = strComparableCheckBuilder56;
        strComparableCheckBuilderArray68[3] = strComparableCheckBuilder63;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream77 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray68);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream78 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream77);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream79 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream77);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream80 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream77);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream81 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream77);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream82 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream77);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream83 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream77);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream84 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream77);
        int int85 = objectToStringComparator0.compare((java.lang.Object) objListSupplier25, (java.lang.Object) strComparableCheckBuilderStream77);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream86 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream77);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream87 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream77);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream88 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream77);
        java.lang.Class<?> wildcardClass89 = strComparableCheckBuilderStream77.getClass();
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-16) + "'", int6 == (-16));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(objListFunction17);
        org.junit.Assert.assertNotNull(objListBiConsumer18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-62) + "'", int19 == (-62));
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(objListSupplier24);
        org.junit.Assert.assertNotNull(objListSupplier25);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray67);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray68);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream77);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream78);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream79);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream80);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream81);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream82);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream83);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 5 + "'", int85 == 5);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream86);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream87);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.lang.Iterable[] iterableArray1 = new java.lang.Iterable[0];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<java.util.stream.Collector.Characteristics>[] characteristicsIterableArray2 = (java.lang.Iterable<java.util.stream.Collector.Characteristics>[]) iterableArray1;
        java.lang.Iterable[] iterableArray4 = new java.lang.Iterable[0];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<java.util.stream.Collector.Characteristics>[] characteristicsIterableArray5 = (java.lang.Iterable<java.util.stream.Collector.Characteristics>[]) iterableArray4;
        java.lang.Iterable[] iterableArray7 = new java.lang.Iterable[0];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<java.util.stream.Collector.Characteristics>[] characteristicsIterableArray8 = (java.lang.Iterable<java.util.stream.Collector.Characteristics>[]) iterableArray7;
        java.lang.Iterable[] iterableArray10 = new java.lang.Iterable[0];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<java.util.stream.Collector.Characteristics>[] characteristicsIterableArray11 = (java.lang.Iterable<java.util.stream.Collector.Characteristics>[]) iterableArray10;
        java.lang.Iterable[] iterableArray13 = new java.lang.Iterable[0];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<java.util.stream.Collector.Characteristics>[] characteristicsIterableArray14 = (java.lang.Iterable<java.util.stream.Collector.Characteristics>[]) iterableArray13;
        java.lang.Iterable[][] iterableArray16 = new java.lang.Iterable[5][];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<java.util.stream.Collector.Characteristics>[][] characteristicsIterableArray17 = (java.lang.Iterable<java.util.stream.Collector.Characteristics>[][]) iterableArray16;
        characteristicsIterableArray17[0] = characteristicsIterableArray2;
        characteristicsIterableArray17[1] = characteristicsIterableArray5;
        characteristicsIterableArray17[2] = iterableArray7;
        characteristicsIterableArray17[3] = characteristicsIterableArray11;
        characteristicsIterableArray17[4] = iterableArray13;
        java.util.stream.Stream<java.lang.Iterable<java.util.stream.Collector.Characteristics>[]> characteristicsIterableArrayStream28 = org.apache.commons.lang3.stream.Streams.of(characteristicsIterableArray17);
        java.util.stream.Stream<java.lang.Cloneable> cloneableStream29 = org.apache.commons.lang3.stream.Streams.of((java.lang.Cloneable[]) characteristicsIterableArray17);
        java.lang.Class<?> wildcardClass30 = characteristicsIterableArray17.getClass();
        org.junit.Assert.assertNotNull(iterableArray1);
        org.junit.Assert.assertNotNull(characteristicsIterableArray2);
        org.junit.Assert.assertNotNull(iterableArray4);
        org.junit.Assert.assertNotNull(characteristicsIterableArray5);
        org.junit.Assert.assertNotNull(iterableArray7);
        org.junit.Assert.assertNotNull(characteristicsIterableArray8);
        org.junit.Assert.assertNotNull(iterableArray10);
        org.junit.Assert.assertNotNull(characteristicsIterableArray11);
        org.junit.Assert.assertNotNull(iterableArray13);
        org.junit.Assert.assertNotNull(characteristicsIterableArray14);
        org.junit.Assert.assertNotNull(iterableArray16);
        org.junit.Assert.assertNotNull(characteristicsIterableArray17);
        org.junit.Assert.assertNotNull(characteristicsIterableArrayStream28);
        org.junit.Assert.assertNotNull(cloneableStream29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objComparator7.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams14 = new org.apache.commons.lang3.stream.Streams();
        int int15 = objectToStringComparator10.compare((java.lang.Object) strPredicate13, (java.lang.Object) streams14);
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator9.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator10);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator17 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator18 = objectToStringComparator17.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate20 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams21 = new org.apache.commons.lang3.stream.Streams();
        int int22 = objectToStringComparator17.compare((java.lang.Object) strPredicate20, (java.lang.Object) streams21);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator23 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator24 = objectToStringComparator23.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj27 = null;
        int int28 = objectToStringComparator23.compare((java.lang.Object) "hi!", obj27);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator29 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator30 = objectToStringComparator29.reversed();
        java.util.Comparator<java.lang.Object> objComparator31 = objectToStringComparator23.thenComparing(objComparator30);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator32 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator33 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator34 = objectToStringComparator33.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate36 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj37 = null;
        int int38 = objectToStringComparator33.compare((java.lang.Object) "hi!", obj37);
        java.util.Comparator<java.lang.Object> objComparator39 = objectToStringComparator32.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator33);
        int int41 = objectToStringComparator23.compare((java.lang.Object) objectToStringComparator32, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator42 = objectToStringComparator17.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator32);
        java.util.Comparator<java.lang.Object> objComparator43 = objectToStringComparator10.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator17);
        java.util.Comparator<java.lang.Object> objComparator44 = objComparator7.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator10);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator6);
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-16) + "'", int15 == (-16));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertNotNull(objComparator18);
        org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-16) + "'", int22 == (-16));
        org.junit.Assert.assertNotNull(objComparator24);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(objComparator30);
        org.junit.Assert.assertNotNull(objComparator31);
        org.junit.Assert.assertNotNull(objComparator34);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(objComparator39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 62 + "'", int41 == 62);
        org.junit.Assert.assertNotNull(objComparator42);
        org.junit.Assert.assertNotNull(objComparator43);
        org.junit.Assert.assertNotNull(objComparator44);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj14 = null;
        int int15 = objectToStringComparator10.compare((java.lang.Object) "hi!", obj14);
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator9.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator10);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean22 = strComparableCheckBuilder19.between("", "");
        boolean boolean25 = strComparableCheckBuilder19.betweenExclusive("hi!", "hi!");
        int int26 = objectToStringComparator10.compare((java.lang.Object) 5, (java.lang.Object) boolean25);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder28 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean31 = strComparableCheckBuilder28.betweenExclusive("", "");
        boolean boolean34 = strComparableCheckBuilder28.betweenExclusive("", "");
        boolean boolean36 = strComparableCheckBuilder28.equalTo("hi!");
        boolean boolean38 = strComparableCheckBuilder28.equalTo("hi!");
        java.lang.Object obj39 = null;
        int int40 = objectToStringComparator10.compare((java.lang.Object) boolean38, obj39);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator42 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator10, objectToStringComparatorBinaryOperator41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-49) + "'", int26 == (-49));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean21 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean24 = strComparableCheckBuilder1.between("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector6 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector6.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector6.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector6.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector6.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer11 = objArrayCollector6.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator12 = objArrayCollector6.combiner();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray13 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
        org.junit.Assert.assertNotNull(objListBiConsumer11);
        org.junit.Assert.assertNotNull(objListBinaryOperator12);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj14 = null;
        int int15 = objectToStringComparator10.compare((java.lang.Object) "hi!", obj14);
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator9.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator10);
        int int18 = objectToStringComparator0.compare((java.lang.Object) objectToStringComparator9, (java.lang.Object) 1L);
        java.lang.Class<?> wildcardClass19 = objectToStringComparator9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector20 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass19);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector21 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass19);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector22 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass19);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 62 + "'", int18 == 62);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass4 = strPredicate3.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector5 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass4);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier6 = objArrayCollector5.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector5.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector5.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector5.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector5.supplier();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray11 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(objListSupplier6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(objListFunction8);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListSupplier10);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator5 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator5.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder8 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean10 = strComparableCheckBuilder8.greaterThan("hi!");
        boolean boolean13 = strComparableCheckBuilder8.between("hi!", "");
        boolean boolean15 = strComparableCheckBuilder8.lessThanOrEqualTo("hi!");
        int int17 = objectToStringComparator5.compare((java.lang.Object) strComparableCheckBuilder8, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass20 = strPredicate19.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector21 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass20);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier22 = objArrayCollector21.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator23 = objArrayCollector21.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction24 = objArrayCollector21.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator25 = objArrayCollector21.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean29 = strComparableCheckBuilder27.greaterThan("hi!");
        boolean boolean32 = strComparableCheckBuilder27.betweenExclusive("", "");
        boolean boolean34 = strComparableCheckBuilder27.equalTo("hi!");
        boolean boolean36 = strComparableCheckBuilder27.lessThan("");
        boolean boolean38 = strComparableCheckBuilder27.equalTo("");
        boolean boolean40 = strComparableCheckBuilder27.lessThan("hi!");
        boolean boolean42 = strComparableCheckBuilder27.greaterThan("hi!");
        int int43 = objectToStringComparator5.compare((java.lang.Object) objArrayCollector21, (java.lang.Object) "hi!");
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator44 = objArrayCollector21.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet45 = objArrayCollector21.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier46 = objArrayCollector21.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier47 = objArrayCollector21.supplier();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray48 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(objectToStringComparator5);
        org.junit.Assert.assertNotNull(objComparator6);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(objListSupplier22);
        org.junit.Assert.assertNotNull(objListBinaryOperator23);
        org.junit.Assert.assertNotNull(objListFunction24);
        org.junit.Assert.assertNotNull(objListBinaryOperator25);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertNotNull(objListBinaryOperator44);
        org.junit.Assert.assertNotNull(characteristicsSet45);
        org.junit.Assert.assertNotNull(objListSupplier46);
        org.junit.Assert.assertNotNull(objListSupplier47);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator7 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator7.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj11 = null;
        int int12 = objectToStringComparator7.compare((java.lang.Object) "hi!", obj11);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator13.reversed();
        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator7.thenComparing(objComparator14);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator17 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator18 = objectToStringComparator17.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate20 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj21 = null;
        int int22 = objectToStringComparator17.compare((java.lang.Object) "hi!", obj21);
        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator16.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator17);
        int int25 = objectToStringComparator7.compare((java.lang.Object) objectToStringComparator16, (java.lang.Object) 1L);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator26 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator27 = objectToStringComparator26.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams30 = new org.apache.commons.lang3.stream.Streams();
        int int31 = objectToStringComparator26.compare((java.lang.Object) strPredicate29, (java.lang.Object) streams30);
        java.util.Comparator<java.lang.Object> objComparator32 = objectToStringComparator7.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator26);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator34 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator7, objectToStringComparatorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(objComparator18);
        org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 62 + "'", int25 == 62);
        org.junit.Assert.assertNotNull(objComparator27);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-16) + "'", int31 == (-16));
        org.junit.Assert.assertNotNull(objComparator32);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean21 = strComparableCheckBuilder1.greaterThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean5 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean9 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean21 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.lang.Class<?> wildcardClass5 = characteristicsFailableStream4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector6 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer7 = objArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector6.finisher();
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(objListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(objListFunction9);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector3.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean21 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean23 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean25 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        java.lang.Class<java.lang.reflect.AnnotatedElement> annotatedElementClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.reflect.AnnotatedElement> annotatedElementArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.reflect.AnnotatedElement>(annotatedElementClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean13 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean15 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = objArrayCollector11.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream13 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass16 = strPredicate15.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector17 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass16);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier18 = objArrayCollector17.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector17.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer20 = objArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = objArrayCollector17.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream22 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet21);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass25 = strPredicate24.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector26 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass25);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier27 = objArrayCollector26.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction28 = objArrayCollector26.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = objArrayCollector26.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = objArrayCollector26.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = objArrayCollector26.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream32 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet31);
        java.util.function.Predicate<java.lang.String> strPredicate34 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass35 = strPredicate34.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector36 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass35);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier37 = objArrayCollector36.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction38 = objArrayCollector36.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet39 = objArrayCollector36.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet40 = objArrayCollector36.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream41 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet40);
        java.util.Set[] setArray43 = new java.util.Set[5];
        @SuppressWarnings("unchecked")
        java.util.Set<java.util.stream.Collector.Characteristics>[] characteristicsSetArray44 = (java.util.Set<java.util.stream.Collector.Characteristics>[]) setArray43;
        characteristicsSetArray44[0] = characteristicsSet6;
        characteristicsSetArray44[1] = characteristicsSet12;
        characteristicsSetArray44[2] = characteristicsSet21;
        characteristicsSetArray44[3] = characteristicsSet31;
        characteristicsSetArray44[4] = characteristicsSet40;
        java.util.stream.Stream<java.util.Set<java.util.stream.Collector.Characteristics>> characteristicsSetStream55 = org.apache.commons.lang3.stream.Streams.of(characteristicsSetArray44);
        java.util.stream.Stream<java.lang.Iterable<java.util.stream.Collector.Characteristics>> characteristicsIterableStream56 = org.apache.commons.lang3.stream.Streams.of((java.lang.Iterable<java.util.stream.Collector.Characteristics>[]) characteristicsSetArray44);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsStream13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objListSupplier18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(characteristicsFailableStream22);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objListSupplier27);
        org.junit.Assert.assertNotNull(objListFunction28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(characteristicsStream32);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(objListSupplier37);
        org.junit.Assert.assertNotNull(objListFunction38);
        org.junit.Assert.assertNotNull(characteristicsSet39);
        org.junit.Assert.assertNotNull(characteristicsSet40);
        org.junit.Assert.assertNotNull(characteristicsFailableStream41);
        org.junit.Assert.assertNotNull(setArray43);
        org.junit.Assert.assertNotNull(characteristicsSetArray44);
        org.junit.Assert.assertNotNull(characteristicsSetStream55);
        org.junit.Assert.assertNotNull(characteristicsIterableStream56);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector11.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction13 = objArrayCollector11.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer14 = objArrayCollector11.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer15 = objArrayCollector11.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector11.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass19 = strPredicate18.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector20 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass19);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier21 = objArrayCollector20.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction22 = objArrayCollector20.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer23 = objArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = objArrayCollector20.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer25 = objArrayCollector20.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer26 = objArrayCollector20.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList28 = objectToStringComparatorFailableStream1.collect(objListSupplier16, objListBiConsumer26, objListBiConsumer27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objListFunction13);
        org.junit.Assert.assertNotNull(objListBiConsumer14);
        org.junit.Assert.assertNotNull(objListBiConsumer15);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(objListSupplier21);
        org.junit.Assert.assertNotNull(objListFunction22);
        org.junit.Assert.assertNotNull(objListBiConsumer23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(objListBiConsumer25);
        org.junit.Assert.assertNotNull(objListBiConsumer26);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams7 = new org.apache.commons.lang3.stream.Streams();
        int int8 = objectToStringComparator3.compare((java.lang.Object) strPredicate6, (java.lang.Object) streams7);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder10 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int13 = objectToStringComparator3.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate12);
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator3.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator15 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator16.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj20 = null;
        int int21 = objectToStringComparator16.compare((java.lang.Object) "hi!", obj20);
        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator15.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator3.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
        java.util.Comparator<java.lang.Object> objComparator24 = objComparator2.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder26 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean28 = strComparableCheckBuilder26.greaterThan("hi!");
        boolean boolean31 = strComparableCheckBuilder26.betweenExclusive("", "");
        boolean boolean33 = strComparableCheckBuilder26.equalTo("hi!");
        boolean boolean35 = strComparableCheckBuilder26.lessThan("");
        boolean boolean37 = strComparableCheckBuilder26.lessThan("");
        boolean boolean39 = strComparableCheckBuilder26.lessThanOrEqualTo("");
        boolean boolean42 = strComparableCheckBuilder26.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder44 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean46 = strComparableCheckBuilder44.greaterThan("hi!");
        boolean boolean49 = strComparableCheckBuilder44.betweenExclusive("", "");
        boolean boolean51 = strComparableCheckBuilder44.equalTo("hi!");
        boolean boolean53 = strComparableCheckBuilder44.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder55 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean57 = strComparableCheckBuilder55.greaterThan("hi!");
        boolean boolean60 = strComparableCheckBuilder55.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder62 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean64 = strComparableCheckBuilder62.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray66 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray67 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray66;
        strComparableCheckBuilderArray67[0] = strComparableCheckBuilder26;
        strComparableCheckBuilderArray67[1] = strComparableCheckBuilder44;
        strComparableCheckBuilderArray67[2] = strComparableCheckBuilder55;
        strComparableCheckBuilderArray67[3] = strComparableCheckBuilder62;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream76 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray67);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream77 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream76);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream78 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream76);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream79 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream76);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream80 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream76);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream81 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream76);
        java.lang.Object obj82 = null;
        int int83 = objectToStringComparator16.compare((java.lang.Object) strComparableCheckBuilderFailableStream81, obj82);
        java.util.Comparator<java.lang.Object> objComparator84 = objectToStringComparator16.reversed();
        java.util.Comparator<java.lang.Object> objComparator85 = objComparator84.reversed();
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-16) + "'", int8 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertNotNull(objComparator24);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray66);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray67);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream76);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream77);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream78);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream79);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream80);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(objComparator84);
        org.junit.Assert.assertNotNull(objComparator85);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector3.supplier();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListSupplier9);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.lang.Class<?> wildcardClass11 = characteristicsFailableStream10.getClass();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer10 = objArrayCollector3.accumulator();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(objListBiConsumer10);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector3.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector3.supplier();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListFunction8);
        org.junit.Assert.assertNotNull(objListSupplier9);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean19 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean22 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean24 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean26 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean18 = strComparableCheckBuilder1.greaterThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean22 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean24 = strComparableCheckBuilder1.lessThan("");
        boolean boolean27 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean29 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean31 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector8 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass7);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector8.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction10 = objArrayCollector8.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer11 = objArrayCollector8.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = objArrayCollector8.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer13 = objArrayCollector8.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction14 = objArrayCollector8.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier15 = objArrayCollector8.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer16 = null;
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList18 = objectToStringComparatorFailableStream1.collect(objListSupplier15, objListBiConsumer16, objListBiConsumer17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListFunction10);
        org.junit.Assert.assertNotNull(objListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(objListBiConsumer13);
        org.junit.Assert.assertNotNull(objListFunction14);
        org.junit.Assert.assertNotNull(objListSupplier15);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean6 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder1.lessThan("");
        boolean boolean11 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        java.lang.Class<?> wildcardClass12 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        boolean boolean19 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean18 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean21 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean23 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean26 = strComparableCheckBuilder1.between("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer12 = objArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator13 = objArrayCollector3.combiner();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(objListBiConsumer12);
        org.junit.Assert.assertNotNull(objListBinaryOperator13);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean18 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean20 = strComparableCheckBuilder1.lessThan("");
        boolean boolean22 = strComparableCheckBuilder1.equalTo("");
        boolean boolean24 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream60 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream61 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream62 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream63 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream60);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream61);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream62);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream63);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.equalTo("");
        boolean boolean24 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        boolean boolean9 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean11 = strComparableCheckBuilder1.equalTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams4 = new org.apache.commons.lang3.stream.Streams();
        int int5 = objectToStringComparator0.compare((java.lang.Object) strPredicate3, (java.lang.Object) streams4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj10 = null;
        int int11 = objectToStringComparator6.compare((java.lang.Object) "hi!", obj10);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator12.reversed();
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator6.thenComparing(objComparator13);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator15 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator16.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj20 = null;
        int int21 = objectToStringComparator16.compare((java.lang.Object) "hi!", obj20);
        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator15.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
        int int24 = objectToStringComparator6.compare((java.lang.Object) objectToStringComparator15, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator15);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator26 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator27 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator28 = objectToStringComparator27.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate30 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams31 = new org.apache.commons.lang3.stream.Streams();
        int int32 = objectToStringComparator27.compare((java.lang.Object) strPredicate30, (java.lang.Object) streams31);
        java.util.Comparator<java.lang.Object> objComparator33 = objectToStringComparator26.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator27);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator34 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int37 = objectToStringComparator34.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate39 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass40 = strPredicate39.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector41 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass40);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier42 = objArrayCollector41.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction43 = objArrayCollector41.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer44 = objArrayCollector41.accumulator();
        int int45 = objectToStringComparator26.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer44);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator46 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator47 = objectToStringComparator46.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate49 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams50 = new org.apache.commons.lang3.stream.Streams();
        int int51 = objectToStringComparator46.compare((java.lang.Object) strPredicate49, (java.lang.Object) streams50);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder53 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate55 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int56 = objectToStringComparator46.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate55);
        java.util.Comparator<java.lang.Object> objComparator57 = objectToStringComparator46.reversed();
        java.util.Comparator<java.lang.Object> objComparator58 = objectToStringComparator46.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder60 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean62 = strComparableCheckBuilder60.greaterThanOrEqualTo("");
        int int63 = objectToStringComparator26.compare((java.lang.Object) objComparator58, (java.lang.Object) boolean62);
        java.util.Comparator<java.lang.Object> objComparator64 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator26);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator65 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator66 = objectToStringComparator65.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder68 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean70 = strComparableCheckBuilder68.greaterThan("hi!");
        boolean boolean73 = strComparableCheckBuilder68.between("hi!", "");
        boolean boolean75 = strComparableCheckBuilder68.lessThanOrEqualTo("hi!");
        int int77 = objectToStringComparator65.compare((java.lang.Object) strComparableCheckBuilder68, (java.lang.Object) 4);
        java.util.Comparator<java.lang.Object> objComparator78 = objectToStringComparator26.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator65);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-16) + "'", int5 == (-16));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 62 + "'", int24 == 62);
        org.junit.Assert.assertNotNull(objComparator25);
        org.junit.Assert.assertNotNull(objComparator28);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-16) + "'", int32 == (-16));
        org.junit.Assert.assertNotNull(objComparator33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(strPredicate39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(objListSupplier42);
        org.junit.Assert.assertNotNull(objListFunction43);
        org.junit.Assert.assertNotNull(objListBiConsumer44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-62) + "'", int45 == (-62));
        org.junit.Assert.assertNotNull(objComparator47);
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-16) + "'", int51 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder53);
        org.junit.Assert.assertNotNull(strPredicate55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-7) + "'", int56 == (-7));
        org.junit.Assert.assertNotNull(objComparator57);
        org.junit.Assert.assertNotNull(objComparator58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-10) + "'", int63 == (-10));
        org.junit.Assert.assertNotNull(objComparator64);
        org.junit.Assert.assertNotNull(objectToStringComparator65);
        org.junit.Assert.assertNotNull(objComparator66);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 59 + "'", int77 == 59);
        org.junit.Assert.assertNotNull(objComparator78);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams4 = new org.apache.commons.lang3.stream.Streams();
        int int5 = objectToStringComparator0.compare((java.lang.Object) strPredicate3, (java.lang.Object) streams4);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder7 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int10 = objectToStringComparator0.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate9);
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator12.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams16 = new org.apache.commons.lang3.stream.Streams();
        int int17 = objectToStringComparator12.compare((java.lang.Object) strPredicate15, (java.lang.Object) streams16);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int22 = objectToStringComparator12.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate21);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder24 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean26 = strComparableCheckBuilder24.greaterThan("hi!");
        boolean boolean29 = strComparableCheckBuilder24.betweenExclusive("", "");
        boolean boolean31 = strComparableCheckBuilder24.equalTo("hi!");
        boolean boolean33 = strComparableCheckBuilder24.lessThan("");
        boolean boolean35 = strComparableCheckBuilder24.lessThan("");
        boolean boolean37 = strComparableCheckBuilder24.greaterThanOrEqualTo("");
        boolean boolean39 = strComparableCheckBuilder24.greaterThanOrEqualTo("");
        boolean boolean41 = strComparableCheckBuilder24.lessThanOrEqualTo("");
        boolean boolean44 = strComparableCheckBuilder24.between("hi!", "");
        int int45 = objectToStringComparator0.compare((java.lang.Object) strPredicate21, (java.lang.Object) "hi!");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator46 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator47 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator48 = objectToStringComparator47.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate50 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams51 = new org.apache.commons.lang3.stream.Streams();
        int int52 = objectToStringComparator47.compare((java.lang.Object) strPredicate50, (java.lang.Object) streams51);
        java.util.Comparator<java.lang.Object> objComparator53 = objectToStringComparator46.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator54 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator55 = objectToStringComparator54.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams58 = new org.apache.commons.lang3.stream.Streams();
        int int59 = objectToStringComparator54.compare((java.lang.Object) strPredicate57, (java.lang.Object) streams58);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator60 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator61 = objectToStringComparator60.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate63 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj64 = null;
        int int65 = objectToStringComparator60.compare((java.lang.Object) "hi!", obj64);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator66 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator67 = objectToStringComparator66.reversed();
        java.util.Comparator<java.lang.Object> objComparator68 = objectToStringComparator60.thenComparing(objComparator67);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator69 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator70 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator71 = objectToStringComparator70.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate73 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj74 = null;
        int int75 = objectToStringComparator70.compare((java.lang.Object) "hi!", obj74);
        java.util.Comparator<java.lang.Object> objComparator76 = objectToStringComparator69.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator70);
        int int78 = objectToStringComparator60.compare((java.lang.Object) objectToStringComparator69, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator79 = objectToStringComparator54.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator69);
        java.util.Comparator<java.lang.Object> objComparator80 = objectToStringComparator47.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator54);
        java.util.Comparator<java.lang.Object> objComparator81 = objectToStringComparator47.reversed();
        java.util.Comparator<java.lang.Object> objComparator82 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-16) + "'", int5 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-16) + "'", int17 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-7) + "'", int22 == (-7));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
        org.junit.Assert.assertNotNull(objComparator48);
        org.junit.Assert.assertNotNull(strPredicate50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-16) + "'", int52 == (-16));
        org.junit.Assert.assertNotNull(objComparator53);
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-16) + "'", int59 == (-16));
        org.junit.Assert.assertNotNull(objComparator61);
        org.junit.Assert.assertNotNull(strPredicate63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(objComparator67);
        org.junit.Assert.assertNotNull(objComparator68);
        org.junit.Assert.assertNotNull(objComparator71);
        org.junit.Assert.assertNotNull(strPredicate73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(objComparator76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 62 + "'", int78 == 62);
        org.junit.Assert.assertNotNull(objComparator79);
        org.junit.Assert.assertNotNull(objComparator80);
        org.junit.Assert.assertNotNull(objComparator81);
        org.junit.Assert.assertNotNull(objComparator82);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector3.combiner();
        java.lang.Class<?> wildcardClass11 = objArrayCollector3.getClass();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(objListFunction9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator18 = objArrayCollector16.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator20 = objArrayCollector16.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder22 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean24 = strComparableCheckBuilder22.greaterThan("hi!");
        boolean boolean27 = strComparableCheckBuilder22.betweenExclusive("", "");
        boolean boolean29 = strComparableCheckBuilder22.equalTo("hi!");
        boolean boolean31 = strComparableCheckBuilder22.lessThan("");
        boolean boolean33 = strComparableCheckBuilder22.equalTo("");
        boolean boolean35 = strComparableCheckBuilder22.lessThan("hi!");
        boolean boolean37 = strComparableCheckBuilder22.greaterThan("hi!");
        int int38 = objectToStringComparator0.compare((java.lang.Object) objArrayCollector16, (java.lang.Object) "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder40 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean42 = strComparableCheckBuilder40.greaterThan("hi!");
        boolean boolean45 = strComparableCheckBuilder40.betweenExclusive("", "");
        boolean boolean47 = strComparableCheckBuilder40.equalTo("hi!");
        boolean boolean49 = strComparableCheckBuilder40.lessThan("");
        boolean boolean51 = strComparableCheckBuilder40.greaterThan("");
        boolean boolean53 = strComparableCheckBuilder40.lessThanOrEqualTo("hi!");
        boolean boolean55 = strComparableCheckBuilder40.lessThanOrEqualTo("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator56 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator57 = objectToStringComparator56.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate59 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams60 = new org.apache.commons.lang3.stream.Streams();
        int int61 = objectToStringComparator56.compare((java.lang.Object) strPredicate59, (java.lang.Object) streams60);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator62 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator63 = objectToStringComparator62.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate65 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj66 = null;
        int int67 = objectToStringComparator62.compare((java.lang.Object) "hi!", obj66);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator68 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator69 = objectToStringComparator68.reversed();
        java.util.Comparator<java.lang.Object> objComparator70 = objectToStringComparator62.thenComparing(objComparator69);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator71 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator72 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator73 = objectToStringComparator72.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate75 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj76 = null;
        int int77 = objectToStringComparator72.compare((java.lang.Object) "hi!", obj76);
        java.util.Comparator<java.lang.Object> objComparator78 = objectToStringComparator71.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator72);
        int int80 = objectToStringComparator62.compare((java.lang.Object) objectToStringComparator71, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator81 = objectToStringComparator56.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator71);
        java.util.Comparator<java.lang.Object> objComparator82 = objComparator81.reversed();
        int int83 = objectToStringComparator0.compare((java.lang.Object) boolean55, (java.lang.Object) objComparator82);
        java.lang.Class<?> wildcardClass84 = objectToStringComparator0.getClass();
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListBinaryOperator18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListBinaryOperator20);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 7 + "'", int38 == 7);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objComparator57);
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-16) + "'", int61 == (-16));
        org.junit.Assert.assertNotNull(objComparator63);
        org.junit.Assert.assertNotNull(strPredicate65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(objComparator69);
        org.junit.Assert.assertNotNull(objComparator70);
        org.junit.Assert.assertNotNull(objComparator73);
        org.junit.Assert.assertNotNull(strPredicate75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(objComparator78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 62 + "'", int80 == 62);
        org.junit.Assert.assertNotNull(objComparator81);
        org.junit.Assert.assertNotNull(objComparator82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-4) + "'", int83 == (-4));
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean22 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean24 = strComparableCheckBuilder1.lessThan("");
        boolean boolean27 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean29 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator13.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams17 = new org.apache.commons.lang3.stream.Streams();
        int int18 = objectToStringComparator13.compare((java.lang.Object) strPredicate16, (java.lang.Object) streams17);
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator12.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator13);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int23 = objectToStringComparator20.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate25 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass26 = strPredicate25.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector27 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass26);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier28 = objArrayCollector27.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction29 = objArrayCollector27.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer30 = objArrayCollector27.accumulator();
        int int31 = objectToStringComparator12.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer30);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator32 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator33 = objectToStringComparator32.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate35 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams36 = new org.apache.commons.lang3.stream.Streams();
        int int37 = objectToStringComparator32.compare((java.lang.Object) strPredicate35, (java.lang.Object) streams36);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder39 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int42 = objectToStringComparator32.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate41);
        java.util.Comparator<java.lang.Object> objComparator43 = objectToStringComparator32.reversed();
        java.util.Comparator<java.lang.Object> objComparator44 = objectToStringComparator32.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder46 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean48 = strComparableCheckBuilder46.greaterThanOrEqualTo("");
        int int49 = objectToStringComparator12.compare((java.lang.Object) objComparator44, (java.lang.Object) boolean48);
        java.util.function.Predicate<java.lang.String> strPredicate51 = org.apache.commons.lang3.compare.ComparableUtils.gt("");
        java.util.function.Predicate<java.lang.String> strPredicate53 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass54 = strPredicate53.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector55 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass54);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier56 = objArrayCollector55.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction57 = objArrayCollector55.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer58 = objArrayCollector55.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet59 = objArrayCollector55.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier60 = objArrayCollector55.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator61 = objArrayCollector55.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet62 = objArrayCollector55.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator63 = objArrayCollector55.combiner();
        int int64 = objectToStringComparator12.compare((java.lang.Object) strPredicate51, (java.lang.Object) objArrayCollector55);
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer65 = objArrayCollector55.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier66 = objArrayCollector55.supplier();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray67 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-16) + "'", int18 == (-16));
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(objListSupplier28);
        org.junit.Assert.assertNotNull(objListFunction29);
        org.junit.Assert.assertNotNull(objListBiConsumer30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-62) + "'", int31 == (-62));
        org.junit.Assert.assertNotNull(objComparator33);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-16) + "'", int37 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder39);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-7) + "'", int42 == (-7));
        org.junit.Assert.assertNotNull(objComparator43);
        org.junit.Assert.assertNotNull(objComparator44);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-10) + "'", int49 == (-10));
        org.junit.Assert.assertNotNull(strPredicate51);
        org.junit.Assert.assertNotNull(strPredicate53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(objListSupplier56);
        org.junit.Assert.assertNotNull(objListFunction57);
        org.junit.Assert.assertNotNull(objListBiConsumer58);
        org.junit.Assert.assertNotNull(characteristicsSet59);
        org.junit.Assert.assertNotNull(objListSupplier60);
        org.junit.Assert.assertNotNull(objListBinaryOperator61);
        org.junit.Assert.assertNotNull(characteristicsSet62);
        org.junit.Assert.assertNotNull(objListBinaryOperator63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-16) + "'", int64 == (-16));
        org.junit.Assert.assertNotNull(objListBiConsumer65);
        org.junit.Assert.assertNotNull(objListSupplier66);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector6 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector6.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector6.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer9 = objArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = objArrayCollector6.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer11 = objArrayCollector6.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector6.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer13 = objArrayCollector6.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator14 = objArrayCollector6.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier15 = objArrayCollector6.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass18 = strPredicate17.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector19 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass18);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = objArrayCollector19.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer21 = objArrayCollector19.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList23 = objectToStringComparatorFailableStream1.collect(objListSupplier15, objListBiConsumer21, objListBiConsumer22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objListFunction8);
        org.junit.Assert.assertNotNull(objListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(objListBiConsumer11);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objListBiConsumer13);
        org.junit.Assert.assertNotNull(objListBinaryOperator14);
        org.junit.Assert.assertNotNull(objListSupplier15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(objListBiConsumer21);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream12 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream13 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream14 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass17 = strPredicate16.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector18 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass17);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier19 = objArrayCollector18.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction20 = objArrayCollector18.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer21 = objArrayCollector18.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = objArrayCollector18.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer23 = objArrayCollector18.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier24 = objArrayCollector18.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer25 = objArrayCollector18.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator26 = objArrayCollector18.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier27 = objArrayCollector18.supplier();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator28 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator29 = objectToStringComparator28.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate31 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj32 = null;
        int int33 = objectToStringComparator28.compare((java.lang.Object) "hi!", obj32);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator34 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator35 = objectToStringComparator34.reversed();
        java.util.Comparator<java.lang.Object> objComparator36 = objectToStringComparator28.thenComparing(objComparator35);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator37 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator38 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator39 = objectToStringComparator38.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj42 = null;
        int int43 = objectToStringComparator38.compare((java.lang.Object) "hi!", obj42);
        java.util.Comparator<java.lang.Object> objComparator44 = objectToStringComparator37.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator38);
        int int46 = objectToStringComparator28.compare((java.lang.Object) objectToStringComparator37, (java.lang.Object) 1L);
        java.lang.Class<?> wildcardClass47 = objectToStringComparator37.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector48 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass47);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector49 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass47);
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer50 = objArrayCollector49.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList52 = objectToStringComparatorFailableStream1.collect(objListSupplier27, objListBiConsumer50, objListBiConsumer51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNull(objectToStringComparatorStream12);
        org.junit.Assert.assertNull(objectToStringComparatorStream13);
        org.junit.Assert.assertNull(objectToStringComparatorStream14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objListSupplier19);
        org.junit.Assert.assertNotNull(objListFunction20);
        org.junit.Assert.assertNotNull(objListBiConsumer21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(objListBiConsumer23);
        org.junit.Assert.assertNotNull(objListSupplier24);
        org.junit.Assert.assertNotNull(objListBiConsumer25);
        org.junit.Assert.assertNotNull(objListBinaryOperator26);
        org.junit.Assert.assertNotNull(objListSupplier27);
        org.junit.Assert.assertNotNull(objComparator29);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objComparator35);
        org.junit.Assert.assertNotNull(objComparator36);
        org.junit.Assert.assertNotNull(objComparator39);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(objComparator44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 62 + "'", int46 == 62);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(objListBiConsumer50);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.lang.Class<?> wildcardClass8 = characteristicsFailableStream7.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector9 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass8);
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector9.combiner();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream4 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.equalTo("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream12 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream13 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
        org.junit.Assert.assertNotNull(characteristicsStream12);
        org.junit.Assert.assertNotNull(characteristicsStream13);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator18 = objArrayCollector16.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator20 = objArrayCollector16.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder22 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean24 = strComparableCheckBuilder22.greaterThan("hi!");
        boolean boolean27 = strComparableCheckBuilder22.betweenExclusive("", "");
        boolean boolean29 = strComparableCheckBuilder22.equalTo("hi!");
        boolean boolean31 = strComparableCheckBuilder22.lessThan("");
        boolean boolean33 = strComparableCheckBuilder22.equalTo("");
        boolean boolean35 = strComparableCheckBuilder22.lessThan("hi!");
        boolean boolean37 = strComparableCheckBuilder22.greaterThan("hi!");
        int int38 = objectToStringComparator0.compare((java.lang.Object) objArrayCollector16, (java.lang.Object) "hi!");
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator39 = objArrayCollector16.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet40 = objArrayCollector16.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction41 = objArrayCollector16.finisher();
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListBinaryOperator18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListBinaryOperator20);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 7 + "'", int38 == 7);
        org.junit.Assert.assertNotNull(objListBinaryOperator39);
        org.junit.Assert.assertNotNull(characteristicsSet40);
        org.junit.Assert.assertNotNull(objListFunction41);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean6 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder1.lessThan("");
        java.lang.Class<?> wildcardClass9 = strComparableCheckBuilder1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass9);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.lang.Class<java.lang.String[]> strArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.String[]> strArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.String[]>(strArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        java.lang.Class<java.util.function.BinaryOperator[]> binaryOperatorArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.function.BinaryOperator[]> binaryOperatorArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.function.BinaryOperator[]>(binaryOperatorArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean21 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean24 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean18 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean20 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean23 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        boolean boolean25 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams4 = new org.apache.commons.lang3.stream.Streams();
        int int5 = objectToStringComparator0.compare((java.lang.Object) strPredicate3, (java.lang.Object) streams4);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder7 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int10 = objectToStringComparator0.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate9);
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator12 = objectToStringComparator0.reversed();
        java.util.stream.Collector.Characteristics[] characteristicsArray13 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList14 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList14, characteristicsArray13);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream16 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList14);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream17 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList14);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream18 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList14);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder20 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean22 = strComparableCheckBuilder20.greaterThan("hi!");
        boolean boolean25 = strComparableCheckBuilder20.betweenExclusive("", "");
        boolean boolean27 = strComparableCheckBuilder20.equalTo("hi!");
        boolean boolean29 = strComparableCheckBuilder20.lessThan("");
        boolean boolean31 = strComparableCheckBuilder20.lessThan("hi!");
        boolean boolean33 = strComparableCheckBuilder20.greaterThanOrEqualTo("hi!");
        boolean boolean35 = strComparableCheckBuilder20.greaterThanOrEqualTo("hi!");
        boolean boolean38 = strComparableCheckBuilder20.betweenExclusive("", "");
        int int39 = objectToStringComparator0.compare((java.lang.Object) characteristicsList14, (java.lang.Object) "");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator40 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator41 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator42 = objectToStringComparator41.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate44 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj45 = null;
        int int46 = objectToStringComparator41.compare((java.lang.Object) "hi!", obj45);
        java.util.Comparator<java.lang.Object> objComparator47 = objectToStringComparator40.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator41);
        java.util.function.Predicate<java.lang.String> strPredicate49 = org.apache.commons.lang3.compare.ComparableUtils.gt("");
        java.util.stream.IntStream intStream51 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((int) (byte) 100);
        int int52 = objectToStringComparator40.compare((java.lang.Object) strPredicate49, (java.lang.Object) intStream51);
        java.util.Comparator<java.lang.Object> objComparator53 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator40);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator54 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator55 = objectToStringComparator54.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj58 = null;
        int int59 = objectToStringComparator54.compare((java.lang.Object) "hi!", obj58);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder61 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean64 = strComparableCheckBuilder61.betweenExclusive("", "");
        boolean boolean66 = strComparableCheckBuilder61.greaterThan("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator67 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator68 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator69 = objectToStringComparator68.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate71 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj72 = null;
        int int73 = objectToStringComparator68.compare((java.lang.Object) "hi!", obj72);
        java.util.Comparator<java.lang.Object> objComparator74 = objectToStringComparator67.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator68);
        int int75 = objectToStringComparator54.compare((java.lang.Object) "", (java.lang.Object) objComparator74);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator76 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator77 = objectToStringComparator76.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder79 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean81 = strComparableCheckBuilder79.greaterThan("hi!");
        boolean boolean84 = strComparableCheckBuilder79.between("hi!", "");
        boolean boolean86 = strComparableCheckBuilder79.lessThanOrEqualTo("hi!");
        int int88 = objectToStringComparator76.compare((java.lang.Object) strComparableCheckBuilder79, (java.lang.Object) 4);
        java.util.Comparator<java.lang.Object> objComparator89 = objectToStringComparator54.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator76);
        java.util.Comparator<java.lang.Object> objComparator90 = objComparator53.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator76);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-16) + "'", int5 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(objComparator12);
        org.junit.Assert.assertNotNull(characteristicsArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream16);
        org.junit.Assert.assertNotNull(characteristicsFailableStream17);
        org.junit.Assert.assertNotNull(characteristicsStream18);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(objComparator42);
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(objComparator47);
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertNotNull(intStream51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(objComparator53);
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objComparator69);
        org.junit.Assert.assertNotNull(strPredicate71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(objComparator74);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-50) + "'", int75 == (-50));
        org.junit.Assert.assertNotNull(objectToStringComparator76);
        org.junit.Assert.assertNotNull(objComparator77);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 59 + "'", int88 == 59);
        org.junit.Assert.assertNotNull(objComparator89);
        org.junit.Assert.assertNotNull(objComparator90);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean21 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean24 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean27 = strComparableCheckBuilder1.betweenExclusive("", "");
        java.lang.Class<?> wildcardClass28 = strComparableCheckBuilder1.getClass();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        boolean boolean37 = strComparableCheckBuilder30.equalTo("hi!");
        boolean boolean39 = strComparableCheckBuilder30.lessThan("");
        boolean boolean41 = strComparableCheckBuilder30.lessThan("");
        boolean boolean43 = strComparableCheckBuilder30.greaterThanOrEqualTo("");
        boolean boolean46 = strComparableCheckBuilder30.between("", "");
        boolean boolean48 = strComparableCheckBuilder30.greaterThan("hi!");
        java.lang.Class<?> wildcardClass49 = strComparableCheckBuilder30.getClass();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator50 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator51 = objectToStringComparator50.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate53 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams54 = new org.apache.commons.lang3.stream.Streams();
        int int55 = objectToStringComparator50.compare((java.lang.Object) strPredicate53, (java.lang.Object) streams54);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder57 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate59 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int60 = objectToStringComparator50.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate59);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator61 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator62 = objectToStringComparator61.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate64 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams65 = new org.apache.commons.lang3.stream.Streams();
        int int66 = objectToStringComparator61.compare((java.lang.Object) strPredicate64, (java.lang.Object) streams65);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder68 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate70 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int71 = objectToStringComparator61.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate70);
        java.util.Comparator<java.lang.Object> objComparator72 = objectToStringComparator61.reversed();
        java.util.Comparator<java.lang.Object> objComparator73 = objectToStringComparator50.thenComparing(objComparator72);
        java.lang.Object[] objArray74 = new java.lang.Object[] { strComparableCheckBuilder1, wildcardClass49, objComparator73 };
        java.util.stream.Stream<java.lang.Object> objStream75 = org.apache.commons.lang3.stream.Streams.of(objArray74);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.Object> objFailableStream76 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.Object>(objStream75);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(objComparator51);
        org.junit.Assert.assertNotNull(strPredicate53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-16) + "'", int55 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder57);
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-7) + "'", int60 == (-7));
        org.junit.Assert.assertNotNull(objComparator62);
        org.junit.Assert.assertNotNull(strPredicate64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-16) + "'", int66 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder68);
        org.junit.Assert.assertNotNull(strPredicate70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-7) + "'", int71 == (-7));
        org.junit.Assert.assertNotNull(objComparator72);
        org.junit.Assert.assertNotNull(objComparator73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(objStream75);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean16 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean18 = strComparableCheckBuilder1.lessThan("");
        boolean boolean20 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate7 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass8 = strPredicate7.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector9 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass8);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector9.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction11 = objArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator12 = objArrayCollector9.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator13 = objArrayCollector9.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier14 = objArrayCollector9.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = objArrayCollector9.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer16 = objArrayCollector9.accumulator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray17 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objListSupplier10);
        org.junit.Assert.assertNotNull(objListFunction11);
        org.junit.Assert.assertNotNull(objListBinaryOperator12);
        org.junit.Assert.assertNotNull(objListBinaryOperator13);
        org.junit.Assert.assertNotNull(objListSupplier14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(objListBiConsumer16);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream5 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction6 = objArrayCollector3.finisher();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator8 = objArrayCollector3.combiner();
        org.apache.commons.lang3.stream.Streams.ArrayCollector[] arrayCollectorArray10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector[1];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[] objArrayCollectorArray11 = (org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[]) arrayCollectorArray10;
        objArrayCollectorArray11[0] = objArrayCollector3;
        java.util.stream.Stream<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>> objArrayCollectorStream14 = org.apache.commons.lang3.stream.Streams.of(objArrayCollectorArray11);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(objListFunction6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListBinaryOperator8);
        org.junit.Assert.assertNotNull(arrayCollectorArray10);
        org.junit.Assert.assertNotNull(objArrayCollectorArray11);
        org.junit.Assert.assertNotNull(objArrayCollectorStream14);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        java.util.stream.Stream<java.lang.CharSequence[][][][]> charSequenceArrayStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.CharSequence[][][][]> charSequenceArrayFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.CharSequence[][][][]>(charSequenceArrayStream0);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer10 = objArrayCollector3.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer11 = objArrayCollector3.accumulator();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(objListBiConsumer10);
        org.junit.Assert.assertNotNull(objListBiConsumer11);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer7 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(objListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((-49));
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean9 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean11 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        boolean boolean14 = strComparableCheckBuilder3.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean18 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean20 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean22 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer5 = objArrayCollector3.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(objListBiConsumer5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        java.lang.CharSequence[][] charSequenceArray0 = new java.lang.CharSequence[][] {};
        java.util.stream.Stream<java.lang.CharSequence[]> charSequenceArrayStream1 = org.apache.commons.lang3.stream.Streams.of(charSequenceArray0);
        org.junit.Assert.assertNotNull(charSequenceArray0);
        org.junit.Assert.assertNotNull(charSequenceArrayStream1);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass12 = strPredicate11.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector13 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction14 = objArrayCollector13.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator15 = objArrayCollector13.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator16 = objArrayCollector13.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator17 = objArrayCollector13.combiner();
        java.util.stream.IntStream intStream19 = org.apache.commons.lang3.stream.IntStreams.range(100);
        java.lang.Class<?> wildcardClass20 = intStream19.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector21 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass20);
        int int22 = objectToStringComparator0.compare((java.lang.Object) objListBinaryOperator17, (java.lang.Object) objArrayCollector21);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator6);
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(objListFunction14);
        org.junit.Assert.assertNotNull(objListBinaryOperator15);
        org.junit.Assert.assertNotNull(objListBinaryOperator16);
        org.junit.Assert.assertNotNull(objListBinaryOperator17);
        org.junit.Assert.assertNotNull(intStream19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-28) + "'", int22 == (-28));
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean7 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean9 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean11 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean13 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean15 = strComparableCheckBuilder1.greaterThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj14 = null;
        int int15 = objectToStringComparator10.compare((java.lang.Object) "hi!", obj14);
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator9.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator10);
        int int18 = objectToStringComparator0.compare((java.lang.Object) objectToStringComparator9, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator20 = objComparator19.reversed();
        java.util.Comparator<java.lang.Object> objComparator21 = objComparator19.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator22 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator23 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator24 = objectToStringComparator23.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams27 = new org.apache.commons.lang3.stream.Streams();
        int int28 = objectToStringComparator23.compare((java.lang.Object) strPredicate26, (java.lang.Object) streams27);
        java.util.Comparator<java.lang.Object> objComparator29 = objectToStringComparator22.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator23);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator30 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int33 = objectToStringComparator30.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate35 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass36 = strPredicate35.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector37 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass36);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier38 = objArrayCollector37.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction39 = objArrayCollector37.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer40 = objArrayCollector37.accumulator();
        int int41 = objectToStringComparator22.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer40);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator42 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator43 = objectToStringComparator42.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate45 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams46 = new org.apache.commons.lang3.stream.Streams();
        int int47 = objectToStringComparator42.compare((java.lang.Object) strPredicate45, (java.lang.Object) streams46);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder49 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate51 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int52 = objectToStringComparator42.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate51);
        java.util.Comparator<java.lang.Object> objComparator53 = objectToStringComparator42.reversed();
        java.util.Comparator<java.lang.Object> objComparator54 = objectToStringComparator42.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder56 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean58 = strComparableCheckBuilder56.greaterThanOrEqualTo("");
        int int59 = objectToStringComparator22.compare((java.lang.Object) objComparator54, (java.lang.Object) boolean58);
        java.util.Comparator<java.lang.Object> objComparator60 = objComparator21.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator22);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 62 + "'", int18 == 62);
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(objComparator20);
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(objComparator24);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-16) + "'", int28 == (-16));
        org.junit.Assert.assertNotNull(objComparator29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(objListSupplier38);
        org.junit.Assert.assertNotNull(objListFunction39);
        org.junit.Assert.assertNotNull(objListBiConsumer40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-62) + "'", int41 == (-62));
        org.junit.Assert.assertNotNull(objComparator43);
        org.junit.Assert.assertNotNull(strPredicate45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-16) + "'", int47 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder49);
        org.junit.Assert.assertNotNull(strPredicate51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-7) + "'", int52 == (-7));
        org.junit.Assert.assertNotNull(objComparator53);
        org.junit.Assert.assertNotNull(objComparator54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-10) + "'", int59 == (-10));
        org.junit.Assert.assertNotNull(objComparator60);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream60 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream61 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream60);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream61);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        java.util.stream.Stream<java.util.function.Supplier<java.util.List<java.lang.Object>>> objListSupplierStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.function.Supplier<java.util.List<java.lang.Object>>> objListSupplierFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.util.function.Supplier<java.util.List<java.lang.Object>>>(objListSupplierStream0);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = objArrayCollector3.characteristics();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListFunction8);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream5 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream6 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsStream5);
        org.junit.Assert.assertNotNull(characteristicsStream6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean14 = strComparableCheckBuilder1.equalTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean13 = strComparableCheckBuilder1.between("", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream6 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate7 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass8 = strPredicate7.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray15 = new java.lang.reflect.GenericDeclaration[] { wildcardClass2, wildcardClass5, wildcardClass8, wildcardClass11, wildcardClass14 };
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray16 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray15 };
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayStream17 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray16);
        java.lang.Class<?> wildcardClass18 = genericDeclarationArray16.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector19 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass18);
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction20 = objArrayCollector19.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(genericDeclarationArray15);
        org.junit.Assert.assertNotNull(genericDeclarationArray16);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(objListFunction20);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("");
        boolean boolean18 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean20 = strComparableCheckBuilder1.lessThan("");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean24 = strComparableCheckBuilder1.greaterThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range((int) (short) 1);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer10 = objArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator11 = objArrayCollector3.combiner();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(objListBiConsumer10);
        org.junit.Assert.assertNotNull(objListBinaryOperator11);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator2 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int5 = objectToStringComparator2.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator2.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass9 = strPredicate8.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass9);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction12 = objArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator13 = objArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator14 = objArrayCollector10.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier15 = objArrayCollector10.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass18 = strPredicate17.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector19 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass18);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier20 = objArrayCollector19.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator21 = objArrayCollector19.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = objArrayCollector19.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream23 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet22);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream24 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet22);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream25 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet22);
        int int26 = objectToStringComparator2.compare((java.lang.Object) objListSupplier15, (java.lang.Object) characteristicsStream25);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator28 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator2, objectToStringComparatorBinaryOperator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objComparator6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(objListFunction12);
        org.junit.Assert.assertNotNull(objListBinaryOperator13);
        org.junit.Assert.assertNotNull(objListBinaryOperator14);
        org.junit.Assert.assertNotNull(objListSupplier15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(objListSupplier20);
        org.junit.Assert.assertNotNull(objListBinaryOperator21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(characteristicsFailableStream23);
        org.junit.Assert.assertNotNull(characteristicsFailableStream24);
        org.junit.Assert.assertNotNull(characteristicsStream25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj5 = null;
        int int6 = objectToStringComparator1.compare((java.lang.Object) "hi!", obj5);
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator1.reversed();
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean13 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean16 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.apache.commons.lang3.event.EventUtils eventUtils0 = new org.apache.commons.lang3.event.EventUtils();
        org.apache.commons.lang3.event.EventUtils eventUtils1 = new org.apache.commons.lang3.event.EventUtils();
        org.apache.commons.lang3.event.EventUtils eventUtils2 = new org.apache.commons.lang3.event.EventUtils();
        org.apache.commons.lang3.event.EventUtils eventUtils3 = new org.apache.commons.lang3.event.EventUtils();
        org.apache.commons.lang3.event.EventUtils eventUtils4 = new org.apache.commons.lang3.event.EventUtils();
        org.apache.commons.lang3.event.EventUtils[] eventUtilsArray5 = new org.apache.commons.lang3.event.EventUtils[] { eventUtils0, eventUtils1, eventUtils2, eventUtils3, eventUtils4 };
        java.util.stream.Stream<org.apache.commons.lang3.event.EventUtils> eventUtilsStream6 = org.apache.commons.lang3.stream.Streams.of(eventUtilsArray5);
        org.junit.Assert.assertNotNull(eventUtilsArray5);
        org.junit.Assert.assertNotNull(eventUtilsStream6);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((int) ' ');
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction4 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier6 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListFunction4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(objListSupplier6);
        org.junit.Assert.assertNotNull(objListFunction7);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass9 = strPredicate8.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass9);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction12 = objArrayCollector10.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = objArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction14 = objArrayCollector10.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer15 = objArrayCollector10.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector10.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer17 = null;
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList19 = objectToStringComparatorFailableStream1.collect(objListSupplier16, objListBiConsumer17, objListBiConsumer18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(objListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(objListFunction14);
        org.junit.Assert.assertNotNull(objListBiConsumer15);
        org.junit.Assert.assertNotNull(objListSupplier16);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator0.reversed();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator9);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator8 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = objArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator11 = objArrayCollector3.combiner();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListBinaryOperator8);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(objListBinaryOperator11);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream60 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream60);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean18 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean21 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean24 = strComparableCheckBuilder1.betweenExclusive("", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer9 = objArrayCollector3.accumulator();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListFunction8);
        org.junit.Assert.assertNotNull(objListBiConsumer9);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean13 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean16 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean18 = strComparableCheckBuilder1.greaterThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier5 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListSupplier5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream4 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Collector.Characteristics[] characteristicsArray5 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList6 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList6, characteristicsArray5);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList6);
        java.util.stream.Collector.Characteristics[] characteristicsArray11 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList12 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList12, characteristicsArray11);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream14 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList12);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream15 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList12);
        java.util.ArrayList[] arrayListArray17 = new java.util.ArrayList[3];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.stream.Collector.Characteristics>[] characteristicsListArray18 = (java.util.ArrayList<java.util.stream.Collector.Characteristics>[]) arrayListArray17;
        characteristicsListArray18[0] = characteristicsList1;
        characteristicsListArray18[1] = characteristicsList6;
        characteristicsListArray18[2] = characteristicsList12;
        java.util.stream.Collector.Characteristics[] characteristicsArray25 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList26 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList26, characteristicsArray25);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream28 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList26);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream29 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList26);
        java.util.stream.Collector.Characteristics[] characteristicsArray30 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList31 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList31, characteristicsArray30);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream33 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList31);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream34 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList31);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream35 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList31);
        java.util.stream.Collector.Characteristics[] characteristicsArray36 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList37 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList37, characteristicsArray36);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream39 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList37);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream40 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList37);
        java.util.ArrayList[] arrayListArray42 = new java.util.ArrayList[3];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.stream.Collector.Characteristics>[] characteristicsListArray43 = (java.util.ArrayList<java.util.stream.Collector.Characteristics>[]) arrayListArray42;
        characteristicsListArray43[0] = characteristicsList26;
        characteristicsListArray43[1] = characteristicsList31;
        characteristicsListArray43[2] = characteristicsList37;
        java.util.ArrayList[][] arrayListArray51 = new java.util.ArrayList[2][];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.stream.Collector.Characteristics>[][] characteristicsListArray52 = (java.util.ArrayList<java.util.stream.Collector.Characteristics>[][]) arrayListArray51;
        characteristicsListArray52[0] = characteristicsListArray18;
        characteristicsListArray52[1] = characteristicsListArray43;
        java.util.stream.Stream<java.util.ArrayList<java.util.stream.Collector.Characteristics>[]> characteristicsListArrayStream57 = org.apache.commons.lang3.stream.Streams.of(characteristicsListArray52);
        java.util.stream.Stream<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>[]> characteristicsCollectionArrayStream58 = org.apache.commons.lang3.stream.Streams.of((java.util.AbstractCollection<java.util.stream.Collector.Characteristics>[][]) characteristicsListArray52);
        java.util.stream.Stream<java.util.RandomAccess[]> randomAccessArrayStream59 = org.apache.commons.lang3.stream.Streams.of((java.util.RandomAccess[][]) characteristicsListArray52);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsStream4);
        org.junit.Assert.assertNotNull(characteristicsArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
        org.junit.Assert.assertNotNull(characteristicsArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream14);
        org.junit.Assert.assertNotNull(characteristicsStream15);
        org.junit.Assert.assertNotNull(arrayListArray17);
        org.junit.Assert.assertNotNull(characteristicsListArray18);
        org.junit.Assert.assertNotNull(characteristicsArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream28);
        org.junit.Assert.assertNotNull(characteristicsStream29);
        org.junit.Assert.assertNotNull(characteristicsArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream33);
        org.junit.Assert.assertNotNull(characteristicsFailableStream34);
        org.junit.Assert.assertNotNull(characteristicsStream35);
        org.junit.Assert.assertNotNull(characteristicsArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream39);
        org.junit.Assert.assertNotNull(characteristicsStream40);
        org.junit.Assert.assertNotNull(arrayListArray42);
        org.junit.Assert.assertNotNull(characteristicsListArray43);
        org.junit.Assert.assertNotNull(arrayListArray51);
        org.junit.Assert.assertNotNull(characteristicsListArray52);
        org.junit.Assert.assertNotNull(characteristicsListArrayStream57);
        org.junit.Assert.assertNotNull(characteristicsCollectionArrayStream58);
        org.junit.Assert.assertNotNull(randomAccessArrayStream59);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.lang.Class<?> wildcardClass5 = characteristicsFailableStream4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector6 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector7 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector8 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector8.combiner();
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier5 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector3.combiner();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListSupplier5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream6 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsStream6);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean12 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams7 = new org.apache.commons.lang3.stream.Streams();
        int int8 = objectToStringComparator3.compare((java.lang.Object) strPredicate6, (java.lang.Object) streams7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator9.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj13 = null;
        int int14 = objectToStringComparator9.compare((java.lang.Object) "hi!", obj13);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator15 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator15.reversed();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator9.thenComparing(objComparator16);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator18 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator19 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator20 = objectToStringComparator19.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj23 = null;
        int int24 = objectToStringComparator19.compare((java.lang.Object) "hi!", obj23);
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator18.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator19);
        int int27 = objectToStringComparator9.compare((java.lang.Object) objectToStringComparator18, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator28 = objectToStringComparator3.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator18);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator30 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator3, objectToStringComparatorBinaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-16) + "'", int8 == (-16));
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(objComparator20);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(objComparator25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 62 + "'", int27 == 62);
        org.junit.Assert.assertNotNull(objComparator28);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams5 = new org.apache.commons.lang3.stream.Streams();
        int int6 = objectToStringComparator1.compare((java.lang.Object) strPredicate4, (java.lang.Object) streams5);
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector11.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction13 = objArrayCollector11.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = objArrayCollector11.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = objArrayCollector11.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer16 = objArrayCollector11.accumulator();
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass19 = strPredicate18.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector20 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass19);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier21 = objArrayCollector20.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction22 = objArrayCollector20.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = objArrayCollector20.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream24 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet23);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream25 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet23);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream26 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet23);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream27 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet23);
        int int28 = objectToStringComparator1.compare((java.lang.Object) objArrayCollector11, (java.lang.Object) characteristicsStream27);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier29 = objArrayCollector11.supplier();
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-16) + "'", int6 == (-16));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objListFunction13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(objListBiConsumer16);
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(objListSupplier21);
        org.junit.Assert.assertNotNull(objListFunction22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(characteristicsStream24);
        org.junit.Assert.assertNotNull(characteristicsFailableStream25);
        org.junit.Assert.assertNotNull(characteristicsStream26);
        org.junit.Assert.assertNotNull(characteristicsStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(objListSupplier29);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream5 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream6 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsStream5);
        org.junit.Assert.assertNotNull(characteristicsStream6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer10 = objArrayCollector3.accumulator();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(objListBiConsumer10);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass13 = strPredicate12.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector14 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass13);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier15 = objArrayCollector14.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector14.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction17 = objArrayCollector14.finisher();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction18 = objArrayCollector14.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier19 = objArrayCollector14.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass22 = strPredicate21.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector23 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass22);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier24 = objArrayCollector23.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction25 = objArrayCollector23.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = objArrayCollector23.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = objArrayCollector23.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer28 = objArrayCollector23.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer29 = objArrayCollector23.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList31 = objectToStringComparatorFailableStream1.collect(objListSupplier19, objListBiConsumer29, objListBiConsumer30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objListSupplier15);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(objListFunction17);
        org.junit.Assert.assertNotNull(objListFunction18);
        org.junit.Assert.assertNotNull(objListSupplier19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(objListSupplier24);
        org.junit.Assert.assertNotNull(objListFunction25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(objListBiConsumer28);
        org.junit.Assert.assertNotNull(objListBiConsumer29);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator2 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams7 = new org.apache.commons.lang3.stream.Streams();
        int int8 = objectToStringComparator3.compare((java.lang.Object) strPredicate6, (java.lang.Object) streams7);
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator2.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator3);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int13 = objectToStringComparator10.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass16 = strPredicate15.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector17 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass16);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier18 = objArrayCollector17.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector17.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer20 = objArrayCollector17.accumulator();
        int int21 = objectToStringComparator2.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer20);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator22 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator22.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate25 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams26 = new org.apache.commons.lang3.stream.Streams();
        int int27 = objectToStringComparator22.compare((java.lang.Object) strPredicate25, (java.lang.Object) streams26);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder29 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate31 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int32 = objectToStringComparator22.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate31);
        java.util.Comparator<java.lang.Object> objComparator33 = objectToStringComparator22.reversed();
        java.util.Comparator<java.lang.Object> objComparator34 = objectToStringComparator22.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder36 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean38 = strComparableCheckBuilder36.greaterThanOrEqualTo("");
        int int39 = objectToStringComparator2.compare((java.lang.Object) objComparator34, (java.lang.Object) boolean38);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator40 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator41 = objectToStringComparator40.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams44 = new org.apache.commons.lang3.stream.Streams();
        int int45 = objectToStringComparator40.compare((java.lang.Object) strPredicate43, (java.lang.Object) streams44);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder47 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate49 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int50 = objectToStringComparator40.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate49);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator51 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator52 = objectToStringComparator51.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate54 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams55 = new org.apache.commons.lang3.stream.Streams();
        int int56 = objectToStringComparator51.compare((java.lang.Object) strPredicate54, (java.lang.Object) streams55);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder58 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate60 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int61 = objectToStringComparator51.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate60);
        java.util.Comparator<java.lang.Object> objComparator62 = objectToStringComparator51.reversed();
        java.util.Comparator<java.lang.Object> objComparator63 = objectToStringComparator40.thenComparing(objComparator62);
        java.util.Comparator<java.lang.Object> objComparator64 = objectToStringComparator2.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator40);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator66 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator2, objectToStringComparatorBinaryOperator65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-16) + "'", int8 == (-16));
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objListSupplier18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListBiConsumer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-62) + "'", int21 == (-62));
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-16) + "'", int27 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder29);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-7) + "'", int32 == (-7));
        org.junit.Assert.assertNotNull(objComparator33);
        org.junit.Assert.assertNotNull(objComparator34);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-10) + "'", int39 == (-10));
        org.junit.Assert.assertNotNull(objComparator41);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-16) + "'", int45 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder47);
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-7) + "'", int50 == (-7));
        org.junit.Assert.assertNotNull(objComparator52);
        org.junit.Assert.assertNotNull(strPredicate54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-16) + "'", int56 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder58);
        org.junit.Assert.assertNotNull(strPredicate60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-7) + "'", int61 == (-7));
        org.junit.Assert.assertNotNull(objComparator62);
        org.junit.Assert.assertNotNull(objComparator63);
        org.junit.Assert.assertNotNull(objComparator64);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.lessThan("");
        boolean boolean22 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean24 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean26 = strComparableCheckBuilder1.equalTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator18 = objArrayCollector16.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator20 = objArrayCollector16.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder22 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean24 = strComparableCheckBuilder22.greaterThan("hi!");
        boolean boolean27 = strComparableCheckBuilder22.betweenExclusive("", "");
        boolean boolean29 = strComparableCheckBuilder22.equalTo("hi!");
        boolean boolean31 = strComparableCheckBuilder22.lessThan("");
        boolean boolean33 = strComparableCheckBuilder22.equalTo("");
        boolean boolean35 = strComparableCheckBuilder22.lessThan("hi!");
        boolean boolean37 = strComparableCheckBuilder22.greaterThan("hi!");
        int int38 = objectToStringComparator0.compare((java.lang.Object) objArrayCollector16, (java.lang.Object) "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder40 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean42 = strComparableCheckBuilder40.greaterThan("hi!");
        boolean boolean45 = strComparableCheckBuilder40.betweenExclusive("", "");
        boolean boolean47 = strComparableCheckBuilder40.equalTo("hi!");
        boolean boolean49 = strComparableCheckBuilder40.lessThan("");
        boolean boolean51 = strComparableCheckBuilder40.greaterThan("");
        boolean boolean53 = strComparableCheckBuilder40.lessThanOrEqualTo("hi!");
        boolean boolean55 = strComparableCheckBuilder40.lessThanOrEqualTo("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator56 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator57 = objectToStringComparator56.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate59 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams60 = new org.apache.commons.lang3.stream.Streams();
        int int61 = objectToStringComparator56.compare((java.lang.Object) strPredicate59, (java.lang.Object) streams60);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator62 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator63 = objectToStringComparator62.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate65 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj66 = null;
        int int67 = objectToStringComparator62.compare((java.lang.Object) "hi!", obj66);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator68 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator69 = objectToStringComparator68.reversed();
        java.util.Comparator<java.lang.Object> objComparator70 = objectToStringComparator62.thenComparing(objComparator69);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator71 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator72 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator73 = objectToStringComparator72.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate75 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj76 = null;
        int int77 = objectToStringComparator72.compare((java.lang.Object) "hi!", obj76);
        java.util.Comparator<java.lang.Object> objComparator78 = objectToStringComparator71.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator72);
        int int80 = objectToStringComparator62.compare((java.lang.Object) objectToStringComparator71, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator81 = objectToStringComparator56.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator71);
        java.util.Comparator<java.lang.Object> objComparator82 = objComparator81.reversed();
        int int83 = objectToStringComparator0.compare((java.lang.Object) boolean55, (java.lang.Object) objComparator82);
        java.util.Comparator<java.lang.Object> objComparator84 = objectToStringComparator0.reversed();
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListBinaryOperator18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListBinaryOperator20);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 7 + "'", int38 == 7);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objComparator57);
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-16) + "'", int61 == (-16));
        org.junit.Assert.assertNotNull(objComparator63);
        org.junit.Assert.assertNotNull(strPredicate65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(objComparator69);
        org.junit.Assert.assertNotNull(objComparator70);
        org.junit.Assert.assertNotNull(objComparator73);
        org.junit.Assert.assertNotNull(strPredicate75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(objComparator78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 62 + "'", int80 == 62);
        org.junit.Assert.assertNotNull(objComparator81);
        org.junit.Assert.assertNotNull(objComparator82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-4) + "'", int83 == (-4));
        org.junit.Assert.assertNotNull(objComparator84);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj5 = null;
        int int6 = objectToStringComparator1.compare((java.lang.Object) "hi!", obj5);
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction12 = objArrayCollector11.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator13 = objArrayCollector11.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder15 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean17 = strComparableCheckBuilder15.greaterThan("hi!");
        boolean boolean20 = strComparableCheckBuilder15.betweenExclusive("", "");
        boolean boolean22 = strComparableCheckBuilder15.equalTo("hi!");
        boolean boolean24 = strComparableCheckBuilder15.lessThan("");
        boolean boolean26 = strComparableCheckBuilder15.lessThan("");
        boolean boolean28 = strComparableCheckBuilder15.lessThanOrEqualTo("");
        boolean boolean31 = strComparableCheckBuilder15.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder33 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean35 = strComparableCheckBuilder33.greaterThan("hi!");
        boolean boolean38 = strComparableCheckBuilder33.betweenExclusive("", "");
        boolean boolean40 = strComparableCheckBuilder33.equalTo("hi!");
        boolean boolean42 = strComparableCheckBuilder33.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder44 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean46 = strComparableCheckBuilder44.greaterThan("hi!");
        boolean boolean49 = strComparableCheckBuilder44.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder51 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean53 = strComparableCheckBuilder51.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray55 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray56 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray55;
        strComparableCheckBuilderArray56[0] = strComparableCheckBuilder15;
        strComparableCheckBuilderArray56[1] = strComparableCheckBuilder33;
        strComparableCheckBuilderArray56[2] = strComparableCheckBuilder44;
        strComparableCheckBuilderArray56[3] = strComparableCheckBuilder51;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream65 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray56);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream66 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream65);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream67 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream65);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream68 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream65);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream69 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream65);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream70 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream65);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream71 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream65);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream72 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream65);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream73 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream65);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream74 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream65);
        int int75 = objectToStringComparator0.compare((java.lang.Object) objArrayCollector11, (java.lang.Object) strComparableCheckBuilderStream65);
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objListFunction12);
        org.junit.Assert.assertNotNull(objListBinaryOperator13);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream65);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream66);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream67);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream68);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream69);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream70);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream71);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream72);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream73);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction11 = objArrayCollector3.finisher();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction12 = objArrayCollector3.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier13 = objArrayCollector3.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer14 = objArrayCollector3.accumulator();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
        org.junit.Assert.assertNotNull(objListFunction11);
        org.junit.Assert.assertNotNull(objListFunction12);
        org.junit.Assert.assertNotNull(objListSupplier13);
        org.junit.Assert.assertNotNull(objListBiConsumer14);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean21 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean23 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean26 = strComparableCheckBuilder1.between("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        boolean boolean22 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean25 = strComparableCheckBuilder1.between("", "");
        boolean boolean27 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer7 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean12 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean7 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean10 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        java.lang.Class<?> wildcardClass52 = strComparableCheckBuilderArray42.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector53 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass52);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector54 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass52);
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction55 = objArrayCollector54.finisher();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(objListFunction55);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator8 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction11 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer13 = objArrayCollector3.accumulator();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(objListFunction11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(objListBiConsumer13);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean6 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean10 = strComparableCheckBuilder1.equalTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator8 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector3.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector3.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator12 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator13 = objArrayCollector3.combiner();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListBinaryOperator8);
        org.junit.Assert.assertNotNull(objListFunction9);
        org.junit.Assert.assertNotNull(objListSupplier10);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(objListBinaryOperator12);
        org.junit.Assert.assertNotNull(objListBinaryOperator13);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed(50);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Disabled
    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams7 = new org.apache.commons.lang3.stream.Streams();
        int int8 = objectToStringComparator3.compare((java.lang.Object) strPredicate6, (java.lang.Object) streams7);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder10 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int13 = objectToStringComparator3.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate12);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder15 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean17 = strComparableCheckBuilder15.greaterThan("hi!");
        boolean boolean20 = strComparableCheckBuilder15.betweenExclusive("", "");
        boolean boolean22 = strComparableCheckBuilder15.equalTo("hi!");
        boolean boolean24 = strComparableCheckBuilder15.lessThan("");
        boolean boolean26 = strComparableCheckBuilder15.lessThan("");
        boolean boolean28 = strComparableCheckBuilder15.lessThanOrEqualTo("");
        boolean boolean31 = strComparableCheckBuilder15.between("hi!", "hi!");
        boolean boolean34 = strComparableCheckBuilder15.betweenExclusive("hi!", "hi!");
        boolean boolean36 = strComparableCheckBuilder15.lessThanOrEqualTo("hi!");
        boolean boolean38 = strComparableCheckBuilder15.greaterThan("hi!");
        boolean boolean40 = strComparableCheckBuilder15.lessThan("hi!");
        boolean boolean42 = strComparableCheckBuilder15.lessThanOrEqualTo("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator43 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator44 = objectToStringComparator43.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate46 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj47 = null;
        int int48 = objectToStringComparator43.compare((java.lang.Object) "hi!", obj47);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator49 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator50 = objectToStringComparator49.reversed();
        java.util.Comparator<java.lang.Object> objComparator51 = objectToStringComparator43.thenComparing(objComparator50);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator52 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator53 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator54 = objectToStringComparator53.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj57 = null;
        int int58 = objectToStringComparator53.compare((java.lang.Object) "hi!", obj57);
        java.util.Comparator<java.lang.Object> objComparator59 = objectToStringComparator52.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator53);
        int int61 = objectToStringComparator43.compare((java.lang.Object) objectToStringComparator52, (java.lang.Object) 1L);
        int int62 = objectToStringComparator3.compare((java.lang.Object) "", (java.lang.Object) objectToStringComparator52);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator64 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator3, objectToStringComparatorBinaryOperator63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-16) + "'", int8 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objComparator44);
        org.junit.Assert.assertNotNull(strPredicate46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(objComparator50);
        org.junit.Assert.assertNotNull(objComparator51);
        org.junit.Assert.assertNotNull(objComparator54);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(objComparator59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 62 + "'", int61 == 62);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-66) + "'", int62 == (-66));
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        java.util.stream.Stream<java.lang.String[]> strArrayStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.String[]> strArrayFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.String[]>(strArrayStream0);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector6 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector6.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector6.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction10 = objArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator11 = objArrayCollector6.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector6.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer13 = objArrayCollector6.accumulator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray14 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(objListFunction10);
        org.junit.Assert.assertNotNull(objListBinaryOperator11);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objListBiConsumer13);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean21 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean24 = strComparableCheckBuilder1.betweenExclusive("", "");
        java.lang.Class<?> wildcardClass25 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator8 = objArrayCollector3.combiner();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objListBinaryOperator8);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector15 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass14);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector15.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector15.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = objArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector15.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier20 = objArrayCollector15.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass23 = strPredicate22.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector24 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass23);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier25 = objArrayCollector24.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction26 = objArrayCollector24.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer27 = objArrayCollector24.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = objArrayCollector24.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer29 = objArrayCollector24.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList31 = objectToStringComparatorFailableStream1.collect(objListSupplier20, objListBiConsumer29, objListBiConsumer30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListSupplier20);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(objListSupplier25);
        org.junit.Assert.assertNotNull(objListFunction26);
        org.junit.Assert.assertNotNull(objListBiConsumer27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(objListBiConsumer29);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream52 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.between("", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[][][] {};
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayStream1 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayFailableStream2 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.reflect.GenericDeclaration[][]>(genericDeclarationArrayStream1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayFailableStream3 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.reflect.GenericDeclaration[][]>(genericDeclarationArrayStream1);
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream1);
    }

//    @Test
//    public void test0892() throws Throwable {
//        if (debug)
//            System.out.format("%n%s%n", "RegressionTest1.test0892");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        org.apache.commons.lang3.stream.Streams streams5 = new org.apache.commons.lang3.stream.Streams();
//        int int6 = objectToStringComparator1.compare((java.lang.Object) strPredicate4, (java.lang.Object) streams5);
//        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator8.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        org.apache.commons.lang3.stream.Streams streams12 = new org.apache.commons.lang3.stream.Streams();
//        int int13 = objectToStringComparator8.compare((java.lang.Object) strPredicate11, (java.lang.Object) streams12);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder15 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
//        int int18 = objectToStringComparator8.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate17);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder20 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        boolean boolean22 = strComparableCheckBuilder20.greaterThan("hi!");
//        boolean boolean25 = strComparableCheckBuilder20.betweenExclusive("", "");
//        boolean boolean27 = strComparableCheckBuilder20.equalTo("hi!");
//        boolean boolean29 = strComparableCheckBuilder20.lessThan("");
//        boolean boolean31 = strComparableCheckBuilder20.lessThan("");
//        boolean boolean33 = strComparableCheckBuilder20.lessThanOrEqualTo("");
//        boolean boolean36 = strComparableCheckBuilder20.between("hi!", "hi!");
//        boolean boolean39 = strComparableCheckBuilder20.betweenExclusive("hi!", "hi!");
//        boolean boolean41 = strComparableCheckBuilder20.lessThanOrEqualTo("hi!");
//        boolean boolean43 = strComparableCheckBuilder20.greaterThan("hi!");
//        boolean boolean45 = strComparableCheckBuilder20.lessThan("hi!");
//        boolean boolean47 = strComparableCheckBuilder20.lessThanOrEqualTo("");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator48 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator49 = objectToStringComparator48.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate51 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj52 = null;
//        int int53 = objectToStringComparator48.compare((java.lang.Object) "hi!", obj52);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator54 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator55 = objectToStringComparator54.reversed();
//        java.util.Comparator<java.lang.Object> objComparator56 = objectToStringComparator48.thenComparing(objComparator55);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator57 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator58 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator59 = objectToStringComparator58.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate61 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj62 = null;
//        int int63 = objectToStringComparator58.compare((java.lang.Object) "hi!", obj62);
//        java.util.Comparator<java.lang.Object> objComparator64 = objectToStringComparator57.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator58);
//        int int66 = objectToStringComparator48.compare((java.lang.Object) objectToStringComparator57, (java.lang.Object) 1L);
//        int int67 = objectToStringComparator8.compare((java.lang.Object) "", (java.lang.Object) objectToStringComparator57);
//        java.util.Comparator<java.lang.Object> objComparator68 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator8);
//        java.util.stream.IntStream intStream70 = org.apache.commons.lang3.stream.IntStreams.range(9);
//        java.util.stream.Collector.Characteristics[] characteristicsArray71 = new java.util.stream.Collector.Characteristics[] {};
//        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList72 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
//        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList72, characteristicsArray71);
//        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream74 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList72);
//        int int75 = objectToStringComparator0.compare((java.lang.Object) intStream70, (java.lang.Object) characteristicsFailableStream74);
//        org.junit.Assert.assertNotNull(objComparator2);
//        org.junit.Assert.assertNotNull(strPredicate4);
//        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-16) + "'", int6 == (-16));
//        org.junit.Assert.assertNotNull(objComparator7);
//        org.junit.Assert.assertNotNull(objComparator9);
//        org.junit.Assert.assertNotNull(strPredicate11);
//        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-16) + "'", int13 == (-16));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder15);
//        org.junit.Assert.assertNotNull(strPredicate17);
//        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-7) + "'", int18 == (-7));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder20);
//        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
//        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
//        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
//        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
//        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
//        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
//        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
//        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
//        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
//        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
//        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
//        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
//        org.junit.Assert.assertNotNull(objComparator49);
//        org.junit.Assert.assertNotNull(strPredicate51);
//        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
//        org.junit.Assert.assertNotNull(objComparator55);
//        org.junit.Assert.assertNotNull(objComparator56);
//        org.junit.Assert.assertNotNull(objComparator59);
//        org.junit.Assert.assertNotNull(strPredicate61);
//        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
//        org.junit.Assert.assertNotNull(objComparator64);
//        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 62 + "'", int66 == 62);
//        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-66) + "'", int67 == (-66));
//        org.junit.Assert.assertNotNull(objComparator68);
//        org.junit.Assert.assertNotNull(intStream70);
//        org.junit.Assert.assertNotNull(characteristicsArray71);
//        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
//        org.junit.Assert.assertNotNull(characteristicsFailableStream74);
//        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-5) + "'", int75 == (-5));
//    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean13 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed(9);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream4 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Collector.Characteristics[] characteristicsArray5 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList6 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList6, characteristicsArray5);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList6);
        java.util.stream.Collector.Characteristics[] characteristicsArray11 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList12 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList12, characteristicsArray11);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream14 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList12);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream15 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList12);
        java.util.ArrayList[] arrayListArray17 = new java.util.ArrayList[3];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.stream.Collector.Characteristics>[] characteristicsListArray18 = (java.util.ArrayList<java.util.stream.Collector.Characteristics>[]) arrayListArray17;
        characteristicsListArray18[0] = characteristicsList1;
        characteristicsListArray18[1] = characteristicsList6;
        characteristicsListArray18[2] = characteristicsList12;
        java.util.stream.Collector.Characteristics[] characteristicsArray25 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList26 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList26, characteristicsArray25);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream28 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList26);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream29 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList26);
        java.util.stream.Collector.Characteristics[] characteristicsArray30 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList31 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList31, characteristicsArray30);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream33 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList31);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream34 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList31);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream35 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList31);
        java.util.stream.Collector.Characteristics[] characteristicsArray36 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList37 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList37, characteristicsArray36);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream39 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList37);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream40 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList37);
        java.util.ArrayList[] arrayListArray42 = new java.util.ArrayList[3];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.stream.Collector.Characteristics>[] characteristicsListArray43 = (java.util.ArrayList<java.util.stream.Collector.Characteristics>[]) arrayListArray42;
        characteristicsListArray43[0] = characteristicsList26;
        characteristicsListArray43[1] = characteristicsList31;
        characteristicsListArray43[2] = characteristicsList37;
        java.util.ArrayList[][] arrayListArray51 = new java.util.ArrayList[2][];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.stream.Collector.Characteristics>[][] characteristicsListArray52 = (java.util.ArrayList<java.util.stream.Collector.Characteristics>[][]) arrayListArray51;
        characteristicsListArray52[0] = characteristicsListArray18;
        characteristicsListArray52[1] = characteristicsListArray43;
        java.util.stream.Stream<java.util.ArrayList<java.util.stream.Collector.Characteristics>[]> characteristicsListArrayStream57 = org.apache.commons.lang3.stream.Streams.of(characteristicsListArray52);
        java.util.stream.Stream<java.util.RandomAccess[]> randomAccessArrayStream58 = org.apache.commons.lang3.stream.Streams.of((java.util.RandomAccess[][]) characteristicsListArray52);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsStream4);
        org.junit.Assert.assertNotNull(characteristicsArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
        org.junit.Assert.assertNotNull(characteristicsArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream14);
        org.junit.Assert.assertNotNull(characteristicsStream15);
        org.junit.Assert.assertNotNull(arrayListArray17);
        org.junit.Assert.assertNotNull(characteristicsListArray18);
        org.junit.Assert.assertNotNull(characteristicsArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream28);
        org.junit.Assert.assertNotNull(characteristicsStream29);
        org.junit.Assert.assertNotNull(characteristicsArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream33);
        org.junit.Assert.assertNotNull(characteristicsFailableStream34);
        org.junit.Assert.assertNotNull(characteristicsStream35);
        org.junit.Assert.assertNotNull(characteristicsArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream39);
        org.junit.Assert.assertNotNull(characteristicsStream40);
        org.junit.Assert.assertNotNull(arrayListArray42);
        org.junit.Assert.assertNotNull(characteristicsListArray43);
        org.junit.Assert.assertNotNull(arrayListArray51);
        org.junit.Assert.assertNotNull(characteristicsListArray52);
        org.junit.Assert.assertNotNull(characteristicsListArrayStream57);
        org.junit.Assert.assertNotNull(randomAccessArrayStream58);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream12 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
        org.junit.Assert.assertNotNull(characteristicsStream12);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator2 = objComparator1.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj7 = null;
        int int8 = objectToStringComparator3.compare((java.lang.Object) "hi!", obj7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator9.reversed();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator3.thenComparing(objComparator10);
        java.util.Comparator<java.lang.Object> objComparator12 = objComparator11.reversed();
        java.util.Comparator<java.lang.Object> objComparator13 = objComparator1.thenComparing(objComparator12);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator14.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj18 = null;
        int int19 = objectToStringComparator14.compare((java.lang.Object) "hi!", obj18);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator14.thenComparing(objComparator21);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator23 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator24 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator24.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate27 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj28 = null;
        int int29 = objectToStringComparator24.compare((java.lang.Object) "hi!", obj28);
        java.util.Comparator<java.lang.Object> objComparator30 = objectToStringComparator23.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator24);
        int int32 = objectToStringComparator14.compare((java.lang.Object) objectToStringComparator23, (java.lang.Object) 1L);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator33 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator34 = objectToStringComparator33.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate36 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams37 = new org.apache.commons.lang3.stream.Streams();
        int int38 = objectToStringComparator33.compare((java.lang.Object) strPredicate36, (java.lang.Object) streams37);
        java.util.Comparator<java.lang.Object> objComparator39 = objectToStringComparator14.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator33);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator40 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator41 = objectToStringComparator40.reversed();
        java.util.Comparator<java.lang.Object> objComparator42 = objComparator41.reversed();
        java.util.Comparator<java.lang.Object> objComparator43 = objectToStringComparator33.thenComparing(objComparator42);
        java.util.Comparator<java.lang.Object> objComparator44 = objComparator43.reversed();
        java.util.Comparator<java.lang.Object> objComparator45 = objComparator13.thenComparing(objComparator44);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator46 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator47 = objectToStringComparator46.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate49 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj50 = null;
        int int51 = objectToStringComparator46.compare((java.lang.Object) "hi!", obj50);
        java.util.Comparator<java.lang.Object> objComparator52 = objectToStringComparator46.reversed();
        java.util.Comparator<java.lang.Object> objComparator53 = objectToStringComparator46.reversed();
        java.util.Comparator<java.lang.Object> objComparator54 = objectToStringComparator46.reversed();
        java.util.Comparator<java.lang.Object> objComparator55 = objectToStringComparator46.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator56 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator57 = objectToStringComparator56.reversed();
        java.util.Comparator<java.lang.Object> objComparator58 = objectToStringComparator56.reversed();
        java.util.Comparator<java.lang.Object> objComparator59 = objComparator55.thenComparing(objComparator58);
        java.util.Comparator<java.lang.Object> objComparator60 = objComparator13.thenComparing(objComparator55);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(objComparator12);
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertNotNull(objComparator25);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(objComparator30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 62 + "'", int32 == 62);
        org.junit.Assert.assertNotNull(objComparator34);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-16) + "'", int38 == (-16));
        org.junit.Assert.assertNotNull(objComparator39);
        org.junit.Assert.assertNotNull(objComparator41);
        org.junit.Assert.assertNotNull(objComparator42);
        org.junit.Assert.assertNotNull(objComparator43);
        org.junit.Assert.assertNotNull(objComparator44);
        org.junit.Assert.assertNotNull(objComparator45);
        org.junit.Assert.assertNotNull(objComparator47);
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(objComparator52);
        org.junit.Assert.assertNotNull(objComparator53);
        org.junit.Assert.assertNotNull(objComparator54);
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(objectToStringComparator56);
        org.junit.Assert.assertNotNull(objComparator57);
        org.junit.Assert.assertNotNull(objComparator58);
        org.junit.Assert.assertNotNull(objComparator59);
        org.junit.Assert.assertNotNull(objComparator60);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean15 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        boolean boolean17 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean19 = strComparableCheckBuilder1.lessThan("");
        boolean boolean22 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean24 = strComparableCheckBuilder1.equalTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams5 = new org.apache.commons.lang3.stream.Streams();
        int int6 = objectToStringComparator1.compare((java.lang.Object) strPredicate4, (java.lang.Object) streams5);
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int11 = objectToStringComparator8.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector15 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass14);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction17 = objArrayCollector15.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer18 = objArrayCollector15.accumulator();
        int int19 = objectToStringComparator0.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer18);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams24 = new org.apache.commons.lang3.stream.Streams();
        int int25 = objectToStringComparator20.compare((java.lang.Object) strPredicate23, (java.lang.Object) streams24);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int30 = objectToStringComparator20.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate29);
        java.util.Comparator<java.lang.Object> objComparator31 = objectToStringComparator20.reversed();
        java.util.Comparator<java.lang.Object> objComparator32 = objectToStringComparator20.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder34 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean36 = strComparableCheckBuilder34.greaterThanOrEqualTo("");
        int int37 = objectToStringComparator0.compare((java.lang.Object) objComparator32, (java.lang.Object) boolean36);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator38 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator39 = objectToStringComparator38.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams42 = new org.apache.commons.lang3.stream.Streams();
        int int43 = objectToStringComparator38.compare((java.lang.Object) strPredicate41, (java.lang.Object) streams42);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder45 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate47 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int48 = objectToStringComparator38.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate47);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator49 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator50 = objectToStringComparator49.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate52 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams53 = new org.apache.commons.lang3.stream.Streams();
        int int54 = objectToStringComparator49.compare((java.lang.Object) strPredicate52, (java.lang.Object) streams53);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder56 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate58 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int59 = objectToStringComparator49.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate58);
        java.util.Comparator<java.lang.Object> objComparator60 = objectToStringComparator49.reversed();
        java.util.Comparator<java.lang.Object> objComparator61 = objectToStringComparator38.thenComparing(objComparator60);
        java.util.Comparator<java.lang.Object> objComparator62 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator38);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator63 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator64 = objectToStringComparator63.reversed();
        java.util.Comparator<java.lang.Object> objComparator65 = objectToStringComparator63.reversed();
        java.util.Comparator<java.lang.Object> objComparator66 = objectToStringComparator0.thenComparing(objComparator65);
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-16) + "'", int6 == (-16));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(objListFunction17);
        org.junit.Assert.assertNotNull(objListBiConsumer18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-62) + "'", int19 == (-62));
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-16) + "'", int25 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-7) + "'", int30 == (-7));
        org.junit.Assert.assertNotNull(objComparator31);
        org.junit.Assert.assertNotNull(objComparator32);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-10) + "'", int37 == (-10));
        org.junit.Assert.assertNotNull(objComparator39);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-16) + "'", int43 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder45);
        org.junit.Assert.assertNotNull(strPredicate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-7) + "'", int48 == (-7));
        org.junit.Assert.assertNotNull(objComparator50);
        org.junit.Assert.assertNotNull(strPredicate52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-16) + "'", int54 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder56);
        org.junit.Assert.assertNotNull(strPredicate58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-7) + "'", int59 == (-7));
        org.junit.Assert.assertNotNull(objComparator60);
        org.junit.Assert.assertNotNull(objComparator61);
        org.junit.Assert.assertNotNull(objComparator62);
        org.junit.Assert.assertNotNull(objectToStringComparator63);
        org.junit.Assert.assertNotNull(objComparator64);
        org.junit.Assert.assertNotNull(objComparator65);
        org.junit.Assert.assertNotNull(objComparator66);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(objListFunction9);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.lessThan("");
        boolean boolean21 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean23 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer7 = objArrayCollector3.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer10 = objArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator11 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction12 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListBiConsumer7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListFunction9);
        org.junit.Assert.assertNotNull(objListBiConsumer10);
        org.junit.Assert.assertNotNull(objListBinaryOperator11);
        org.junit.Assert.assertNotNull(objListFunction12);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean22 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean24 = strComparableCheckBuilder1.lessThan("");
        boolean boolean26 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean28 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier5 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListSupplier5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        java.lang.Class<java.lang.Object[]> objArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.Object[]> objArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.Object[]>(objArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream12 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream13 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
        org.junit.Assert.assertNotNull(characteristicsStream12);
        org.junit.Assert.assertNotNull(characteristicsStream13);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        boolean boolean23 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean25 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream12 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream13 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
        org.junit.Assert.assertNotNull(characteristicsStream12);
        org.junit.Assert.assertNotNull(characteristicsStream13);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean22 = strComparableCheckBuilder1.between("", "");
        boolean boolean24 = strComparableCheckBuilder1.equalTo("");
        boolean boolean26 = strComparableCheckBuilder1.equalTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator8 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction11 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListBinaryOperator8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(objListSupplier10);
        org.junit.Assert.assertNotNull(objListFunction11);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream60 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream61 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream62 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        java.lang.Class<?> wildcardClass63 = strComparableCheckBuilderStream51.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream60);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream61);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int12 = objectToStringComparator9.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator13.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj17 = null;
        int int18 = objectToStringComparator13.compare((java.lang.Object) "hi!", obj17);
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator13.reversed();
        java.util.Comparator<java.lang.Object> objComparator20 = objectToStringComparator13.reversed();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator13.reversed();
        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator9.thenComparing(objComparator21);
        java.util.Comparator<java.lang.Object> objComparator23 = objComparator8.thenComparing(objComparator22);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator6);
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(objComparator20);
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertNotNull(objComparator23);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        java.lang.Class<java.util.function.BinaryOperator[]> binaryOperatorArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.function.BinaryOperator[]> binaryOperatorArrayArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.function.BinaryOperator[]>(binaryOperatorArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator2 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj7 = null;
        int int8 = objectToStringComparator3.compare((java.lang.Object) "hi!", obj7);
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator2.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator3);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder11 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean13 = strComparableCheckBuilder11.greaterThan("hi!");
        boolean boolean16 = strComparableCheckBuilder11.betweenExclusive("", "");
        boolean boolean18 = strComparableCheckBuilder11.equalTo("hi!");
        boolean boolean20 = strComparableCheckBuilder11.lessThan("");
        boolean boolean22 = strComparableCheckBuilder11.lessThan("");
        boolean boolean24 = strComparableCheckBuilder11.lessThanOrEqualTo("");
        boolean boolean27 = strComparableCheckBuilder11.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder29 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean31 = strComparableCheckBuilder29.greaterThan("hi!");
        boolean boolean34 = strComparableCheckBuilder29.betweenExclusive("", "");
        boolean boolean36 = strComparableCheckBuilder29.equalTo("hi!");
        boolean boolean38 = strComparableCheckBuilder29.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder40 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean42 = strComparableCheckBuilder40.greaterThan("hi!");
        boolean boolean45 = strComparableCheckBuilder40.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder47 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean49 = strComparableCheckBuilder47.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray51 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray52 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray51;
        strComparableCheckBuilderArray52[0] = strComparableCheckBuilder11;
        strComparableCheckBuilderArray52[1] = strComparableCheckBuilder29;
        strComparableCheckBuilderArray52[2] = strComparableCheckBuilder40;
        strComparableCheckBuilderArray52[3] = strComparableCheckBuilder47;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream61 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray52);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder63 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean65 = strComparableCheckBuilder63.greaterThan("hi!");
        boolean boolean68 = strComparableCheckBuilder63.betweenExclusive("", "");
        boolean boolean70 = strComparableCheckBuilder63.equalTo("hi!");
        boolean boolean72 = strComparableCheckBuilder63.lessThan("");
        boolean boolean74 = strComparableCheckBuilder63.lessThan("hi!");
        boolean boolean76 = strComparableCheckBuilder63.greaterThanOrEqualTo("hi!");
        int int77 = objectToStringComparator3.compare((java.lang.Object) strComparableCheckBuilderStream61, (java.lang.Object) boolean76);
        java.util.Comparator<java.lang.Object> objComparator78 = objComparator1.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator3);
        java.util.Comparator<java.lang.Object> objComparator79 = objectToStringComparator3.reversed();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream61);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-10) + "'", int77 == (-10));
        org.junit.Assert.assertNotNull(objComparator78);
        org.junit.Assert.assertNotNull(objComparator79);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator14 = objComparator13.reversed();
        java.util.Comparator<java.lang.Object> objComparator15 = objComparator14.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator17 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator18 = objectToStringComparator17.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate20 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams21 = new org.apache.commons.lang3.stream.Streams();
        int int22 = objectToStringComparator17.compare((java.lang.Object) strPredicate20, (java.lang.Object) streams21);
        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator16.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator17);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator24 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int27 = objectToStringComparator24.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass30 = strPredicate29.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector31 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass30);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier32 = objArrayCollector31.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction33 = objArrayCollector31.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer34 = objArrayCollector31.accumulator();
        int int35 = objectToStringComparator16.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer34);
        java.util.Comparator<java.lang.Object> objComparator36 = objectToStringComparator16.reversed();
        java.util.Comparator<java.lang.Object> objComparator37 = objectToStringComparator16.reversed();
        java.util.Comparator<java.lang.Object> objComparator38 = objComparator15.thenComparing(objComparator37);
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(objComparator18);
        org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-16) + "'", int22 == (-16));
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(objListSupplier32);
        org.junit.Assert.assertNotNull(objListFunction33);
        org.junit.Assert.assertNotNull(objListBiConsumer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-62) + "'", int35 == (-62));
        org.junit.Assert.assertNotNull(objComparator36);
        org.junit.Assert.assertNotNull(objComparator37);
        org.junit.Assert.assertNotNull(objComparator38);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer7 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = objArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector3.supplier();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(objListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(objListFunction9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(objListSupplier11);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean22 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean24 = strComparableCheckBuilder1.lessThan("");
        boolean boolean27 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean30 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>>(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.betweenExclusive("", "");
        boolean boolean10 = strComparableCheckBuilder3.equalTo("hi!");
        boolean boolean12 = strComparableCheckBuilder3.lessThan("");
        boolean boolean14 = strComparableCheckBuilder3.equalTo("");
        boolean boolean16 = strComparableCheckBuilder3.greaterThanOrEqualTo("hi!");
        boolean boolean19 = strComparableCheckBuilder3.between("hi!", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder21 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean23 = strComparableCheckBuilder21.greaterThan("hi!");
        boolean boolean26 = strComparableCheckBuilder21.betweenExclusive("", "");
        boolean boolean28 = strComparableCheckBuilder21.equalTo("hi!");
        boolean boolean30 = strComparableCheckBuilder21.lessThan("");
        boolean boolean32 = strComparableCheckBuilder21.lessThan("");
        boolean boolean34 = strComparableCheckBuilder21.lessThanOrEqualTo("");
        boolean boolean37 = strComparableCheckBuilder21.between("hi!", "hi!");
        boolean boolean40 = strComparableCheckBuilder21.betweenExclusive("hi!", "hi!");
        boolean boolean42 = strComparableCheckBuilder21.lessThanOrEqualTo("hi!");
        boolean boolean44 = strComparableCheckBuilder21.greaterThan("hi!");
        boolean boolean46 = strComparableCheckBuilder21.lessThan("hi!");
        boolean boolean48 = strComparableCheckBuilder21.lessThanOrEqualTo("");
        int int49 = objectToStringComparator0.compare((java.lang.Object) "hi!", (java.lang.Object) "");
        java.util.function.Predicate<java.lang.String> strPredicate51 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass52 = strPredicate51.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector53 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass52);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier54 = objArrayCollector53.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction55 = objArrayCollector53.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator56 = objArrayCollector53.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier57 = objArrayCollector53.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet58 = objArrayCollector53.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier59 = objArrayCollector53.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction60 = objArrayCollector53.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer61 = objArrayCollector53.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction62 = objArrayCollector53.finisher();
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray63 = new java.lang.reflect.GenericDeclaration[][] {};
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayStream64 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray63);
        int int65 = objectToStringComparator0.compare((java.lang.Object) objListFunction62, (java.lang.Object) genericDeclarationArrayStream64);
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(strPredicate51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(objListSupplier54);
        org.junit.Assert.assertNotNull(objListFunction55);
        org.junit.Assert.assertNotNull(objListBinaryOperator56);
        org.junit.Assert.assertNotNull(objListSupplier57);
        org.junit.Assert.assertNotNull(characteristicsSet58);
        org.junit.Assert.assertNotNull(objListSupplier59);
        org.junit.Assert.assertNotNull(objListFunction60);
        org.junit.Assert.assertNotNull(objListBiConsumer61);
        org.junit.Assert.assertNotNull(objListFunction62);
        org.junit.Assert.assertNotNull(genericDeclarationArray63);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean16 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean19 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean21 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean24 = strComparableCheckBuilder1.between("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        java.lang.Class<java.lang.CharSequence[]> charSequenceArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.CharSequence[]> charSequenceArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.CharSequence[]>(charSequenceArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector3.supplier();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(objListSupplier10);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        java.util.Collection<java.util.stream.Collector.Characteristics> characteristicsCollection0 = null;
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream1 = org.apache.commons.lang3.stream.Streams.toStream(characteristicsCollection0);
        org.junit.Assert.assertNotNull(characteristicsStream1);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean22 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean24 = strComparableCheckBuilder1.lessThan("");
        boolean boolean27 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean29 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream12 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream13 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream14 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass17 = strPredicate16.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector18 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass17);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier19 = objArrayCollector18.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction20 = objArrayCollector18.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer21 = objArrayCollector18.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer22 = objArrayCollector18.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier23 = objArrayCollector18.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate25 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass26 = strPredicate25.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector27 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass26);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier28 = objArrayCollector27.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction29 = objArrayCollector27.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = objArrayCollector27.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction31 = objArrayCollector27.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer32 = objArrayCollector27.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList34 = objectToStringComparatorFailableStream1.collect(objListSupplier23, objListBiConsumer32, objListBiConsumer33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNull(objectToStringComparatorStream12);
        org.junit.Assert.assertNull(objectToStringComparatorStream13);
        org.junit.Assert.assertNull(objectToStringComparatorStream14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objListSupplier19);
        org.junit.Assert.assertNotNull(objListFunction20);
        org.junit.Assert.assertNotNull(objListBiConsumer21);
        org.junit.Assert.assertNotNull(objListBiConsumer22);
        org.junit.Assert.assertNotNull(objListSupplier23);
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(objListSupplier28);
        org.junit.Assert.assertNotNull(objListFunction29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(objListFunction31);
        org.junit.Assert.assertNotNull(objListBiConsumer32);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream60 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream61 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream62 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream63 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream60);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream61);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream62);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream63);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier6 = null;
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass9 = strPredicate8.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass9);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction12 = objArrayCollector10.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer13 = objArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = objArrayCollector10.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer15 = objArrayCollector10.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList17 = objectToStringComparatorFailableStream1.collect(objListSupplier6, objListBiConsumer15, objListBiConsumer16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(objListFunction12);
        org.junit.Assert.assertNotNull(objListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(objListBiConsumer15);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = org.apache.commons.lang3.stream.Streams.of((java.lang.Comparable<java.lang.String>[]) strArray1);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strComparableStream2);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        java.lang.Class<java.lang.reflect.AnnotatedElement> annotatedElementClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.AnnotatedElement> annotatedElementEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.AnnotatedElement>(annotatedElementClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream13 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsStream13);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean19 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean22 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean24 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        java.lang.Class<org.apache.commons.lang3.event.EventUtils> eventUtilsClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.event.EventUtils> eventUtilsEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.event.EventUtils>(eventUtilsClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.Predicate<java.lang.String> strPredicate7 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass8 = strPredicate7.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector9 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass8);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector9.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction11 = objArrayCollector9.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer12 = objArrayCollector9.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer13 = objArrayCollector9.accumulator();
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass16 = strPredicate15.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector17 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass16);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier18 = objArrayCollector17.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector17.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer20 = objArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = objArrayCollector17.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer22 = objArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = objArrayCollector17.characteristics();
        org.apache.commons.lang3.stream.Streams.ArrayCollector[] arrayCollectorArray25 = new org.apache.commons.lang3.stream.Streams.ArrayCollector[3];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[] objArrayCollectorArray26 = (org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[]) arrayCollectorArray25;
        objArrayCollectorArray26[0] = objArrayCollector3;
        objArrayCollectorArray26[1] = objArrayCollector9;
        objArrayCollectorArray26[2] = objArrayCollector17;
        java.util.stream.Stream<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>> objArrayCollectorStream33 = org.apache.commons.lang3.stream.Streams.of(objArrayCollectorArray26);
        java.util.stream.Stream<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>> objArrayCollectorStream34 = org.apache.commons.lang3.stream.Streams.of(objArrayCollectorArray26);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objListSupplier10);
        org.junit.Assert.assertNotNull(objListFunction11);
        org.junit.Assert.assertNotNull(objListBiConsumer12);
        org.junit.Assert.assertNotNull(objListBiConsumer13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objListSupplier18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(objListBiConsumer22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(arrayCollectorArray25);
        org.junit.Assert.assertNotNull(objArrayCollectorArray26);
        org.junit.Assert.assertNotNull(objArrayCollectorStream33);
        org.junit.Assert.assertNotNull(objArrayCollectorStream34);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector3.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListFunction9);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder13 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean15 = strComparableCheckBuilder13.greaterThan("hi!");
        boolean boolean18 = strComparableCheckBuilder13.between("hi!", "");
        boolean boolean20 = strComparableCheckBuilder13.lessThanOrEqualTo("hi!");
        int int22 = objectToStringComparator10.compare((java.lang.Object) strComparableCheckBuilder13, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass25 = strPredicate24.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector26 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass25);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier27 = objArrayCollector26.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator28 = objArrayCollector26.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction29 = objArrayCollector26.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator30 = objArrayCollector26.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder32 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean34 = strComparableCheckBuilder32.greaterThan("hi!");
        boolean boolean37 = strComparableCheckBuilder32.betweenExclusive("", "");
        boolean boolean39 = strComparableCheckBuilder32.equalTo("hi!");
        boolean boolean41 = strComparableCheckBuilder32.lessThan("");
        boolean boolean43 = strComparableCheckBuilder32.equalTo("");
        boolean boolean45 = strComparableCheckBuilder32.lessThan("hi!");
        boolean boolean47 = strComparableCheckBuilder32.greaterThan("hi!");
        int int48 = objectToStringComparator10.compare((java.lang.Object) objArrayCollector26, (java.lang.Object) "hi!");
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator49 = objArrayCollector26.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer50 = objArrayCollector26.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier51 = objArrayCollector26.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate53 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass54 = strPredicate53.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector55 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass54);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier56 = objArrayCollector55.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator57 = objArrayCollector55.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet58 = objArrayCollector55.characteristics();
        java.lang.Class<?> wildcardClass59 = objArrayCollector55.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector60 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass59);
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer61 = objArrayCollector60.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList63 = objectToStringComparatorFailableStream1.collect(objListSupplier51, objListBiConsumer61, objListBiConsumer62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNotNull(objectToStringComparator10);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objListSupplier27);
        org.junit.Assert.assertNotNull(objListBinaryOperator28);
        org.junit.Assert.assertNotNull(objListFunction29);
        org.junit.Assert.assertNotNull(objListBinaryOperator30);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
        org.junit.Assert.assertNotNull(objListBinaryOperator49);
        org.junit.Assert.assertNotNull(objListBiConsumer50);
        org.junit.Assert.assertNotNull(objListSupplier51);
        org.junit.Assert.assertNotNull(strPredicate53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(objListSupplier56);
        org.junit.Assert.assertNotNull(objListBinaryOperator57);
        org.junit.Assert.assertNotNull(characteristicsSet58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(objListBiConsumer61);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = objArrayCollector3.characteristics();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction10 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListFunction10);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass12 = strPredicate11.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector13 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier14 = objArrayCollector13.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction15 = objArrayCollector13.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = objArrayCollector13.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = objArrayCollector13.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = objArrayCollector13.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier19 = objArrayCollector13.supplier();
        java.util.stream.Collector.Characteristics[] characteristicsArray20 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList21 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList21, characteristicsArray20);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream23 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList21);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream24 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList21);
        java.lang.Class<?> wildcardClass25 = characteristicsFailableStream24.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector26 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass25);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector27 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass25);
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer28 = objArrayCollector27.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList30 = objectToStringComparatorFailableStream1.collect(objListSupplier19, objListBiConsumer28, objListBiConsumer29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(objListSupplier14);
        org.junit.Assert.assertNotNull(objListFunction15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(objListSupplier19);
        org.junit.Assert.assertNotNull(characteristicsArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream23);
        org.junit.Assert.assertNotNull(characteristicsFailableStream24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objListBiConsumer28);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean9 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean18 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean21 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean24 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean26 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams4 = new org.apache.commons.lang3.stream.Streams();
        int int5 = objectToStringComparator0.compare((java.lang.Object) strPredicate3, (java.lang.Object) streams4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj10 = null;
        int int11 = objectToStringComparator6.compare((java.lang.Object) "hi!", obj10);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator12.reversed();
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator6.thenComparing(objComparator13);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator15 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator16.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj20 = null;
        int int21 = objectToStringComparator16.compare((java.lang.Object) "hi!", obj20);
        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator15.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
        int int24 = objectToStringComparator6.compare((java.lang.Object) objectToStringComparator15, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator15);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator26 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator27 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator28 = objectToStringComparator27.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate30 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams31 = new org.apache.commons.lang3.stream.Streams();
        int int32 = objectToStringComparator27.compare((java.lang.Object) strPredicate30, (java.lang.Object) streams31);
        java.util.Comparator<java.lang.Object> objComparator33 = objectToStringComparator26.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator27);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator34 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int37 = objectToStringComparator34.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate39 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass40 = strPredicate39.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector41 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass40);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier42 = objArrayCollector41.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction43 = objArrayCollector41.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer44 = objArrayCollector41.accumulator();
        int int45 = objectToStringComparator26.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer44);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator46 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator47 = objectToStringComparator46.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate49 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams50 = new org.apache.commons.lang3.stream.Streams();
        int int51 = objectToStringComparator46.compare((java.lang.Object) strPredicate49, (java.lang.Object) streams50);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder53 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate55 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int56 = objectToStringComparator46.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate55);
        java.util.Comparator<java.lang.Object> objComparator57 = objectToStringComparator46.reversed();
        java.util.Comparator<java.lang.Object> objComparator58 = objectToStringComparator46.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder60 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean62 = strComparableCheckBuilder60.greaterThanOrEqualTo("");
        int int63 = objectToStringComparator26.compare((java.lang.Object) objComparator58, (java.lang.Object) boolean62);
        java.util.Comparator<java.lang.Object> objComparator64 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator26);
        java.util.function.Predicate<java.lang.String> strPredicate66 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass67 = strPredicate66.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector68 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass67);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier69 = objArrayCollector68.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction70 = objArrayCollector68.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet71 = objArrayCollector68.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator72 = objArrayCollector68.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator73 = objArrayCollector68.combiner();
        java.lang.Object obj74 = null;
        int int75 = objectToStringComparator26.compare((java.lang.Object) objArrayCollector68, obj74);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-16) + "'", int5 == (-16));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 62 + "'", int24 == 62);
        org.junit.Assert.assertNotNull(objComparator25);
        org.junit.Assert.assertNotNull(objComparator28);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-16) + "'", int32 == (-16));
        org.junit.Assert.assertNotNull(objComparator33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(strPredicate39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(objListSupplier42);
        org.junit.Assert.assertNotNull(objListFunction43);
        org.junit.Assert.assertNotNull(objListBiConsumer44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-62) + "'", int45 == (-62));
        org.junit.Assert.assertNotNull(objComparator47);
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-16) + "'", int51 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder53);
        org.junit.Assert.assertNotNull(strPredicate55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-7) + "'", int56 == (-7));
        org.junit.Assert.assertNotNull(objComparator57);
        org.junit.Assert.assertNotNull(objComparator58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-10) + "'", int63 == (-10));
        org.junit.Assert.assertNotNull(objComparator64);
        org.junit.Assert.assertNotNull(strPredicate66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(objListSupplier69);
        org.junit.Assert.assertNotNull(objListFunction70);
        org.junit.Assert.assertNotNull(characteristicsSet71);
        org.junit.Assert.assertNotNull(objListBinaryOperator72);
        org.junit.Assert.assertNotNull(objListBinaryOperator73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction4 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListFunction4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(objListSupplier8);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction6 = objArrayCollector3.finisher();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(objListFunction6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListFunction8);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream12 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream13 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream14 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass17 = strPredicate16.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector18 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass17);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier19 = objArrayCollector18.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction20 = objArrayCollector18.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = objArrayCollector18.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction22 = objArrayCollector18.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator23 = objArrayCollector18.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator24 = objArrayCollector18.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier25 = objArrayCollector18.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate27 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass28 = strPredicate27.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector29 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass28);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier30 = objArrayCollector29.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction31 = objArrayCollector29.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator32 = objArrayCollector29.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator33 = objArrayCollector29.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier34 = objArrayCollector29.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet35 = objArrayCollector29.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator36 = objArrayCollector29.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet37 = objArrayCollector29.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer38 = objArrayCollector29.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList40 = objectToStringComparatorFailableStream1.collect(objListSupplier25, objListBiConsumer38, objListBiConsumer39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNull(objectToStringComparatorStream12);
        org.junit.Assert.assertNull(objectToStringComparatorStream13);
        org.junit.Assert.assertNull(objectToStringComparatorStream14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objListSupplier19);
        org.junit.Assert.assertNotNull(objListFunction20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(objListFunction22);
        org.junit.Assert.assertNotNull(objListBinaryOperator23);
        org.junit.Assert.assertNotNull(objListBinaryOperator24);
        org.junit.Assert.assertNotNull(objListSupplier25);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(objListSupplier30);
        org.junit.Assert.assertNotNull(objListFunction31);
        org.junit.Assert.assertNotNull(objListBinaryOperator32);
        org.junit.Assert.assertNotNull(objListBinaryOperator33);
        org.junit.Assert.assertNotNull(objListSupplier34);
        org.junit.Assert.assertNotNull(characteristicsSet35);
        org.junit.Assert.assertNotNull(objListBinaryOperator36);
        org.junit.Assert.assertNotNull(characteristicsSet37);
        org.junit.Assert.assertNotNull(objListBiConsumer38);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        java.lang.Class<org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>> objectToStringComparatorFailableStreamClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>> objectToStringComparatorFailableStreamArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>>(objectToStringComparatorFailableStreamClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator18 = objArrayCollector16.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator20 = objArrayCollector16.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder22 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean24 = strComparableCheckBuilder22.greaterThan("hi!");
        boolean boolean27 = strComparableCheckBuilder22.betweenExclusive("", "");
        boolean boolean29 = strComparableCheckBuilder22.equalTo("hi!");
        boolean boolean31 = strComparableCheckBuilder22.lessThan("");
        boolean boolean33 = strComparableCheckBuilder22.equalTo("");
        boolean boolean35 = strComparableCheckBuilder22.lessThan("hi!");
        boolean boolean37 = strComparableCheckBuilder22.greaterThan("hi!");
        int int38 = objectToStringComparator0.compare((java.lang.Object) objArrayCollector16, (java.lang.Object) "hi!");
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator39 = objArrayCollector16.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction40 = objArrayCollector16.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer41 = objArrayCollector16.accumulator();
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListBinaryOperator18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListBinaryOperator20);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 7 + "'", int38 == 7);
        org.junit.Assert.assertNotNull(objListBinaryOperator39);
        org.junit.Assert.assertNotNull(objListFunction40);
        org.junit.Assert.assertNotNull(objListBiConsumer41);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean26 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean28 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean30 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean32 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean34 = strComparableCheckBuilder1.greaterThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean16 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean18 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        boolean boolean9 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean12 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier5 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListSupplier5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean21 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        boolean boolean26 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean8 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean21 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean23 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean25 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean16 = strComparableCheckBuilder1.greaterThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean20 = strComparableCheckBuilder1.between("", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = null;
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator11 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator9, objectToStringComparatorBinaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream12 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream13 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream14 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream15 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass18 = strPredicate17.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector19 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass18);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector20 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray21 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNull(objectToStringComparatorStream12);
        org.junit.Assert.assertNull(objectToStringComparatorStream13);
        org.junit.Assert.assertNull(objectToStringComparatorStream14);
        org.junit.Assert.assertNull(objectToStringComparatorStream15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean22 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean24 = strComparableCheckBuilder1.lessThan("");
        boolean boolean27 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean29 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean5 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean10 = strComparableCheckBuilder1.between("", "");
        boolean boolean13 = strComparableCheckBuilder1.between("hi!", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator9.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj13 = null;
        int int14 = objectToStringComparator9.compare((java.lang.Object) "hi!", obj13);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator15 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator15.reversed();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator9.thenComparing(objComparator16);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator18 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator18.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams22 = new org.apache.commons.lang3.stream.Streams();
        int int23 = objectToStringComparator18.compare((java.lang.Object) strPredicate21, (java.lang.Object) streams22);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder25 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate27 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int28 = objectToStringComparator18.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate27);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator29 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator30 = objectToStringComparator29.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate32 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams33 = new org.apache.commons.lang3.stream.Streams();
        int int34 = objectToStringComparator29.compare((java.lang.Object) strPredicate32, (java.lang.Object) streams33);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder36 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate38 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int39 = objectToStringComparator29.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate38);
        java.util.Comparator<java.lang.Object> objComparator40 = objectToStringComparator29.reversed();
        java.util.Comparator<java.lang.Object> objComparator41 = objectToStringComparator18.thenComparing(objComparator40);
        java.util.Comparator<java.lang.Object> objComparator42 = objComparator17.thenComparing(objComparator41);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator43 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator44 = objectToStringComparator43.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate46 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams47 = new org.apache.commons.lang3.stream.Streams();
        int int48 = objectToStringComparator43.compare((java.lang.Object) strPredicate46, (java.lang.Object) streams47);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder50 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate52 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int53 = objectToStringComparator43.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate52);
        java.util.Comparator<java.lang.Object> objComparator54 = objectToStringComparator43.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator55 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator56 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator57 = objectToStringComparator56.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate59 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj60 = null;
        int int61 = objectToStringComparator56.compare((java.lang.Object) "hi!", obj60);
        java.util.Comparator<java.lang.Object> objComparator62 = objectToStringComparator55.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator56);
        java.util.Comparator<java.lang.Object> objComparator63 = objectToStringComparator43.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator56);
        java.util.Comparator<java.lang.Object> objComparator64 = objComparator41.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator43);
        java.util.Comparator<java.lang.Object> objComparator65 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator43);
        java.lang.Class<?> wildcardClass66 = objectToStringComparator0.getClass();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator6);
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-16) + "'", int23 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder25);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-7) + "'", int28 == (-7));
        org.junit.Assert.assertNotNull(objComparator30);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-16) + "'", int34 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder36);
        org.junit.Assert.assertNotNull(strPredicate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-7) + "'", int39 == (-7));
        org.junit.Assert.assertNotNull(objComparator40);
        org.junit.Assert.assertNotNull(objComparator41);
        org.junit.Assert.assertNotNull(objComparator42);
        org.junit.Assert.assertNotNull(objComparator44);
        org.junit.Assert.assertNotNull(strPredicate46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-16) + "'", int48 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder50);
        org.junit.Assert.assertNotNull(strPredicate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-7) + "'", int53 == (-7));
        org.junit.Assert.assertNotNull(objComparator54);
        org.junit.Assert.assertNotNull(objComparator57);
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(objComparator62);
        org.junit.Assert.assertNotNull(objComparator63);
        org.junit.Assert.assertNotNull(objComparator64);
        org.junit.Assert.assertNotNull(objComparator65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((-50));
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams5 = new org.apache.commons.lang3.stream.Streams();
        int int6 = objectToStringComparator1.compare((java.lang.Object) strPredicate4, (java.lang.Object) streams5);
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector11.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction13 = objArrayCollector11.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = objArrayCollector11.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = objArrayCollector11.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer16 = objArrayCollector11.accumulator();
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass19 = strPredicate18.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector20 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass19);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier21 = objArrayCollector20.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction22 = objArrayCollector20.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = objArrayCollector20.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream24 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet23);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream25 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet23);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream26 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet23);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream27 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet23);
        int int28 = objectToStringComparator1.compare((java.lang.Object) objArrayCollector11, (java.lang.Object) characteristicsStream27);
        java.util.Comparator<java.lang.Object> objComparator29 = objectToStringComparator1.reversed();
        java.lang.Object obj30 = null;
        java.util.function.Predicate<java.lang.String> strPredicate32 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass33 = strPredicate32.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector34 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass33);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier35 = objArrayCollector34.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator36 = objArrayCollector34.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet37 = objArrayCollector34.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream38 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet37);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream39 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet37);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream40 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet37);
        int int41 = objectToStringComparator1.compare(obj30, (java.lang.Object) characteristicsStream40);
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-16) + "'", int6 == (-16));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objListFunction13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(objListBiConsumer16);
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(objListSupplier21);
        org.junit.Assert.assertNotNull(objListFunction22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(characteristicsStream24);
        org.junit.Assert.assertNotNull(characteristicsFailableStream25);
        org.junit.Assert.assertNotNull(characteristicsStream26);
        org.junit.Assert.assertNotNull(characteristicsStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(objComparator29);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(objListSupplier35);
        org.junit.Assert.assertNotNull(objListBinaryOperator36);
        org.junit.Assert.assertNotNull(characteristicsSet37);
        org.junit.Assert.assertNotNull(characteristicsFailableStream38);
        org.junit.Assert.assertNotNull(characteristicsStream39);
        org.junit.Assert.assertNotNull(characteristicsStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int3 = objectToStringComparator0.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator4 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator5 = objectToStringComparator4.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate7 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj8 = null;
        int int9 = objectToStringComparator4.compare((java.lang.Object) "hi!", obj8);
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator4.reversed();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator4.reversed();
        java.util.Comparator<java.lang.Object> objComparator12 = objectToStringComparator4.reversed();
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator0.thenComparing(objComparator12);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator14.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj18 = null;
        int int19 = objectToStringComparator14.compare((java.lang.Object) "hi!", obj18);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator14.thenComparing(objComparator21);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator23 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator24 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator24.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate27 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj28 = null;
        int int29 = objectToStringComparator24.compare((java.lang.Object) "hi!", obj28);
        java.util.Comparator<java.lang.Object> objComparator30 = objectToStringComparator23.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator24);
        int int32 = objectToStringComparator14.compare((java.lang.Object) objectToStringComparator23, (java.lang.Object) 1L);
        java.lang.Class<?> wildcardClass33 = objectToStringComparator23.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector34 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass33);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector35 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass33);
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator36 = objArrayCollector35.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction37 = objArrayCollector35.finisher();
        java.util.stream.Stream<java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object>[]> listBiConsumerArrayStream38 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object>[]> listBiConsumerArrayFailableStream39 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object>[]>(listBiConsumerArrayStream38);
        int int40 = objectToStringComparator0.compare((java.lang.Object) objArrayCollector35, (java.lang.Object) listBiConsumerArrayFailableStream39);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet41 = objArrayCollector35.characteristics();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(objComparator5);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(objComparator12);
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertNotNull(objComparator25);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(objComparator30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 62 + "'", int32 == 62);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(objListBinaryOperator36);
        org.junit.Assert.assertNotNull(objListFunction37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-5) + "'", int40 == (-5));
        org.junit.Assert.assertNotNull(characteristicsSet41);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        boolean boolean22 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean24 = strComparableCheckBuilder1.greaterThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj14 = null;
        int int15 = objectToStringComparator10.compare((java.lang.Object) "hi!", obj14);
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator9.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator10);
        int int18 = objectToStringComparator0.compare((java.lang.Object) objectToStringComparator9, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator9.reversed();
        java.lang.Class<?> wildcardClass20 = objectToStringComparator9.getClass();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 62 + "'", int18 == 62);
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean16 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean19 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean22 = strComparableCheckBuilder1.betweenExclusive("", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        java.lang.Class<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[]> objArrayCollectorArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[]> objArrayCollectorArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[]>(objArrayCollectorArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator11 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator12 = objectToStringComparator11.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj15 = null;
        int int16 = objectToStringComparator11.compare((java.lang.Object) "hi!", obj15);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator18 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator11, objectToStringComparatorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNotNull(objComparator12);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean18 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean20 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass4 = strPredicate3.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector5 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass4);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier6 = objArrayCollector5.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector5.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector5.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector5.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector5.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector5.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector15 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass14);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction17 = objArrayCollector15.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator18 = objArrayCollector15.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier19 = objArrayCollector15.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = objArrayCollector15.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier21 = objArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction22 = objArrayCollector15.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer23 = objArrayCollector15.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList25 = objectToStringComparatorFailableStream1.collect(objListSupplier11, objListBiConsumer23, objListBiConsumer24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(objListSupplier6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(objListSupplier10);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(objListFunction17);
        org.junit.Assert.assertNotNull(objListBinaryOperator18);
        org.junit.Assert.assertNotNull(objListSupplier19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(objListSupplier21);
        org.junit.Assert.assertNotNull(objListFunction22);
        org.junit.Assert.assertNotNull(objListBiConsumer23);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean15 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        boolean boolean17 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean19 = strComparableCheckBuilder1.equalTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator8 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction10 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListBinaryOperator8);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListFunction10);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream60 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream60);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean7 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean9 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean11 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean13 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean15 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction6 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(objListFunction6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream6 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range((int) (short) 10);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream13 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsStream13);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream13 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream14 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsStream13);
        org.junit.Assert.assertNotNull(characteristicsStream14);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator8.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj12 = null;
        int int13 = objectToStringComparator8.compare((java.lang.Object) "hi!", obj12);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator14.reversed();
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator8.thenComparing(objComparator15);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator17 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator18 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator18.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj22 = null;
        int int23 = objectToStringComparator18.compare((java.lang.Object) "hi!", obj22);
        java.util.Comparator<java.lang.Object> objComparator24 = objectToStringComparator17.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator18);
        int int26 = objectToStringComparator8.compare((java.lang.Object) objectToStringComparator17, (java.lang.Object) 1L);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator28 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator17, objectToStringComparatorBinaryOperator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(objComparator24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 62 + "'", int26 == 62);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int3 = objectToStringComparator0.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator5 = objComparator4.reversed();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(objComparator5);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range(66);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator2 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator3 = objectToStringComparator2.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder5 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean7 = strComparableCheckBuilder5.greaterThan("hi!");
        boolean boolean10 = strComparableCheckBuilder5.between("hi!", "");
        boolean boolean12 = strComparableCheckBuilder5.lessThanOrEqualTo("hi!");
        int int14 = objectToStringComparator2.compare((java.lang.Object) strComparableCheckBuilder5, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass17 = strPredicate16.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector18 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass17);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier19 = objArrayCollector18.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator20 = objArrayCollector18.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction21 = objArrayCollector18.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator22 = objArrayCollector18.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder24 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean26 = strComparableCheckBuilder24.greaterThan("hi!");
        boolean boolean29 = strComparableCheckBuilder24.betweenExclusive("", "");
        boolean boolean31 = strComparableCheckBuilder24.equalTo("hi!");
        boolean boolean33 = strComparableCheckBuilder24.lessThan("");
        boolean boolean35 = strComparableCheckBuilder24.equalTo("");
        boolean boolean37 = strComparableCheckBuilder24.lessThan("hi!");
        boolean boolean39 = strComparableCheckBuilder24.greaterThan("hi!");
        int int40 = objectToStringComparator2.compare((java.lang.Object) objArrayCollector18, (java.lang.Object) "hi!");
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator41 = objArrayCollector18.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet42 = objArrayCollector18.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer43 = objArrayCollector18.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction44 = objArrayCollector18.finisher();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray45 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectToStringComparator2);
        org.junit.Assert.assertNotNull(objComparator3);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objListSupplier19);
        org.junit.Assert.assertNotNull(objListBinaryOperator20);
        org.junit.Assert.assertNotNull(objListFunction21);
        org.junit.Assert.assertNotNull(objListBinaryOperator22);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 7 + "'", int40 == 7);
        org.junit.Assert.assertNotNull(objListBinaryOperator41);
        org.junit.Assert.assertNotNull(characteristicsSet42);
        org.junit.Assert.assertNotNull(objListBiConsumer43);
        org.junit.Assert.assertNotNull(objListFunction44);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator14.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams18 = new org.apache.commons.lang3.stream.Streams();
        int int19 = objectToStringComparator14.compare((java.lang.Object) strPredicate17, (java.lang.Object) streams18);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder21 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int24 = objectToStringComparator14.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate23);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator25 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator26 = objectToStringComparator25.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate28 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams29 = new org.apache.commons.lang3.stream.Streams();
        int int30 = objectToStringComparator25.compare((java.lang.Object) strPredicate28, (java.lang.Object) streams29);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder32 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate34 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int35 = objectToStringComparator25.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate34);
        java.util.Comparator<java.lang.Object> objComparator36 = objectToStringComparator25.reversed();
        java.util.Comparator<java.lang.Object> objComparator37 = objectToStringComparator14.thenComparing(objComparator36);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator38 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator39 = objectToStringComparator38.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams42 = new org.apache.commons.lang3.stream.Streams();
        int int43 = objectToStringComparator38.compare((java.lang.Object) strPredicate41, (java.lang.Object) streams42);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator44 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator45 = objectToStringComparator44.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate47 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj48 = null;
        int int49 = objectToStringComparator44.compare((java.lang.Object) "hi!", obj48);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator50 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator51 = objectToStringComparator50.reversed();
        java.util.Comparator<java.lang.Object> objComparator52 = objectToStringComparator44.thenComparing(objComparator51);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator53 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator54 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator55 = objectToStringComparator54.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj58 = null;
        int int59 = objectToStringComparator54.compare((java.lang.Object) "hi!", obj58);
        java.util.Comparator<java.lang.Object> objComparator60 = objectToStringComparator53.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator54);
        int int62 = objectToStringComparator44.compare((java.lang.Object) objectToStringComparator53, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator63 = objectToStringComparator38.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator53);
        java.util.Comparator<java.lang.Object> objComparator64 = objComparator36.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator38);
        java.util.Comparator<java.lang.Object> objComparator65 = objComparator13.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator38);
        java.util.Comparator<java.lang.Object> objComparator66 = objComparator13.reversed();
        java.util.Comparator<java.lang.Object> objComparator67 = objComparator13.reversed();
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-16) + "'", int19 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-7) + "'", int24 == (-7));
        org.junit.Assert.assertNotNull(objComparator26);
        org.junit.Assert.assertNotNull(strPredicate28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-16) + "'", int30 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder32);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-7) + "'", int35 == (-7));
        org.junit.Assert.assertNotNull(objComparator36);
        org.junit.Assert.assertNotNull(objComparator37);
        org.junit.Assert.assertNotNull(objComparator39);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-16) + "'", int43 == (-16));
        org.junit.Assert.assertNotNull(objComparator45);
        org.junit.Assert.assertNotNull(strPredicate47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(objComparator51);
        org.junit.Assert.assertNotNull(objComparator52);
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(objComparator60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 62 + "'", int62 == 62);
        org.junit.Assert.assertNotNull(objComparator63);
        org.junit.Assert.assertNotNull(objComparator64);
        org.junit.Assert.assertNotNull(objComparator65);
        org.junit.Assert.assertNotNull(objComparator66);
        org.junit.Assert.assertNotNull(objComparator67);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        java.lang.Class<java.lang.CharSequence[][]> charSequenceArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.CharSequence[][]> charSequenceArrayArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.CharSequence[][]>(charSequenceArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams4 = new org.apache.commons.lang3.stream.Streams();
        int int5 = objectToStringComparator0.compare((java.lang.Object) strPredicate3, (java.lang.Object) streams4);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder7 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int10 = objectToStringComparator0.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate9);
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator13.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj17 = null;
        int int18 = objectToStringComparator13.compare((java.lang.Object) "hi!", obj17);
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator12.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator13);
        java.util.Comparator<java.lang.Object> objComparator20 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator13);
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator22 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator22.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate25 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj26 = null;
        int int27 = objectToStringComparator22.compare((java.lang.Object) "hi!", obj26);
        java.util.Comparator<java.lang.Object> objComparator28 = objectToStringComparator22.reversed();
        java.util.Comparator<java.lang.Object> objComparator29 = objectToStringComparator22.reversed();
        java.util.Comparator<java.lang.Object> objComparator30 = objectToStringComparator22.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator31 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator32 = objectToStringComparator31.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate34 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj35 = null;
        int int36 = objectToStringComparator31.compare((java.lang.Object) "hi!", obj35);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator37 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator38 = objectToStringComparator37.reversed();
        java.util.Comparator<java.lang.Object> objComparator39 = objectToStringComparator31.thenComparing(objComparator38);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator40 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator41 = objectToStringComparator40.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams44 = new org.apache.commons.lang3.stream.Streams();
        int int45 = objectToStringComparator40.compare((java.lang.Object) strPredicate43, (java.lang.Object) streams44);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder47 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate49 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int50 = objectToStringComparator40.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate49);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator51 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator52 = objectToStringComparator51.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate54 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams55 = new org.apache.commons.lang3.stream.Streams();
        int int56 = objectToStringComparator51.compare((java.lang.Object) strPredicate54, (java.lang.Object) streams55);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder58 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate60 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int61 = objectToStringComparator51.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate60);
        java.util.Comparator<java.lang.Object> objComparator62 = objectToStringComparator51.reversed();
        java.util.Comparator<java.lang.Object> objComparator63 = objectToStringComparator40.thenComparing(objComparator62);
        java.util.Comparator<java.lang.Object> objComparator64 = objComparator39.thenComparing(objComparator63);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator65 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator66 = objectToStringComparator65.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate68 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams69 = new org.apache.commons.lang3.stream.Streams();
        int int70 = objectToStringComparator65.compare((java.lang.Object) strPredicate68, (java.lang.Object) streams69);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder72 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate74 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int75 = objectToStringComparator65.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate74);
        java.util.Comparator<java.lang.Object> objComparator76 = objectToStringComparator65.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator77 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator78 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator79 = objectToStringComparator78.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate81 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj82 = null;
        int int83 = objectToStringComparator78.compare((java.lang.Object) "hi!", obj82);
        java.util.Comparator<java.lang.Object> objComparator84 = objectToStringComparator77.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator78);
        java.util.Comparator<java.lang.Object> objComparator85 = objectToStringComparator65.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator78);
        java.util.Comparator<java.lang.Object> objComparator86 = objComparator63.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator65);
        java.util.Comparator<java.lang.Object> objComparator87 = objectToStringComparator22.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator65);
        java.util.Comparator<java.lang.Object> objComparator88 = objComparator21.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator22);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-16) + "'", int5 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(objComparator20);
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(objComparator28);
        org.junit.Assert.assertNotNull(objComparator29);
        org.junit.Assert.assertNotNull(objComparator30);
        org.junit.Assert.assertNotNull(objComparator32);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(objComparator38);
        org.junit.Assert.assertNotNull(objComparator39);
        org.junit.Assert.assertNotNull(objComparator41);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-16) + "'", int45 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder47);
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-7) + "'", int50 == (-7));
        org.junit.Assert.assertNotNull(objComparator52);
        org.junit.Assert.assertNotNull(strPredicate54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-16) + "'", int56 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder58);
        org.junit.Assert.assertNotNull(strPredicate60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-7) + "'", int61 == (-7));
        org.junit.Assert.assertNotNull(objComparator62);
        org.junit.Assert.assertNotNull(objComparator63);
        org.junit.Assert.assertNotNull(objComparator64);
        org.junit.Assert.assertNotNull(objComparator66);
        org.junit.Assert.assertNotNull(strPredicate68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-16) + "'", int70 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder72);
        org.junit.Assert.assertNotNull(strPredicate74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-7) + "'", int75 == (-7));
        org.junit.Assert.assertNotNull(objComparator76);
        org.junit.Assert.assertNotNull(objComparator79);
        org.junit.Assert.assertNotNull(strPredicate81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(objComparator84);
        org.junit.Assert.assertNotNull(objComparator85);
        org.junit.Assert.assertNotNull(objComparator86);
        org.junit.Assert.assertNotNull(objComparator87);
        org.junit.Assert.assertNotNull(objComparator88);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((-10));
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream12 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream13 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass16 = strPredicate15.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector17 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass16);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier18 = objArrayCollector17.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector17.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer20 = objArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = objArrayCollector17.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier22 = objArrayCollector17.supplier();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray23 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNull(objectToStringComparatorStream12);
        org.junit.Assert.assertNull(objectToStringComparatorStream13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objListSupplier18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(objListSupplier22);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        java.lang.Class<org.apache.commons.lang3.event.EventUtils[]> eventUtilsArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.event.EventUtils[]> eventUtilsArrayArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.event.EventUtils[]>(eventUtilsArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[][] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray1 = new java.lang.reflect.GenericDeclaration[][] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray2 = new java.lang.reflect.GenericDeclaration[][] {};
        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray3 = new java.lang.reflect.GenericDeclaration[][][] { genericDeclarationArray0, genericDeclarationArray1, genericDeclarationArray2 };
        java.lang.reflect.GenericDeclaration[][][][] genericDeclarationArray4 = new java.lang.reflect.GenericDeclaration[][][][] { genericDeclarationArray3 };
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayStream5 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray4);
        java.util.stream.Stream<java.io.Serializable[][]> serializableArrayStream6 = org.apache.commons.lang3.stream.Streams.of((java.io.Serializable[][][]) genericDeclarationArray4);
        java.util.stream.Stream<java.lang.Cloneable> cloneableStream7 = org.apache.commons.lang3.stream.Streams.of((java.lang.Cloneable[]) genericDeclarationArray4);
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNotNull(genericDeclarationArray1);
        org.junit.Assert.assertNotNull(genericDeclarationArray2);
        org.junit.Assert.assertNotNull(genericDeclarationArray3);
        org.junit.Assert.assertNotNull(genericDeclarationArray4);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream5);
        org.junit.Assert.assertNotNull(serializableArrayStream6);
        org.junit.Assert.assertNotNull(cloneableStream7);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean20 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream3 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream4 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsStream3);
        org.junit.Assert.assertNotNull(characteristicsStream4);
    }
}
