/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 14 02:07:24 GMT 2022
 */

package org.apache.commons.lang3.functionEvoSuite;

import org.junit.Ignore;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.lang.reflect.Array;
import java.lang.reflect.UndeclaredThrowableException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.concurrent.Callable;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BiPredicate;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.DoubleStream;
import java.util.stream.Stream;
import org.apache.commons.lang3.function.Failable;
import org.apache.commons.lang3.function.FailableBiConsumer;
import org.apache.commons.lang3.function.FailableBiFunction;
import org.apache.commons.lang3.function.FailableBiPredicate;
import org.apache.commons.lang3.function.FailableBooleanSupplier;
import org.apache.commons.lang3.function.FailableCallable;
import org.apache.commons.lang3.function.FailableConsumer;
import org.apache.commons.lang3.function.FailableDoubleBinaryOperator;
import org.apache.commons.lang3.function.FailableDoubleConsumer;
import org.apache.commons.lang3.function.FailableDoubleSupplier;
import org.apache.commons.lang3.function.FailableFunction;
import org.apache.commons.lang3.function.FailableIntConsumer;
import org.apache.commons.lang3.function.FailableIntSupplier;
import org.apache.commons.lang3.function.FailableLongConsumer;
import org.apache.commons.lang3.function.FailableLongSupplier;
import org.apache.commons.lang3.function.FailablePredicate;
import org.apache.commons.lang3.function.FailableRunnable;
import org.apache.commons.lang3.function.FailableShortSupplier;
import org.apache.commons.lang3.function.FailableSupplier;
import org.apache.commons.lang3.stream.Streams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Failable_ESTest extends Failable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableRunnable<Throwable> failableRunnable1 = (FailableRunnable<Throwable>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableRunnable<IOException>[] failableRunnableArray0 = (FailableRunnable<IOException>[]) Array.newInstance(FailableRunnable.class, 3);
      failableRunnableArray0[0] = failableRunnable0;
      failableRunnableArray0[1] = failableRunnable0;
      failableRunnableArray0[2] = failableRunnable0;
      Failable.tryWithResources(failableRunnable1, failableRunnableArray0);
      assertEquals(3, failableRunnableArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FailableDoubleBinaryOperator<RuntimeException> failableDoubleBinaryOperator0 = (FailableDoubleBinaryOperator<RuntimeException>) mock(FailableDoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(failableDoubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      double double0 = Failable.applyAsDouble(failableDoubleBinaryOperator0, 0.0, 2780.0998032748603);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FailableConsumer<Throwable, RuntimeException> failableConsumer0 = FailableConsumer.nop();
      Failable.tryWithResources((FailableRunnable<? extends Throwable>) null, failableConsumer0, (FailableRunnable<? extends Throwable>[]) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FailablePredicate<Object, Error> failablePredicate0 = FailablePredicate.truePredicate();
      boolean boolean0 = Failable.test(failablePredicate0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FailableBiPredicate<Throwable, Integer, RuntimeException> failableBiPredicate0 = FailableBiPredicate.falsePredicate();
      FailableBiPredicate<Throwable, Integer, RuntimeException> failableBiPredicate1 = failableBiPredicate0.negate();
      MockIOException mockIOException0 = new MockIOException();
      Integer integer0 = new Integer((-294));
      boolean boolean0 = Failable.test(failableBiPredicate1, (Throwable) mockIOException0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FailableShortSupplier<Error> failableShortSupplier0 = (FailableShortSupplier<Error>) mock(FailableShortSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((short)1047).when(failableShortSupplier0).getAsShort();
      short short0 = Failable.getAsShort(failableShortSupplier0);
      assertEquals((short)1047, short0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FailableShortSupplier<Throwable> failableShortSupplier0 = (FailableShortSupplier<Throwable>) mock(FailableShortSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((short) (-1)).when(failableShortSupplier0).getAsShort();
      short short0 = Failable.getAsShort(failableShortSupplier0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FailableLongSupplier<RuntimeException> failableLongSupplier0 = (FailableLongSupplier<RuntimeException>) mock(FailableLongSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(3044L).when(failableLongSupplier0).getAsLong();
      long long0 = Failable.getAsLong(failableLongSupplier0);
      assertEquals(3044L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FailableLongSupplier<RuntimeException> failableLongSupplier0 = (FailableLongSupplier<RuntimeException>) mock(FailableLongSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((-1049L)).when(failableLongSupplier0).getAsLong();
      long long0 = Failable.getAsLong(failableLongSupplier0);
      assertEquals((-1049L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FailableIntSupplier<Throwable> failableIntSupplier0 = (FailableIntSupplier<Throwable>) mock(FailableIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(failableIntSupplier0).getAsInt();
      int int0 = Failable.getAsInt(failableIntSupplier0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FailableIntSupplier<IOException> failableIntSupplier0 = (FailableIntSupplier<IOException>) mock(FailableIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(2036).when(failableIntSupplier0).getAsInt();
      int int0 = Failable.getAsInt(failableIntSupplier0);
      assertEquals(2036, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FailableIntSupplier<RuntimeException> failableIntSupplier0 = (FailableIntSupplier<RuntimeException>) mock(FailableIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(failableIntSupplier0).getAsInt();
      int int0 = Failable.getAsInt(failableIntSupplier0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FailableDoubleSupplier<IOException> failableDoubleSupplier0 = (FailableDoubleSupplier<IOException>) mock(FailableDoubleSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(1979.730160953).when(failableDoubleSupplier0).getAsDouble();
      double double0 = Failable.getAsDouble(failableDoubleSupplier0);
      assertEquals(1979.730160953, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FailableDoubleSupplier<IOException> failableDoubleSupplier0 = (FailableDoubleSupplier<IOException>) mock(FailableDoubleSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((-2502.756)).when(failableDoubleSupplier0).getAsDouble();
      double double0 = Failable.getAsDouble(failableDoubleSupplier0);
      assertEquals((-2502.756), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FailableBooleanSupplier<RuntimeException> failableBooleanSupplier0 = (FailableBooleanSupplier<RuntimeException>) mock(FailableBooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(failableBooleanSupplier0).getAsBoolean();
      boolean boolean0 = Failable.getAsBoolean(failableBooleanSupplier0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("OyH]TrirFERmC;$e");
      FailableSupplier<RuntimeException, IOException> failableSupplier0 = (FailableSupplier<RuntimeException, IOException>) mock(FailableSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(mockRuntimeException0).when(failableSupplier0).get();
      RuntimeException runtimeException0 = Failable.get(failableSupplier0);
      assertSame(runtimeException0, mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      FailableCallable<RuntimeException, Error> failableCallable0 = (FailableCallable<RuntimeException, Error>) mock(FailableCallable.class, new ViolatedAssumptionAnswer());
      doReturn(mockRuntimeException0).when(failableCallable0).call();
      RuntimeException runtimeException0 = Failable.call(failableCallable0);
      assertSame(mockRuntimeException0, runtimeException0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FailableDoubleBinaryOperator<Error> failableDoubleBinaryOperator0 = (FailableDoubleBinaryOperator<Error>) mock(FailableDoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.37777107381469155).when(failableDoubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      double double0 = Failable.applyAsDouble(failableDoubleBinaryOperator0, (-1.0), (-1.0));
      assertEquals(0.37777107381469155, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FailableDoubleBinaryOperator<RuntimeException> failableDoubleBinaryOperator0 = (FailableDoubleBinaryOperator<RuntimeException>) mock(FailableDoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn((-2235.051917)).when(failableDoubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      double double0 = Failable.applyAsDouble(failableDoubleBinaryOperator0, 0.0, 0.0);
      assertEquals((-2235.051917), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      FailableFunction<String, Error, Throwable> failableFunction0 = FailableFunction.nop();
      MockError mockError0 = new MockError(mockIOException0);
      FailableFunction<Object, Error, Throwable> failableFunction1 = (FailableFunction<Object, Error, Throwable>) mock(FailableFunction.class, new ViolatedAssumptionAnswer());
      doReturn(mockError0).when(failableFunction1).apply(any());
      FailableFunction<String, Error, Throwable> failableFunction2 = failableFunction0.andThen((FailableFunction<? super Error, ? extends Error, Throwable>) failableFunction1);
      Error error0 = Failable.apply(failableFunction2, "\";x");
      assertSame(mockError0, error0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FailableBiFunction<IOException, String, String, Throwable> failableBiFunction0 = FailableBiFunction.nop();
      MockIOException mockIOException0 = new MockIOException();
      String string0 = Failable.apply(failableBiFunction0, (IOException) mockIOException0, "`;A<");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        Failable.test((FailablePredicate<Integer, Error>) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      UnaryOperator<IOException> unaryOperator0 = UnaryOperator.identity();
      Stream<IOException> stream0 = Stream.iterate((IOException) mockIOException0, unaryOperator0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        Failable.test((FailableBiPredicate<Stream<IOException>, Integer, IOException>) null, stream0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.stream((Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.run((FailableRunnable<RuntimeException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.rethrow((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // throwable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.getAsShort((FailableShortSupplier<Error>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.getAsLong((FailableLongSupplier<Error>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.getAsDouble((FailableDoubleSupplier<RuntimeException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.getAsBoolean((FailableBooleanSupplier<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.get((FailableSupplier<Integer, RuntimeException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Ignore
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.call((FailableCallable<Error, Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.applyAsDouble((FailableDoubleBinaryOperator<RuntimeException>) null, 1.0, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.apply((FailableFunction<Object, Object, Error>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.accept((FailableLongConsumer<Error>) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.accept((FailableIntConsumer<Error>) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.accept((FailableDoubleConsumer<Error>) null, (-846.854203024039));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockError mockError0 = new MockError("M[aJKL5hbuX9Y'9q", mockThrowable0);
      // Undeclared exception!
      try { 
        Failable.accept((FailableConsumer<Throwable, RuntimeException>) null, (Throwable) mockError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        Failable.accept((FailableBiConsumer<Object, Error, RuntimeException>) null, (Object) null, (Error) mockError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.tryWithResources((FailableRunnable<? extends Throwable>) null, (FailableConsumer<Throwable, ? extends Throwable>) null, (FailableRunnable<? extends Throwable>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FailableRunnable<RuntimeException> failableRunnable0 = (FailableRunnable<RuntimeException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableConsumer<Throwable, Error> failableConsumer0 = FailableConsumer.nop();
      FailableRunnable<RuntimeException>[] failableRunnableArray0 = (FailableRunnable<RuntimeException>[]) Array.newInstance(FailableRunnable.class, 2);
      failableRunnableArray0[0] = failableRunnable0;
      failableRunnableArray0[1] = failableRunnable0;
      Failable.tryWithResources(failableRunnable0, failableConsumer0, failableRunnableArray0);
      assertEquals(2, failableRunnableArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FailableRunnable<RuntimeException> failableRunnable0 = (FailableRunnable<RuntimeException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableConsumer<Throwable, Error> failableConsumer0 = FailableConsumer.nop();
      FailableRunnable<RuntimeException>[] failableRunnableArray0 = (FailableRunnable<RuntimeException>[]) Array.newInstance(FailableRunnable.class, 2);
      // Undeclared exception!
      try { 
        Failable.tryWithResources(failableRunnable0, failableConsumer0, failableRunnableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // runnable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("");
      // Undeclared exception!
      try { 
        Failable.rethrow(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FailableBooleanSupplier<IOException> failableBooleanSupplier0 = (FailableBooleanSupplier<IOException>) mock(FailableBooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(failableBooleanSupplier0).getAsBoolean();
      boolean boolean0 = Failable.getAsBoolean(failableBooleanSupplier0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      Failable.run(failableRunnable0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FailableDoubleSupplier<RuntimeException> failableDoubleSupplier0 = (FailableDoubleSupplier<RuntimeException>) mock(FailableDoubleSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(failableDoubleSupplier0).getAsDouble();
      double double0 = Failable.getAsDouble(failableDoubleSupplier0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FailableSupplier<Integer, RuntimeException> failableSupplier0 = (FailableSupplier<Integer, RuntimeException>) mock(FailableSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(failableSupplier0).get();
      Integer integer0 = Failable.get(failableSupplier0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.tryWithResources((FailableRunnable<? extends Throwable>) null, (FailableRunnable<? extends Throwable>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        Failable.rethrow(mockIOException0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("throwable");
      // Undeclared exception!
      try { 
        Failable.rethrow(mockThrowable0);
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        Failable.rethrow(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BiConsumer<Integer, String> biConsumer0 = Failable.asBiConsumer((FailableBiConsumer<Integer, String, ?>) null);
      assertNotNull(biConsumer0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FailableCallable<Integer, RuntimeException> failableCallable0 = (FailableCallable<Integer, RuntimeException>) mock(FailableCallable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(failableCallable0).call();
      Integer integer0 = Failable.call(failableCallable0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FailableConsumer<Throwable, Error> failableConsumer0 = FailableConsumer.nop();
      Consumer<Throwable> consumer0 = Failable.asConsumer((FailableConsumer<Throwable, ?>) failableConsumer0);
      assertNotNull(consumer0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FailableBiPredicate<String, String, RuntimeException> failableBiPredicate0 = FailableBiPredicate.falsePredicate();
      BiPredicate<String, String> biPredicate0 = Failable.asBiPredicate((FailableBiPredicate<String, String, ?>) failableBiPredicate0);
      assertNotNull(biPredicate0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FailableRunnable<RuntimeException> failableRunnable0 = (FailableRunnable<RuntimeException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      Runnable runnable0 = Failable.asRunnable(failableRunnable0);
      assertNotNull(runnable0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FailableCallable<Object, Throwable> failableCallable0 = (FailableCallable<Object, Throwable>) mock(FailableCallable.class, new ViolatedAssumptionAnswer());
      Callable<Object> callable0 = Failable.asCallable((FailableCallable<Object, ?>) failableCallable0);
      assertNotNull(callable0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Streams.FailableStream<Object> streams_FailableStream0 = Failable.stream((Collection<Object>) linkedList0);
      assertNotNull(streams_FailableStream0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FailableIntConsumer<IOException> failableIntConsumer0 = FailableIntConsumer.nop();
      Failable.accept(failableIntConsumer0, 0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FailableLongConsumer<Error> failableLongConsumer0 = FailableLongConsumer.nop();
      Failable.accept(failableLongConsumer0, (long)  (-2950));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BiFunction<RuntimeException, Error, Throwable> biFunction0 = Failable.asBiFunction((FailableBiFunction<RuntimeException, Error, Throwable, ?>) null);
      assertNotNull(biFunction0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockIOException0);
      FailablePredicate<RuntimeException, IOException> failablePredicate0 = FailablePredicate.falsePredicate();
      boolean boolean0 = Failable.test(failablePredicate0, (RuntimeException) mockRuntimeException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      FailableBiPredicate<String, Throwable, Error> failableBiPredicate0 = FailableBiPredicate.falsePredicate();
      boolean boolean0 = Failable.test(failableBiPredicate0, (String) null, (Throwable) mockRuntimeException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FailableFunction<Object, RuntimeException, Throwable> failableFunction0 = FailableFunction.nop();
      Function<Object, RuntimeException> function0 = Failable.asFunction((FailableFunction<Object, RuntimeException, ?>) failableFunction0);
      assertNotNull(function0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FailablePredicate<Object, RuntimeException> failablePredicate0 = FailablePredicate.falsePredicate();
      Predicate<Object> predicate0 = Failable.asPredicate((FailablePredicate<Object, ?>) failablePredicate0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FailableDoubleConsumer<RuntimeException> failableDoubleConsumer0 = FailableDoubleConsumer.nop();
      Failable.accept(failableDoubleConsumer0, (double) 1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FailableLongSupplier<RuntimeException> failableLongSupplier0 = (FailableLongSupplier<RuntimeException>) mock(FailableLongSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(failableLongSupplier0).getAsLong();
      long long0 = Failable.getAsLong(failableLongSupplier0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("\".K+K_vcOr:,.z5Ay");
      MockError mockError0 = new MockError(mockRuntimeException0);
      FailableBiConsumer<Stream<RuntimeException>, Throwable, Error> failableBiConsumer0 = FailableBiConsumer.nop();
      RuntimeException[] runtimeExceptionArray0 = new RuntimeException[1];
      Stream<RuntimeException> stream0 = Stream.of(runtimeExceptionArray0);
      Failable.accept(failableBiConsumer0, stream0, (Throwable) mockError0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FailableRunnable<RuntimeException> failableRunnable0 = (FailableRunnable<RuntimeException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableRunnable<RuntimeException>[] failableRunnableArray0 = (FailableRunnable<RuntimeException>[]) Array.newInstance(FailableRunnable.class, 1);
      // Undeclared exception!
      try { 
        Failable.tryWithResources(failableRunnable0, failableRunnableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // runnable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FailableConsumer<Error, Error> failableConsumer0 = FailableConsumer.nop();
      MockError mockError0 = new MockError();
      Failable.accept(failableConsumer0, (Error) mockError0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.getAsInt((FailableIntSupplier<Error>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FailableFunction<Integer, Error, Error> failableFunction0 = FailableFunction.nop();
      Integer integer0 = new Integer((-2478));
      Error error0 = Failable.apply(failableFunction0, integer0);
      assertNull(error0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FailableShortSupplier<RuntimeException> failableShortSupplier0 = (FailableShortSupplier<RuntimeException>) mock(FailableShortSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((short)0).when(failableShortSupplier0).getAsShort();
      short short0 = Failable.getAsShort(failableShortSupplier0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      MockError mockError0 = new MockError(mockIOException0);
      // Undeclared exception!
      try { 
        Failable.apply((FailableBiFunction<Throwable, Throwable, Integer, Throwable>) null, (Throwable) mockThrowable0, (Throwable) mockError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FailableSupplier<DoubleStream, RuntimeException> failableSupplier0 = (FailableSupplier<DoubleStream, RuntimeException>) mock(FailableSupplier.class, new ViolatedAssumptionAnswer());
      Supplier<DoubleStream> supplier0 = Failable.asSupplier((FailableSupplier<DoubleStream, ?>) failableSupplier0);
      Stream<DoubleStream> stream0 = Stream.generate(supplier0);
      Streams.FailableStream<DoubleStream> streams_FailableStream0 = Failable.stream(stream0);
      assertNotNull(streams_FailableStream0);
  }
}
