package org.apache.commons.lang3.WillRandoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.jupiter.api.Disabled;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.lang.Class<java.io.Serializable> serializableClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.io.Serializable> serializableEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.io.Serializable>(serializableClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.lang.Class<java.lang.String> strClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.String> strEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.String>(strClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        java.lang.String str2 = org.apache.commons.lang3.compare.ComparableUtils.min("", "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.ge("hi!");
        org.junit.Assert.assertNotNull(strPredicate1);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.apache.commons.lang3.stream.IntStreams intStreams0 = new org.apache.commons.lang3.stream.IntStreams();
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.lang.Class<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>>(strComparableCheckBuilderClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("");
        org.junit.Assert.assertNotNull(strPredicate1);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        java.lang.Class<org.apache.commons.lang3.stream.Streams> streamsClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.stream.Streams> streamsArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.stream.Streams>(streamsClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.le("");
        org.junit.Assert.assertNotNull(strPredicate1);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        java.lang.Class<java.lang.CharSequence> charSequenceClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.CharSequence> charSequenceEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.CharSequence>(charSequenceClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        java.lang.Class<java.io.Serializable> serializableClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.io.Serializable> serializableArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.io.Serializable>(serializableClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        java.util.function.Predicate<java.lang.String> strPredicate2 = org.apache.commons.lang3.compare.ComparableUtils.between("hi!", "hi!");
        org.junit.Assert.assertNotNull(strPredicate2);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.apache.commons.lang3.event.EventUtils eventUtils0 = new org.apache.commons.lang3.event.EventUtils();
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        java.lang.String str2 = org.apache.commons.lang3.compare.ComparableUtils.min("", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator5 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator3, objectToStringComparatorBinaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(objectToStringComparator3);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed(1);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        java.lang.String str2 = org.apache.commons.lang3.compare.ComparableUtils.max("hi!", "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        java.lang.Class<java.util.stream.IntStream> intStreamClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.stream.IntStream> intStreamEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.stream.IntStream>(intStreamClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        java.util.stream.Stream<java.lang.String> strStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.String> strFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.String>(strStream0);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        java.lang.String str2 = org.apache.commons.lang3.compare.ComparableUtils.min("hi!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator2 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator3 = objectToStringComparator2.reversed();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator5 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator2, objectToStringComparatorBinaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objComparator3);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        java.lang.String str2 = org.apache.commons.lang3.compare.ComparableUtils.min("hi!", "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator3, objectToStringComparatorBinaryOperator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(objectToStringComparator3);
        org.junit.Assert.assertNotNull(objComparator4);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        java.lang.String str2 = org.apache.commons.lang3.compare.ComparableUtils.max("", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((int) (short) 100);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        java.lang.Class<java.util.Comparator<java.lang.Object>> objComparatorClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.Comparator<java.lang.Object>> objComparatorArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.Comparator<java.lang.Object>>(objComparatorClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range((int) (byte) 100);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        java.lang.Class<java.lang.Comparable<java.lang.String>> strComparableClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.Comparable<java.lang.String>> strComparableEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.Comparable<java.lang.String>>(strComparableClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        java.lang.Class<org.apache.commons.lang3.stream.IntStreams> intStreamsClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.stream.IntStreams> intStreamsEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.stream.IntStreams>(intStreamsClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        java.lang.String str2 = org.apache.commons.lang3.compare.ComparableUtils.max("hi!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        java.util.function.Predicate<java.lang.String> strPredicate2 = org.apache.commons.lang3.compare.ComparableUtils.between("hi!", "");
        org.junit.Assert.assertNotNull(strPredicate2);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed(10);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((int) (short) 0);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        java.lang.Class<java.lang.reflect.GenericDeclaration> genericDeclarationClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.GenericDeclaration> genericDeclarationEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.GenericDeclaration>(genericDeclarationClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        java.lang.Class<org.apache.commons.lang3.event.EventUtils> eventUtilsClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.event.EventUtils> eventUtilsEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.event.EventUtils>(eventUtilsClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.le("hi!");
        org.junit.Assert.assertNotNull(strPredicate1);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range((int) (short) 0);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        java.lang.Class<java.util.function.Predicate<java.lang.String>> strPredicateClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.function.Predicate<java.lang.String>> strPredicateEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.function.Predicate<java.lang.String>>(strPredicateClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        java.util.function.Predicate<java.lang.String> strPredicate2 = org.apache.commons.lang3.compare.ComparableUtils.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strPredicate2);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.ge("");
        org.junit.Assert.assertNotNull(strPredicate1);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        java.lang.Class<java.util.Comparator<java.lang.Object>> objComparatorClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.Comparator<java.lang.Object>> objComparatorEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.Comparator<java.lang.Object>>(objComparatorClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        java.util.function.Predicate<java.lang.String> strPredicate2 = org.apache.commons.lang3.compare.ComparableUtils.between("", "hi!");
        org.junit.Assert.assertNotNull(strPredicate2);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        java.lang.Class<java.lang.CharSequence> charSequenceClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.CharSequence> charSequenceEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.CharSequence>(charSequenceClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate7 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass8 = strPredicate7.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        java.lang.Class[] classArray13 = new java.lang.Class[4];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray14 = (java.lang.Class<?>[]) classArray13;
        wildcardClassArray14[0] = wildcardClass2;
        wildcardClassArray14[1] = wildcardClass5;
        wildcardClassArray14[2] = wildcardClass8;
        wildcardClassArray14[3] = wildcardClass11;
        java.util.stream.Stream<java.lang.Class<?>> wildcardClassStream23 = org.apache.commons.lang3.stream.Streams.of(wildcardClassArray14);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassStream23);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray3 = new java.lang.reflect.GenericDeclaration[] { wildcardClass2 };
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration> genericDeclarationStream4 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray3);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(genericDeclarationArray3);
        org.junit.Assert.assertNotNull(genericDeclarationStream4);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        java.util.function.Predicate<java.lang.String> strPredicate2 = org.apache.commons.lang3.compare.ComparableUtils.betweenExclusive("", "");
        org.junit.Assert.assertNotNull(strPredicate2);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        java.lang.Class<java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>>> strComparableCheckBuilderStreamClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>>> strComparableCheckBuilderStreamArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>>>(strComparableCheckBuilderStreamClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator5 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator5.reversed();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator5, objectToStringComparatorBinaryOperator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(objectToStringComparator5);
        org.junit.Assert.assertNotNull(objComparator6);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "", "hi!", "hi!", "", "" };
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream7 = org.apache.commons.lang3.stream.Streams.of(charSequenceArray6);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertNotNull(charSequenceStream7);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        java.lang.Class<java.lang.Class<?>[]> wildcardClassArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Class<?>[]> wildcardClassArrayArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Class<?>[]>(wildcardClassArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        java.lang.Class<org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>> objectToStringComparatorFailableStreamClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>> objectToStringComparatorFailableStreamEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>>(objectToStringComparatorFailableStreamClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        java.io.Serializable[] serializableArray6 = new java.io.Serializable[] { 1.0d, (-1L), '#', (-7), "hi!", 1.0f };
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = org.apache.commons.lang3.stream.Streams.of(serializableArray6);
        org.junit.Assert.assertNotNull(serializableArray6);
        org.junit.Assert.assertNotNull(serializableStream7);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator5 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj10 = null;
        int int11 = objectToStringComparator6.compare((java.lang.Object) "hi!", obj10);
        java.util.Comparator<java.lang.Object> objComparator12 = objectToStringComparator5.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator6);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator6, objectToStringComparatorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(objComparator12);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator5 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator5.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams9 = new org.apache.commons.lang3.stream.Streams();
        int int10 = objectToStringComparator5.compare((java.lang.Object) strPredicate8, (java.lang.Object) streams9);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder12 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int15 = objectToStringComparator5.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate14);
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator5.reversed();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator18 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator5, objectToStringComparatorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(objComparator6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-16) + "'", int10 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder12);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-7) + "'", int15 == (-7));
        org.junit.Assert.assertNotNull(objComparator16);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((int) (byte) 10);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        java.lang.Class<java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>>> strComparableCheckBuilderStreamClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>>> strComparableCheckBuilderStreamEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>>>(strComparableCheckBuilderStreamClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range(5);
        org.junit.Assert.assertNotNull(intStream1);
    }

//    @Disabled
//    @Test
//    public void test0058() throws Throwable {
//        if (debug)
//            System.out.format("%n%s%n", "RegressionTest0.test0058");
//        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
//        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
//        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
//        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator4 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator5 = objectToStringComparator4.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate7 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj8 = null;
//        int int9 = objectToStringComparator4.compare((java.lang.Object) "hi!", obj8);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder11 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        boolean boolean14 = strComparableCheckBuilder11.betweenExclusive("", "");
//        boolean boolean16 = strComparableCheckBuilder11.greaterThan("");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator17 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator18 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator18.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate21 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj22 = null;
//        int int23 = objectToStringComparator18.compare((java.lang.Object) "hi!", obj22);
//        java.util.Comparator<java.lang.Object> objComparator24 = objectToStringComparator17.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator18);
//        int int25 = objectToStringComparator4.compare((java.lang.Object) "", (java.lang.Object) objComparator24);
//        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator26 = null;
//        // The following exception was thrown during execution in test generation
//        try {
//            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator27 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator4, objectToStringComparatorBinaryOperator26);
//            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
//        } catch (java.lang.NullPointerException e) {
//            // Expected exception.
//        }
//        org.junit.Assert.assertNull(objectToStringComparatorStream2);
//        org.junit.Assert.assertNull(objectToStringComparatorStream3);
//        org.junit.Assert.assertNotNull(objComparator5);
//        org.junit.Assert.assertNotNull(strPredicate7);
//        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder11);
//        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
//        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
//        org.junit.Assert.assertNotNull(objComparator19);
//        org.junit.Assert.assertNotNull(strPredicate21);
//        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
//        org.junit.Assert.assertNotNull(objComparator24);
//        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-50) + "'", int25 == (-50));
//    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        java.lang.Class<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.GenericDeclaration[][]>(genericDeclarationArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        java.lang.Class<org.apache.commons.lang3.stream.IntStreams> intStreamsClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.stream.IntStreams> intStreamsArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.stream.IntStreams>(intStreamsClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((-16));
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.lang.Class<?> wildcardClass13 = objectToStringComparator0.getClass();
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        java.util.stream.Stream<java.lang.AutoCloseable> autoCloseableStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.AutoCloseable> autoCloseableFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.AutoCloseable>(autoCloseableStream0);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator6, objectToStringComparatorBinaryOperator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNotNull(objectToStringComparator6);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed(5);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Collection[] collectionArray8 = new java.util.Collection[1];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.util.stream.Collector.Characteristics>[] characteristicsCollectionArray9 = (java.util.Collection<java.util.stream.Collector.Characteristics>[]) collectionArray8;
        characteristicsCollectionArray9[0] = characteristicsSet6;
        java.util.stream.Stream<java.util.Collection<java.util.stream.Collector.Characteristics>> characteristicsCollectionStream12 = org.apache.commons.lang3.stream.Streams.of(characteristicsCollectionArray9);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(collectionArray8);
        org.junit.Assert.assertNotNull(characteristicsCollectionArray9);
        org.junit.Assert.assertNotNull(characteristicsCollectionStream12);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Predicate<java.lang.String> strPredicate5 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass6 = strPredicate5.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass9 = strPredicate8.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass12 = strPredicate11.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass18 = strPredicate17.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray19 = new java.lang.reflect.GenericDeclaration[] { wildcardClass6, wildcardClass9, wildcardClass12, wildcardClass15, wildcardClass18 };
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray20 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray19 };
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayStream21 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray20);
        java.lang.Class<?> wildcardClass22 = genericDeclarationArray20.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass25 = strPredicate24.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate27 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass28 = strPredicate27.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate30 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass31 = strPredicate30.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate33 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass34 = strPredicate33.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate36 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass37 = strPredicate36.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray38 = new java.lang.reflect.GenericDeclaration[] { wildcardClass25, wildcardClass28, wildcardClass31, wildcardClass34, wildcardClass37 };
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray39 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray38 };
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayStream40 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray39);
        java.lang.Class<?> wildcardClass41 = genericDeclarationArray39.getClass();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder43 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean45 = strComparableCheckBuilder43.greaterThan("hi!");
        boolean boolean48 = strComparableCheckBuilder43.betweenExclusive("", "");
        boolean boolean50 = strComparableCheckBuilder43.equalTo("hi!");
        boolean boolean52 = strComparableCheckBuilder43.lessThan("");
        boolean boolean54 = strComparableCheckBuilder43.lessThan("");
        boolean boolean56 = strComparableCheckBuilder43.lessThanOrEqualTo("");
        boolean boolean59 = strComparableCheckBuilder43.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder61 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean63 = strComparableCheckBuilder61.greaterThan("hi!");
        boolean boolean66 = strComparableCheckBuilder61.betweenExclusive("", "");
        boolean boolean68 = strComparableCheckBuilder61.equalTo("hi!");
        boolean boolean70 = strComparableCheckBuilder61.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder72 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean74 = strComparableCheckBuilder72.greaterThan("hi!");
        boolean boolean77 = strComparableCheckBuilder72.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder79 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean81 = strComparableCheckBuilder79.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray83 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray84 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray83;
        strComparableCheckBuilderArray84[0] = strComparableCheckBuilder43;
        strComparableCheckBuilderArray84[1] = strComparableCheckBuilder61;
        strComparableCheckBuilderArray84[2] = strComparableCheckBuilder72;
        strComparableCheckBuilderArray84[3] = strComparableCheckBuilder79;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream93 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray84);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream94 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream93);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream95 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream93);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream96 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream93);
        java.lang.Class<?> wildcardClass97 = strComparableCheckBuilderFailableStream96.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray98 = new java.lang.reflect.GenericDeclaration[] { wildcardClass2, wildcardClass22, wildcardClass41, wildcardClass97 };
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration> genericDeclarationStream99 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray98);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strPredicate5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(genericDeclarationArray19);
        org.junit.Assert.assertNotNull(genericDeclarationArray20);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strPredicate33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(genericDeclarationArray38);
        org.junit.Assert.assertNotNull(genericDeclarationArray39);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray83);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray84);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream93);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream94);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream95);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream96);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertNotNull(genericDeclarationArray98);
        org.junit.Assert.assertNotNull(genericDeclarationStream99);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "hi!" };
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream5 = org.apache.commons.lang3.stream.Streams.of((java.lang.Comparable<java.lang.String>[]) strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strComparableStream5);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        java.lang.Class<org.apache.commons.lang3.event.EventUtils[]> eventUtilsArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.event.EventUtils[]> eventUtilsArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.event.EventUtils[]>(eventUtilsArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        java.lang.Class<java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>>> strComparableCheckBuilderStreamClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>>> strComparableCheckBuilderStreamEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>>>(strComparableCheckBuilderStreamClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        java.lang.String str2 = org.apache.commons.lang3.compare.ComparableUtils.max("", "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>> objCollectorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>> objCollectorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>>(objCollectorStream0);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean16 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate5 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass6 = strPredicate5.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector7 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass6);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector7.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector12 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass11);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier13 = objArrayCollector12.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction14 = objArrayCollector12.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer15 = objArrayCollector12.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer16 = objArrayCollector12.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList18 = objectToStringComparatorFailableStream1.collect(objListSupplier8, objListBiConsumer16, objListBiConsumer17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(strPredicate5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(objListSupplier13);
        org.junit.Assert.assertNotNull(objListFunction14);
        org.junit.Assert.assertNotNull(objListBiConsumer15);
        org.junit.Assert.assertNotNull(objListBiConsumer16);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate5 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass6 = strPredicate5.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector7 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass6);
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector7.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector7.combiner();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray10 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(strPredicate5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(objListFunction8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        java.lang.Class<java.util.function.Supplier<java.util.List<java.lang.Object>>> objListSupplierClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.function.Supplier<java.util.List<java.lang.Object>>> objListSupplierEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.function.Supplier<java.util.List<java.lang.Object>>>(objListSupplierClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        java.lang.Class<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        java.util.stream.Stream<java.lang.Object> objStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.Object> objFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.Object>(objStream0);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector8 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass7);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector8.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction10 = objArrayCollector8.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator11 = objArrayCollector8.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector8.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction18 = objArrayCollector16.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = objArrayCollector16.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer20 = objArrayCollector16.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer21 = objArrayCollector16.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList23 = objectToStringComparatorFailableStream1.collect(objListSupplier12, objListBiConsumer21, objListBiConsumer22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListFunction10);
        org.junit.Assert.assertNotNull(objListBinaryOperator11);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListFunction18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(objListBiConsumer20);
        org.junit.Assert.assertNotNull(objListBiConsumer21);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        java.util.Collection<java.util.stream.Collector.Characteristics> characteristicsCollection0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream1 = org.apache.commons.lang3.stream.Streams.failableStream(characteristicsCollection0);
        org.junit.Assert.assertNotNull(characteristicsFailableStream1);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass4 = strPredicate3.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector5 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass4);
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction6 = objArrayCollector5.finisher();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray7 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(objListFunction6);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed(3);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector8 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass7);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector8.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction10 = objArrayCollector8.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer11 = objArrayCollector8.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer12 = objArrayCollector8.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier13 = objArrayCollector8.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer14 = null;
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList16 = objectToStringComparatorFailableStream1.collect(objListSupplier13, objListBiConsumer14, objListBiConsumer15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListFunction10);
        org.junit.Assert.assertNotNull(objListBiConsumer11);
        org.junit.Assert.assertNotNull(objListBiConsumer12);
        org.junit.Assert.assertNotNull(objListSupplier13);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        java.util.Collection<java.util.stream.Collector.Characteristics> characteristicsCollection0 = null;
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream1 = org.apache.commons.lang3.stream.Streams.nullSafeStream(characteristicsCollection0);
        org.junit.Assert.assertNotNull(characteristicsStream1);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj7 = null;
        int int8 = objectToStringComparator3.compare((java.lang.Object) "hi!", obj7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator9.reversed();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator3.thenComparing(objComparator10);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder13 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean15 = strComparableCheckBuilder13.greaterThan("hi!");
        boolean boolean17 = strComparableCheckBuilder13.greaterThanOrEqualTo("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate20 = org.apache.commons.lang3.compare.ComparableUtils.between("", "");
        int int21 = objectToStringComparator3.compare((java.lang.Object) boolean17, (java.lang.Object) strPredicate20);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator23 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator3, objectToStringComparatorBinaryOperator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        java.lang.Class<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.GenericDeclaration[][][]>(genericDeclarationArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector11.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator13 = objArrayCollector11.combiner();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray14 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objListBinaryOperator13);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        java.lang.Class<java.lang.reflect.Type> typeClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.Type> typeEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.Type>(typeClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        java.lang.Class<?> wildcardClass15 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        java.lang.Class<java.lang.String[]> strArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.String[]> strArrayArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.String[]>(strArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((-1));
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        java.lang.Class<java.util.function.BiFunction<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>, java.util.List<java.lang.Object>>> objListBiFunctionClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.function.BiFunction<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>, java.util.List<java.lang.Object>>> objListBiFunctionEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.function.BiFunction<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>, java.util.List<java.lang.Object>>>(objListBiFunctionClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean9 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean11 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean13 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator4 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator5 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator5.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj9 = null;
        int int10 = objectToStringComparator5.compare((java.lang.Object) "hi!", obj9);
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator4.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator5);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator4, objectToStringComparatorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(objComparator6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(objComparator11);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        java.util.stream.Stream<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>> intBaseStreamStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>> intBaseStreamFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>>(intBaseStreamStream0);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range((-62));
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector8 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass7);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector8.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass12 = strPredicate11.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector13 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier14 = objArrayCollector13.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction15 = objArrayCollector13.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = objArrayCollector13.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer17 = objArrayCollector13.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList19 = objectToStringComparatorFailableStream1.collect(objListSupplier9, objListBiConsumer17, objListBiConsumer18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(objListSupplier14);
        org.junit.Assert.assertNotNull(objListFunction15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(objListBiConsumer17);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate5 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass6 = strPredicate5.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector7 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass6);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector7.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector7.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer10 = objArrayCollector7.accumulator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray11 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(strPredicate5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListFunction9);
        org.junit.Assert.assertNotNull(objListBiConsumer10);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate7 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass8 = strPredicate7.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector9 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass8);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector9.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction11 = objArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator12 = objArrayCollector9.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator13 = objArrayCollector9.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier14 = objArrayCollector9.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass17 = strPredicate16.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector18 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass17);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier19 = objArrayCollector18.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction20 = objArrayCollector18.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = objArrayCollector18.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer22 = objArrayCollector18.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer23 = objArrayCollector18.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList25 = objectToStringComparatorFailableStream1.collect(objListSupplier14, objListBiConsumer23, objListBiConsumer24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objListSupplier10);
        org.junit.Assert.assertNotNull(objListFunction11);
        org.junit.Assert.assertNotNull(objListBinaryOperator12);
        org.junit.Assert.assertNotNull(objListBinaryOperator13);
        org.junit.Assert.assertNotNull(objListSupplier14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objListSupplier19);
        org.junit.Assert.assertNotNull(objListFunction20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(objListBiConsumer22);
        org.junit.Assert.assertNotNull(objListBiConsumer23);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range(0);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        java.util.RandomAccess[] randomAccessArray0 = null;
        java.util.stream.Stream<java.util.RandomAccess> randomAccessStream1 = org.apache.commons.lang3.stream.Streams.of(randomAccessArray0);
        org.junit.Assert.assertNotNull(randomAccessStream1);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector11.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction13 = objArrayCollector11.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = objArrayCollector11.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction15 = objArrayCollector11.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator16 = objArrayCollector11.combiner();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray17 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objListFunction13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(objListFunction15);
        org.junit.Assert.assertNotNull(objListBinaryOperator16);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Collector.Characteristics[] characteristicsArray5 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList6 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList6, characteristicsArray5);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList6);
        java.util.AbstractCollection[] abstractCollectionArray12 = new java.util.AbstractCollection[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.util.stream.Collector.Characteristics>[] characteristicsCollectionArray13 = (java.util.AbstractCollection<java.util.stream.Collector.Characteristics>[]) abstractCollectionArray12;
        characteristicsCollectionArray13[0] = characteristicsList1;
        characteristicsCollectionArray13[1] = characteristicsList6;
        java.util.stream.Stream<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>> characteristicsCollectionStream18 = org.apache.commons.lang3.stream.Streams.of(characteristicsCollectionArray13);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(abstractCollectionArray12);
        org.junit.Assert.assertNotNull(characteristicsCollectionArray13);
        org.junit.Assert.assertNotNull(characteristicsCollectionStream18);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean10 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        java.lang.Class<?> wildcardClass11 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        java.lang.Class<org.apache.commons.lang3.event.EventUtils[]> eventUtilsArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.event.EventUtils[]> eventUtilsArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.event.EventUtils[]>(eventUtilsArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean9 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        java.lang.Class<?> wildcardClass10 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed(4);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        java.lang.Class<java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>> objCollectorClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>> objCollectorEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>>(objCollectorClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean18 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean20 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction18 = objArrayCollector16.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = objArrayCollector16.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream20 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet19);
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass23 = strPredicate22.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector24 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass23);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier25 = objArrayCollector24.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction26 = objArrayCollector24.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = objArrayCollector24.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = objArrayCollector24.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream29 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet28);
        int int30 = objectToStringComparator0.compare((java.lang.Object) characteristicsFailableStream20, (java.lang.Object) characteristicsSet28);
        java.lang.Class<?> wildcardClass31 = characteristicsSet28.getClass();
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListFunction18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(characteristicsFailableStream20);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(objListSupplier25);
        org.junit.Assert.assertNotNull(objListFunction26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(characteristicsStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        java.util.stream.Stream<java.lang.Iterable<java.util.stream.Collector.Characteristics>> characteristicsIterableStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.Iterable<java.util.stream.Collector.Characteristics>> characteristicsIterableFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.lang.Iterable<java.util.stream.Collector.Characteristics>>(characteristicsIterableStream0);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        java.lang.Class<java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object>[]> listBiConsumerArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object>[]> listBiConsumerArrayArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object>[]>(listBiConsumerArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        java.lang.Class<java.lang.Class<?>[]> wildcardClassArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.Class<?>[]> wildcardClassArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.Class<?>[]>(wildcardClassArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean22 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

//    @Test
//    public void test0117() throws Throwable {
//        if (debug)
//            System.out.format("%n%s%n", "RegressionTest0.test0117");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj4 = null;
//        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder7 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        boolean boolean10 = strComparableCheckBuilder7.betweenExclusive("", "");
//        boolean boolean12 = strComparableCheckBuilder7.greaterThan("");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator14.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj18 = null;
//        int int19 = objectToStringComparator14.compare((java.lang.Object) "hi!", obj18);
//        java.util.Comparator<java.lang.Object> objComparator20 = objectToStringComparator13.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator14);
//        int int21 = objectToStringComparator0.compare((java.lang.Object) "", (java.lang.Object) objComparator20);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator22 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
//        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator22.reversed();
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder25 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        boolean boolean27 = strComparableCheckBuilder25.greaterThan("hi!");
//        boolean boolean30 = strComparableCheckBuilder25.between("hi!", "");
//        boolean boolean32 = strComparableCheckBuilder25.lessThanOrEqualTo("hi!");
//        int int34 = objectToStringComparator22.compare((java.lang.Object) strComparableCheckBuilder25, (java.lang.Object) 4);
//        java.util.Comparator<java.lang.Object> objComparator35 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator22);
//        java.lang.Class<?> wildcardClass36 = objectToStringComparator22.getClass();
//        org.junit.Assert.assertNotNull(objComparator1);
//        org.junit.Assert.assertNotNull(strPredicate3);
//        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder7);
//        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
//        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
//        org.junit.Assert.assertNotNull(objComparator15);
//        org.junit.Assert.assertNotNull(strPredicate17);
//        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
//        org.junit.Assert.assertNotNull(objComparator20);
//        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-50) + "'", int21 == (-50));
//        org.junit.Assert.assertNotNull(objectToStringComparator22);
//        org.junit.Assert.assertNotNull(objComparator23);
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder25);
//        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
//        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
//        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
//        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 59 + "'", int34 == 59);
//        org.junit.Assert.assertNotNull(objComparator35);
//        org.junit.Assert.assertNotNull(wildcardClass36);
//    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Collector.Characteristics[] characteristicsArray4 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList5 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList5, characteristicsArray4);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList5);
        java.util.stream.Collector.Characteristics[] characteristicsArray8 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList9 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList9, characteristicsArray8);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList9);
        java.util.stream.Collector.Characteristics[] characteristicsArray12 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList13 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList13, characteristicsArray12);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream15 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList13);
        java.util.stream.Collector.Characteristics[] characteristicsArray16 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList17 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList17, characteristicsArray16);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream19 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList17);
        java.util.RandomAccess[] randomAccessArray20 = new java.util.RandomAccess[] { characteristicsList1, characteristicsList5, characteristicsList9, characteristicsList13, characteristicsList17 };
        java.util.stream.Stream<java.util.RandomAccess> randomAccessStream21 = org.apache.commons.lang3.stream.Streams.of(randomAccessArray20);
        java.util.stream.Stream<java.util.RandomAccess> randomAccessStream22 = org.apache.commons.lang3.stream.Streams.of(randomAccessArray20);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream15);
        org.junit.Assert.assertNotNull(characteristicsArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream19);
        org.junit.Assert.assertNotNull(randomAccessArray20);
        org.junit.Assert.assertNotNull(randomAccessStream21);
        org.junit.Assert.assertNotNull(randomAccessStream22);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        java.util.stream.Stream<java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]>> objListFunctionStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]>> objListFunctionFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]>>(objListFunctionStream0);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass9 = strPredicate8.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass9);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector10.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector10.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction18 = objArrayCollector16.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer19 = objArrayCollector16.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = objArrayCollector16.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier21 = objArrayCollector16.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator22 = objArrayCollector16.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer23 = objArrayCollector16.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList25 = objectToStringComparatorFailableStream1.collect(objListSupplier12, objListBiConsumer23, objListBiConsumer24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListFunction18);
        org.junit.Assert.assertNotNull(objListBiConsumer19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(objListSupplier21);
        org.junit.Assert.assertNotNull(objListBinaryOperator22);
        org.junit.Assert.assertNotNull(objListBiConsumer23);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate5 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass6 = strPredicate5.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector7 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass6);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector7.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector7.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass12 = strPredicate11.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector13 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier14 = objArrayCollector13.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction15 = objArrayCollector13.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer16 = objArrayCollector13.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = objArrayCollector13.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer18 = objArrayCollector13.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList20 = objectToStringComparatorFailableStream1.collect(objListSupplier9, objListBiConsumer18, objListBiConsumer19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(strPredicate5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(objListSupplier14);
        org.junit.Assert.assertNotNull(objListFunction15);
        org.junit.Assert.assertNotNull(objListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(objListBiConsumer18);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        java.lang.Class<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>[]> characteristicsCollectionArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>[]> characteristicsCollectionArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>[]>(characteristicsCollectionArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass4 = strPredicate3.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector5 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray6 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector6 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector6.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector6.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector6.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector6.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector15 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass14);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction17 = objArrayCollector15.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer18 = objArrayCollector15.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer19 = objArrayCollector15.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList21 = objectToStringComparatorFailableStream1.collect(objListSupplier11, objListBiConsumer19, objListBiConsumer20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objListFunction8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(objListFunction17);
        org.junit.Assert.assertNotNull(objListBiConsumer18);
        org.junit.Assert.assertNotNull(objListBiConsumer19);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        java.util.function.Predicate<java.lang.String> strPredicate2 = org.apache.commons.lang3.compare.ComparableUtils.betweenExclusive("hi!", "hi!");
        org.junit.Assert.assertNotNull(strPredicate2);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate5 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass6 = strPredicate5.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector7 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass6);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector7.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector7.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector7.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator11 = objArrayCollector7.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector7.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction18 = objArrayCollector16.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer19 = objArrayCollector16.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList21 = objectToStringComparatorFailableStream1.collect(objListSupplier12, objListBiConsumer19, objListBiConsumer20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(strPredicate5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListFunction9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
        org.junit.Assert.assertNotNull(objListBinaryOperator11);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListFunction18);
        org.junit.Assert.assertNotNull(objListBiConsumer19);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams5 = new org.apache.commons.lang3.stream.Streams();
        int int6 = objectToStringComparator1.compare((java.lang.Object) strPredicate4, (java.lang.Object) streams5);
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator8.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams12 = new org.apache.commons.lang3.stream.Streams();
        int int13 = objectToStringComparator8.compare((java.lang.Object) strPredicate11, (java.lang.Object) streams12);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder15 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int18 = objectToStringComparator8.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate17);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder20 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean22 = strComparableCheckBuilder20.greaterThan("hi!");
        boolean boolean25 = strComparableCheckBuilder20.betweenExclusive("", "");
        boolean boolean27 = strComparableCheckBuilder20.equalTo("hi!");
        boolean boolean29 = strComparableCheckBuilder20.lessThan("");
        boolean boolean31 = strComparableCheckBuilder20.lessThan("");
        boolean boolean33 = strComparableCheckBuilder20.lessThanOrEqualTo("");
        boolean boolean36 = strComparableCheckBuilder20.between("hi!", "hi!");
        boolean boolean39 = strComparableCheckBuilder20.betweenExclusive("hi!", "hi!");
        boolean boolean41 = strComparableCheckBuilder20.lessThanOrEqualTo("hi!");
        boolean boolean43 = strComparableCheckBuilder20.greaterThan("hi!");
        boolean boolean45 = strComparableCheckBuilder20.lessThan("hi!");
        boolean boolean47 = strComparableCheckBuilder20.lessThanOrEqualTo("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator48 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator49 = objectToStringComparator48.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate51 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj52 = null;
        int int53 = objectToStringComparator48.compare((java.lang.Object) "hi!", obj52);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator54 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator55 = objectToStringComparator54.reversed();
        java.util.Comparator<java.lang.Object> objComparator56 = objectToStringComparator48.thenComparing(objComparator55);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator57 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator58 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator59 = objectToStringComparator58.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate61 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj62 = null;
        int int63 = objectToStringComparator58.compare((java.lang.Object) "hi!", obj62);
        java.util.Comparator<java.lang.Object> objComparator64 = objectToStringComparator57.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator58);
        int int66 = objectToStringComparator48.compare((java.lang.Object) objectToStringComparator57, (java.lang.Object) 1L);
        int int67 = objectToStringComparator8.compare((java.lang.Object) "", (java.lang.Object) objectToStringComparator57);
        java.util.Comparator<java.lang.Object> objComparator68 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator8);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator69 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator70 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator71 = objectToStringComparator70.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate73 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj74 = null;
        int int75 = objectToStringComparator70.compare((java.lang.Object) "hi!", obj74);
        java.util.Comparator<java.lang.Object> objComparator76 = objectToStringComparator69.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator70);
        java.util.Comparator<java.lang.Object> objComparator77 = objComparator68.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator70);
        java.util.Comparator<java.lang.Object> objComparator78 = objComparator77.reversed();
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-16) + "'", int6 == (-16));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-16) + "'", int13 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-7) + "'", int18 == (-7));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objComparator49);
        org.junit.Assert.assertNotNull(strPredicate51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(objComparator56);
        org.junit.Assert.assertNotNull(objComparator59);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(objComparator64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 62 + "'", int66 == 62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-66) + "'", int67 == (-66));
        org.junit.Assert.assertNotNull(objComparator68);
        org.junit.Assert.assertNotNull(objComparator71);
        org.junit.Assert.assertNotNull(strPredicate73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(objComparator76);
        org.junit.Assert.assertNotNull(objComparator77);
        org.junit.Assert.assertNotNull(objComparator78);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((int) 'a');
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        java.lang.Class<java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]>> objListFunctionClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]>> objListFunctionArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]>>(objListFunctionClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean11 = strComparableCheckBuilder1.between("hi!", "");
        java.lang.Class<?> wildcardClass12 = strComparableCheckBuilder1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector13 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction14 = objArrayCollector13.finisher();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(objListFunction14);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        java.lang.Class<java.lang.Comparable<java.lang.String>> strComparableClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.Comparable<java.lang.String>> strComparableEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.Comparable<java.lang.String>>(strComparableClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        java.lang.Class<java.util.RandomAccess> randomAccessClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.RandomAccess> randomAccessEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.RandomAccess>(randomAccessClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((-66));
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.lessThan("");
        boolean boolean21 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean23 = strComparableCheckBuilder1.greaterThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass4 = strPredicate3.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector5 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass4);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier6 = objArrayCollector5.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector5.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector5.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector5.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction11 = objArrayCollector5.finisher();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray12 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(objListSupplier6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(objListFunction9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
        org.junit.Assert.assertNotNull(objListFunction11);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass4 = strPredicate3.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass13 = strPredicate12.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass16 = strPredicate15.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray17 = new java.lang.reflect.GenericDeclaration[] { wildcardClass4, wildcardClass7, wildcardClass10, wildcardClass13, wildcardClass16 };
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray18 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray17 };
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayStream19 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray18);
        java.lang.Class<?> wildcardClass20 = genericDeclarationArray18.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector21 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray22 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(genericDeclarationArray17);
        org.junit.Assert.assertNotNull(genericDeclarationArray18);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Collector.Characteristics[] characteristicsArray5 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList6 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList6, characteristicsArray5);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList6);
        java.util.stream.Collector.Characteristics[] characteristicsArray11 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList12 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList12, characteristicsArray11);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream14 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList12);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream15 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList12);
        java.util.stream.Collector.Characteristics[] characteristicsArray16 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList17 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList17, characteristicsArray16);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream19 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList17);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream20 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList17);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream21 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList17);
        java.util.stream.Collector.Characteristics[] characteristicsArray22 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList23 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList23, characteristicsArray22);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream25 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList23);
        java.util.List[] listArray27 = new java.util.List[5];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.stream.Collector.Characteristics>[] characteristicsListArray28 = (java.util.List<java.util.stream.Collector.Characteristics>[]) listArray27;
        characteristicsListArray28[0] = characteristicsList1;
        characteristicsListArray28[1] = characteristicsList6;
        characteristicsListArray28[2] = characteristicsList12;
        characteristicsListArray28[3] = characteristicsList17;
        characteristicsListArray28[4] = characteristicsList23;
        java.util.stream.Stream<java.util.List<java.util.stream.Collector.Characteristics>> characteristicsListStream39 = org.apache.commons.lang3.stream.Streams.of(characteristicsListArray28);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
        org.junit.Assert.assertNotNull(characteristicsArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream14);
        org.junit.Assert.assertNotNull(characteristicsFailableStream15);
        org.junit.Assert.assertNotNull(characteristicsArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream19);
        org.junit.Assert.assertNotNull(characteristicsFailableStream20);
        org.junit.Assert.assertNotNull(characteristicsStream21);
        org.junit.Assert.assertNotNull(characteristicsArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream25);
        org.junit.Assert.assertNotNull(listArray27);
        org.junit.Assert.assertNotNull(characteristicsListArray28);
        org.junit.Assert.assertNotNull(characteristicsListStream39);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate7 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass8 = strPredicate7.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray15 = new java.lang.reflect.GenericDeclaration[] { wildcardClass2, wildcardClass5, wildcardClass8, wildcardClass11, wildcardClass14 };
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray16 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray15 };
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayStream17 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray16);
        java.util.stream.Stream<java.io.Serializable> serializableStream18 = org.apache.commons.lang3.stream.Streams.of((java.io.Serializable[]) genericDeclarationArray16);
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayStream19 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray16);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(genericDeclarationArray15);
        org.junit.Assert.assertNotNull(genericDeclarationArray16);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream17);
        org.junit.Assert.assertNotNull(serializableStream18);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream19);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed(0);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator5 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator5.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder8 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean10 = strComparableCheckBuilder8.greaterThan("hi!");
        boolean boolean13 = strComparableCheckBuilder8.between("hi!", "");
        boolean boolean15 = strComparableCheckBuilder8.lessThanOrEqualTo("hi!");
        int int17 = objectToStringComparator5.compare((java.lang.Object) strComparableCheckBuilder8, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass20 = strPredicate19.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector21 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass20);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier22 = objArrayCollector21.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator23 = objArrayCollector21.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction24 = objArrayCollector21.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator25 = objArrayCollector21.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean29 = strComparableCheckBuilder27.greaterThan("hi!");
        boolean boolean32 = strComparableCheckBuilder27.betweenExclusive("", "");
        boolean boolean34 = strComparableCheckBuilder27.equalTo("hi!");
        boolean boolean36 = strComparableCheckBuilder27.lessThan("");
        boolean boolean38 = strComparableCheckBuilder27.equalTo("");
        boolean boolean40 = strComparableCheckBuilder27.lessThan("hi!");
        boolean boolean42 = strComparableCheckBuilder27.greaterThan("hi!");
        int int43 = objectToStringComparator5.compare((java.lang.Object) objArrayCollector21, (java.lang.Object) "hi!");
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator45 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator5, objectToStringComparatorBinaryOperator44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(objectToStringComparator5);
        org.junit.Assert.assertNotNull(objComparator6);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(objListSupplier22);
        org.junit.Assert.assertNotNull(objListBinaryOperator23);
        org.junit.Assert.assertNotNull(objListFunction24);
        org.junit.Assert.assertNotNull(objListBinaryOperator25);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder6 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean8 = strComparableCheckBuilder6.greaterThan("hi!");
        boolean boolean11 = strComparableCheckBuilder6.between("hi!", "");
        boolean boolean13 = strComparableCheckBuilder6.lessThanOrEqualTo("hi!");
        int int15 = objectToStringComparator3.compare((java.lang.Object) strComparableCheckBuilder6, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass18 = strPredicate17.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector19 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass18);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier20 = objArrayCollector19.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction21 = objArrayCollector19.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = objArrayCollector19.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream23 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet22);
        java.util.function.Predicate<java.lang.String> strPredicate25 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass26 = strPredicate25.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector27 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass26);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier28 = objArrayCollector27.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction29 = objArrayCollector27.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = objArrayCollector27.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = objArrayCollector27.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream32 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet31);
        int int33 = objectToStringComparator3.compare((java.lang.Object) characteristicsFailableStream23, (java.lang.Object) characteristicsSet31);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator35 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator3, objectToStringComparatorBinaryOperator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(objectToStringComparator3);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(objListSupplier20);
        org.junit.Assert.assertNotNull(objListFunction21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(characteristicsFailableStream23);
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(objListSupplier28);
        org.junit.Assert.assertNotNull(objListFunction29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(characteristicsStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20 + "'", int33 == 20);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate7 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass8 = strPredicate7.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector9 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass8);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector9.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction11 = objArrayCollector9.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = objArrayCollector9.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = objArrayCollector9.characteristics();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray14 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objListSupplier10);
        org.junit.Assert.assertNotNull(objListFunction11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListFunction9);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range((int) (byte) 0);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        java.lang.Class<?> wildcardClass53 = strComparableCheckBuilderFailableStream52.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        java.lang.Class<java.lang.Cloneable> cloneableClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.Cloneable> cloneableEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.Cloneable>(cloneableClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj5 = null;
        int int6 = objectToStringComparator1.compare((java.lang.Object) "hi!", obj5);
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.gt("");
        java.util.stream.IntStream intStream11 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((int) (byte) 100);
        int int12 = objectToStringComparator0.compare((java.lang.Object) strPredicate9, (java.lang.Object) intStream11);
        java.lang.Class<?> wildcardClass13 = intStream11.getClass();
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(intStream11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator2 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int5 = objectToStringComparator2.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator2.reversed();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator2, objectToStringComparatorBinaryOperator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objComparator6);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        java.lang.Class<java.lang.reflect.GenericDeclaration> genericDeclarationClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.GenericDeclaration> genericDeclarationEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.GenericDeclaration>(genericDeclarationClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.lang.Class<?> wildcardClass9 = objArrayCollector3.getClass();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction10 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(objListFunction10);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        java.util.Collection<java.util.stream.Collector.Characteristics> characteristicsCollection0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream1 = org.apache.commons.lang3.stream.Streams.stream(characteristicsCollection0);
        org.junit.Assert.assertNotNull(characteristicsFailableStream1);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range((int) (short) -1);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        java.lang.Class<?> wildcardClass56 = strComparableCheckBuilderFailableStream55.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        java.util.stream.Stream<org.apache.commons.lang3.stream.IntStreams> intStreamsStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.stream.IntStreams> intStreamsFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.stream.IntStreams>(intStreamsStream0);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((int) (short) 10);
        org.junit.Assert.assertNotNull(intStream1);
    }

//    @Disabled
//    @Test
//    public void test0163() throws Throwable {
//        if (debug)
//            System.out.format("%n%s%n", "RegressionTest0.test0163");
//        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
//        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
//        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
//        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
//        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
//        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj10 = null;
//        int int11 = objectToStringComparator6.compare((java.lang.Object) "hi!", obj10);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder13 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        boolean boolean16 = strComparableCheckBuilder13.betweenExclusive("", "");
//        boolean boolean18 = strComparableCheckBuilder13.greaterThan("");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator19 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj24 = null;
//        int int25 = objectToStringComparator20.compare((java.lang.Object) "hi!", obj24);
//        java.util.Comparator<java.lang.Object> objComparator26 = objectToStringComparator19.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator20);
//        int int27 = objectToStringComparator6.compare((java.lang.Object) "", (java.lang.Object) objComparator26);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator28 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
//        java.util.Comparator<java.lang.Object> objComparator29 = objectToStringComparator28.reversed();
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder31 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        boolean boolean33 = strComparableCheckBuilder31.greaterThan("hi!");
//        boolean boolean36 = strComparableCheckBuilder31.between("hi!", "");
//        boolean boolean38 = strComparableCheckBuilder31.lessThanOrEqualTo("hi!");
//        int int40 = objectToStringComparator28.compare((java.lang.Object) strComparableCheckBuilder31, (java.lang.Object) 4);
//        java.util.Comparator<java.lang.Object> objComparator41 = objectToStringComparator6.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator28);
//        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator42 = null;
//        // The following exception was thrown during execution in test generation
//        try {
//            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator43 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator6, objectToStringComparatorBinaryOperator42);
//            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
//        } catch (java.lang.NullPointerException e) {
//            // Expected exception.
//        }
//        org.junit.Assert.assertNull(objectToStringComparatorStream2);
//        org.junit.Assert.assertNull(objectToStringComparatorStream3);
//        org.junit.Assert.assertNull(objectToStringComparatorStream4);
//        org.junit.Assert.assertNull(objectToStringComparatorStream5);
//        org.junit.Assert.assertNotNull(objComparator7);
//        org.junit.Assert.assertNotNull(strPredicate9);
//        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder13);
//        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
//        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
//        org.junit.Assert.assertNotNull(objComparator21);
//        org.junit.Assert.assertNotNull(strPredicate23);
//        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
//        org.junit.Assert.assertNotNull(objComparator26);
//        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-50) + "'", int27 == (-50));
//        org.junit.Assert.assertNotNull(objectToStringComparator28);
//        org.junit.Assert.assertNotNull(objComparator29);
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder31);
//        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
//        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
//        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
//        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
//        org.junit.Assert.assertNotNull(objComparator41);
//    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        java.lang.Class<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>> intBaseStreamClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>> intBaseStreamArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>>(intBaseStreamClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((int) (byte) -1);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator2 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator3 = objectToStringComparator2.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder5 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean7 = strComparableCheckBuilder5.greaterThan("hi!");
        boolean boolean10 = strComparableCheckBuilder5.between("hi!", "");
        boolean boolean12 = strComparableCheckBuilder5.lessThanOrEqualTo("hi!");
        int int14 = objectToStringComparator2.compare((java.lang.Object) strComparableCheckBuilder5, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass17 = strPredicate16.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector18 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass17);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier19 = objArrayCollector18.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator20 = objArrayCollector18.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction21 = objArrayCollector18.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator22 = objArrayCollector18.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder24 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean26 = strComparableCheckBuilder24.greaterThan("hi!");
        boolean boolean29 = strComparableCheckBuilder24.betweenExclusive("", "");
        boolean boolean31 = strComparableCheckBuilder24.equalTo("hi!");
        boolean boolean33 = strComparableCheckBuilder24.lessThan("");
        boolean boolean35 = strComparableCheckBuilder24.equalTo("");
        boolean boolean37 = strComparableCheckBuilder24.lessThan("hi!");
        boolean boolean39 = strComparableCheckBuilder24.greaterThan("hi!");
        int int40 = objectToStringComparator2.compare((java.lang.Object) objArrayCollector18, (java.lang.Object) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray41 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectToStringComparator2);
        org.junit.Assert.assertNotNull(objComparator3);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objListSupplier19);
        org.junit.Assert.assertNotNull(objListBinaryOperator20);
        org.junit.Assert.assertNotNull(objListFunction21);
        org.junit.Assert.assertNotNull(objListBinaryOperator22);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 7 + "'", int40 == 7);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator11 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator9, objectToStringComparatorBinaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNotNull(objectToStringComparator9);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        java.lang.Class<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]> strComparableCheckBuilderArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]> strComparableCheckBuilderArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]>(strComparableCheckBuilderArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass4 = strPredicate3.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector5 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass4);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier6 = objArrayCollector5.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector5.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector5.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer9 = objArrayCollector5.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector5.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass13 = strPredicate12.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector14 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass13);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier15 = objArrayCollector14.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction16 = objArrayCollector14.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer17 = objArrayCollector14.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList19 = objectToStringComparatorFailableStream1.collect(objListSupplier10, objListBiConsumer17, objListBiConsumer18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(objListSupplier6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListBiConsumer9);
        org.junit.Assert.assertNotNull(objListSupplier10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objListSupplier15);
        org.junit.Assert.assertNotNull(objListFunction16);
        org.junit.Assert.assertNotNull(objListBiConsumer17);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate7 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass8 = strPredicate7.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector9 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass8);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector9.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction11 = objArrayCollector9.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer12 = objArrayCollector9.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = objArrayCollector9.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer14 = objArrayCollector9.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier15 = objArrayCollector9.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass18 = strPredicate17.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector19 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass18);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier20 = objArrayCollector19.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction21 = objArrayCollector19.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = objArrayCollector19.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer23 = objArrayCollector19.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer24 = objArrayCollector19.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList26 = objectToStringComparatorFailableStream1.collect(objListSupplier15, objListBiConsumer24, objListBiConsumer25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objListSupplier10);
        org.junit.Assert.assertNotNull(objListFunction11);
        org.junit.Assert.assertNotNull(objListBiConsumer12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(objListBiConsumer14);
        org.junit.Assert.assertNotNull(objListSupplier15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(objListSupplier20);
        org.junit.Assert.assertNotNull(objListFunction21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(objListBiConsumer23);
        org.junit.Assert.assertNotNull(objListBiConsumer24);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        java.lang.Class<java.util.List<java.util.stream.Collector.Characteristics>[]> characteristicsListArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.List<java.util.stream.Collector.Characteristics>[]> characteristicsListArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.List<java.util.stream.Collector.Characteristics>[]>(characteristicsListArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder9 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean11 = strComparableCheckBuilder9.greaterThan("hi!");
        boolean boolean14 = strComparableCheckBuilder9.betweenExclusive("", "");
        boolean boolean16 = strComparableCheckBuilder9.equalTo("hi!");
        boolean boolean18 = strComparableCheckBuilder9.lessThan("");
        boolean boolean20 = strComparableCheckBuilder9.equalTo("");
        boolean boolean22 = strComparableCheckBuilder9.greaterThanOrEqualTo("hi!");
        boolean boolean25 = strComparableCheckBuilder9.between("hi!", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean29 = strComparableCheckBuilder27.greaterThan("hi!");
        boolean boolean32 = strComparableCheckBuilder27.betweenExclusive("", "");
        boolean boolean34 = strComparableCheckBuilder27.equalTo("hi!");
        boolean boolean36 = strComparableCheckBuilder27.lessThan("");
        boolean boolean38 = strComparableCheckBuilder27.lessThan("");
        boolean boolean40 = strComparableCheckBuilder27.lessThanOrEqualTo("");
        boolean boolean43 = strComparableCheckBuilder27.between("hi!", "hi!");
        boolean boolean46 = strComparableCheckBuilder27.betweenExclusive("hi!", "hi!");
        boolean boolean48 = strComparableCheckBuilder27.lessThanOrEqualTo("hi!");
        boolean boolean50 = strComparableCheckBuilder27.greaterThan("hi!");
        boolean boolean52 = strComparableCheckBuilder27.lessThan("hi!");
        boolean boolean54 = strComparableCheckBuilder27.lessThanOrEqualTo("");
        int int55 = objectToStringComparator6.compare((java.lang.Object) "hi!", (java.lang.Object) "");
        java.util.Comparator<java.lang.Object> objComparator56 = objectToStringComparator6.reversed();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator58 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator6, objectToStringComparatorBinaryOperator57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNotNull(objectToStringComparator6);
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(objComparator56);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean19 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean22 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean26 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean28 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean30 = strComparableCheckBuilder1.greaterThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass9 = strPredicate8.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass9);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector10.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector10.supplier();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator13.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder16 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean18 = strComparableCheckBuilder16.greaterThan("hi!");
        boolean boolean21 = strComparableCheckBuilder16.between("hi!", "");
        boolean boolean23 = strComparableCheckBuilder16.lessThanOrEqualTo("hi!");
        int int25 = objectToStringComparator13.compare((java.lang.Object) strComparableCheckBuilder16, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate27 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass28 = strPredicate27.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector29 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass28);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier30 = objArrayCollector29.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator31 = objArrayCollector29.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction32 = objArrayCollector29.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator33 = objArrayCollector29.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder35 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean37 = strComparableCheckBuilder35.greaterThan("hi!");
        boolean boolean40 = strComparableCheckBuilder35.betweenExclusive("", "");
        boolean boolean42 = strComparableCheckBuilder35.equalTo("hi!");
        boolean boolean44 = strComparableCheckBuilder35.lessThan("");
        boolean boolean46 = strComparableCheckBuilder35.equalTo("");
        boolean boolean48 = strComparableCheckBuilder35.lessThan("hi!");
        boolean boolean50 = strComparableCheckBuilder35.greaterThan("hi!");
        int int51 = objectToStringComparator13.compare((java.lang.Object) objArrayCollector29, (java.lang.Object) "hi!");
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer52 = objArrayCollector29.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList54 = objectToStringComparatorFailableStream1.collect(objListSupplier12, objListBiConsumer52, objListBiConsumer53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objectToStringComparator13);
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(objListSupplier30);
        org.junit.Assert.assertNotNull(objListBinaryOperator31);
        org.junit.Assert.assertNotNull(objListFunction32);
        org.junit.Assert.assertNotNull(objListBinaryOperator33);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(objListBiConsumer52);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed(2);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range(3);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector6 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector6.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector6.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector6.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass13 = strPredicate12.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector14 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass13);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier15 = objArrayCollector14.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction16 = objArrayCollector14.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer17 = objArrayCollector14.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer18 = objArrayCollector14.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList20 = objectToStringComparatorFailableStream1.collect(objListSupplier10, objListBiConsumer18, objListBiConsumer19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objListFunction8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(objListSupplier10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objListSupplier15);
        org.junit.Assert.assertNotNull(objListFunction16);
        org.junit.Assert.assertNotNull(objListBiConsumer17);
        org.junit.Assert.assertNotNull(objListBiConsumer18);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean11 = strComparableCheckBuilder1.between("hi!", "");
        java.lang.Class<?> wildcardClass12 = strComparableCheckBuilder1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector13 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector14 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator15 = objArrayCollector14.combiner();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(objListBinaryOperator15);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.equalTo("");
        boolean boolean7 = strComparableCheckBuilder1.greaterThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("");
        boolean boolean3 = strComparableCheckBuilder1.equalTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        java.lang.Class<java.io.Serializable[]> serializableArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.io.Serializable[]> serializableArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.io.Serializable[]>(serializableArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        java.lang.Class<java.util.ArrayList<java.util.stream.Collector.Characteristics>> characteristicsListClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.ArrayList<java.util.stream.Collector.Characteristics>> characteristicsListEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.ArrayList<java.util.stream.Collector.Characteristics>>(characteristicsListClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean11 = strComparableCheckBuilder1.between("", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = null;
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector11.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction13 = objArrayCollector11.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = objArrayCollector11.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction15 = objArrayCollector11.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer16 = objArrayCollector11.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList18 = objectToStringComparatorFailableStream1.collect(objListSupplier7, objListBiConsumer16, objListBiConsumer17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objListFunction13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(objListFunction15);
        org.junit.Assert.assertNotNull(objListBiConsumer16);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector6 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector6.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector6.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer9 = objArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = objArrayCollector6.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector6.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer12 = null;
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList14 = objectToStringComparatorFailableStream1.collect(objListSupplier11, objListBiConsumer12, objListBiConsumer13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objListFunction8);
        org.junit.Assert.assertNotNull(objListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(objListSupplier11);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass4 = strPredicate3.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector5 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass4);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier6 = objArrayCollector5.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector5.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator8 = objArrayCollector5.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector5.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector5.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass13 = strPredicate12.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector14 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass13);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier15 = objArrayCollector14.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction16 = objArrayCollector14.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer17 = objArrayCollector14.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = objArrayCollector14.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer19 = objArrayCollector14.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList21 = objectToStringComparatorFailableStream1.collect(objListSupplier10, objListBiConsumer19, objListBiConsumer20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(objListSupplier6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListBinaryOperator8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(objListSupplier10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objListSupplier15);
        org.junit.Assert.assertNotNull(objListFunction16);
        org.junit.Assert.assertNotNull(objListBiConsumer17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(objListBiConsumer19);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream1 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream0);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream1);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range(62);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.equalTo("");
        boolean boolean13 = strComparableCheckBuilder1.between("hi!", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean16 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        java.lang.Class<?> wildcardClass17 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = objArrayCollector11.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream13 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass16 = strPredicate15.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector17 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass16);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier18 = objArrayCollector17.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector17.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer20 = objArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = objArrayCollector17.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream22 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet21);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass25 = strPredicate24.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector26 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass25);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier27 = objArrayCollector26.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction28 = objArrayCollector26.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = objArrayCollector26.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = objArrayCollector26.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = objArrayCollector26.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream32 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet31);
        java.util.function.Predicate<java.lang.String> strPredicate34 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass35 = strPredicate34.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector36 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass35);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier37 = objArrayCollector36.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction38 = objArrayCollector36.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet39 = objArrayCollector36.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet40 = objArrayCollector36.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream41 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet40);
        java.util.Set[] setArray43 = new java.util.Set[5];
        @SuppressWarnings("unchecked")
        java.util.Set<java.util.stream.Collector.Characteristics>[] characteristicsSetArray44 = (java.util.Set<java.util.stream.Collector.Characteristics>[]) setArray43;
        characteristicsSetArray44[0] = characteristicsSet6;
        characteristicsSetArray44[1] = characteristicsSet12;
        characteristicsSetArray44[2] = characteristicsSet21;
        characteristicsSetArray44[3] = characteristicsSet31;
        characteristicsSetArray44[4] = characteristicsSet40;
        java.util.stream.Stream<java.util.Set<java.util.stream.Collector.Characteristics>> characteristicsSetStream55 = org.apache.commons.lang3.stream.Streams.of(characteristicsSetArray44);
        java.util.stream.Stream<java.util.Set<java.util.stream.Collector.Characteristics>> characteristicsSetStream56 = org.apache.commons.lang3.stream.Streams.of(characteristicsSetArray44);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsStream13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objListSupplier18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(characteristicsFailableStream22);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objListSupplier27);
        org.junit.Assert.assertNotNull(objListFunction28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(characteristicsStream32);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(objListSupplier37);
        org.junit.Assert.assertNotNull(objListFunction38);
        org.junit.Assert.assertNotNull(characteristicsSet39);
        org.junit.Assert.assertNotNull(characteristicsSet40);
        org.junit.Assert.assertNotNull(characteristicsFailableStream41);
        org.junit.Assert.assertNotNull(setArray43);
        org.junit.Assert.assertNotNull(characteristicsSetArray44);
        org.junit.Assert.assertNotNull(characteristicsSetStream55);
        org.junit.Assert.assertNotNull(characteristicsSetStream56);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range((int) '4');
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator9.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams13 = new org.apache.commons.lang3.stream.Streams();
        int int14 = objectToStringComparator9.compare((java.lang.Object) strPredicate12, (java.lang.Object) streams13);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder16 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int19 = objectToStringComparator9.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate18);
        java.util.Comparator<java.lang.Object> objComparator20 = objectToStringComparator9.reversed();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator9.reversed();
        java.util.stream.Collector.Characteristics[] characteristicsArray22 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList23 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList23, characteristicsArray22);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream25 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList23);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream26 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList23);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream27 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList23);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder29 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean31 = strComparableCheckBuilder29.greaterThan("hi!");
        boolean boolean34 = strComparableCheckBuilder29.betweenExclusive("", "");
        boolean boolean36 = strComparableCheckBuilder29.equalTo("hi!");
        boolean boolean38 = strComparableCheckBuilder29.lessThan("");
        boolean boolean40 = strComparableCheckBuilder29.lessThan("hi!");
        boolean boolean42 = strComparableCheckBuilder29.greaterThanOrEqualTo("hi!");
        boolean boolean44 = strComparableCheckBuilder29.greaterThanOrEqualTo("hi!");
        boolean boolean47 = strComparableCheckBuilder29.betweenExclusive("", "");
        int int48 = objectToStringComparator9.compare((java.lang.Object) characteristicsList23, (java.lang.Object) "");
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator50 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator9, objectToStringComparatorBinaryOperator49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-16) + "'", int14 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder16);
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-7) + "'", int19 == (-7));
        org.junit.Assert.assertNotNull(objComparator20);
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(characteristicsArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream25);
        org.junit.Assert.assertNotNull(characteristicsFailableStream26);
        org.junit.Assert.assertNotNull(characteristicsStream27);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams7 = new org.apache.commons.lang3.stream.Streams();
        int int8 = objectToStringComparator3.compare((java.lang.Object) strPredicate6, (java.lang.Object) streams7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator9.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj13 = null;
        int int14 = objectToStringComparator9.compare((java.lang.Object) "hi!", obj13);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator15 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator15.reversed();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator9.thenComparing(objComparator16);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator18 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator19 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator20 = objectToStringComparator19.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj23 = null;
        int int24 = objectToStringComparator19.compare((java.lang.Object) "hi!", obj23);
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator18.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator19);
        int int27 = objectToStringComparator9.compare((java.lang.Object) objectToStringComparator18, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator28 = objectToStringComparator3.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator18);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator30 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator18, objectToStringComparatorBinaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-16) + "'", int8 == (-16));
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(objComparator20);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(objComparator25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 62 + "'", int27 == 62);
        org.junit.Assert.assertNotNull(objComparator28);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        java.lang.Class<java.util.ArrayList<java.util.stream.Collector.Characteristics>[]> characteristicsListArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.ArrayList<java.util.stream.Collector.Characteristics>[]> characteristicsListArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.ArrayList<java.util.stream.Collector.Characteristics>[]>(characteristicsListArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

//    @Test
//    public void test0199() throws Throwable {
//        if (debug)
//            System.out.format("%n%s%n", "RegressionTest0.test0199");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        org.apache.commons.lang3.stream.Streams streams5 = new org.apache.commons.lang3.stream.Streams();
//        int int6 = objectToStringComparator1.compare((java.lang.Object) strPredicate4, (java.lang.Object) streams5);
//        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator8.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        org.apache.commons.lang3.stream.Streams streams12 = new org.apache.commons.lang3.stream.Streams();
//        int int13 = objectToStringComparator8.compare((java.lang.Object) strPredicate11, (java.lang.Object) streams12);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder15 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
//        int int18 = objectToStringComparator8.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate17);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder20 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        boolean boolean22 = strComparableCheckBuilder20.greaterThan("hi!");
//        boolean boolean25 = strComparableCheckBuilder20.betweenExclusive("", "");
//        boolean boolean27 = strComparableCheckBuilder20.equalTo("hi!");
//        boolean boolean29 = strComparableCheckBuilder20.lessThan("");
//        boolean boolean31 = strComparableCheckBuilder20.lessThan("");
//        boolean boolean33 = strComparableCheckBuilder20.lessThanOrEqualTo("");
//        boolean boolean36 = strComparableCheckBuilder20.between("hi!", "hi!");
//        boolean boolean39 = strComparableCheckBuilder20.betweenExclusive("hi!", "hi!");
//        boolean boolean41 = strComparableCheckBuilder20.lessThanOrEqualTo("hi!");
//        boolean boolean43 = strComparableCheckBuilder20.greaterThan("hi!");
//        boolean boolean45 = strComparableCheckBuilder20.lessThan("hi!");
//        boolean boolean47 = strComparableCheckBuilder20.lessThanOrEqualTo("");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator48 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator49 = objectToStringComparator48.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate51 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj52 = null;
//        int int53 = objectToStringComparator48.compare((java.lang.Object) "hi!", obj52);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator54 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator55 = objectToStringComparator54.reversed();
//        java.util.Comparator<java.lang.Object> objComparator56 = objectToStringComparator48.thenComparing(objComparator55);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator57 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator58 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator59 = objectToStringComparator58.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate61 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj62 = null;
//        int int63 = objectToStringComparator58.compare((java.lang.Object) "hi!", obj62);
//        java.util.Comparator<java.lang.Object> objComparator64 = objectToStringComparator57.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator58);
//        int int66 = objectToStringComparator48.compare((java.lang.Object) objectToStringComparator57, (java.lang.Object) 1L);
//        int int67 = objectToStringComparator8.compare((java.lang.Object) "", (java.lang.Object) objectToStringComparator57);
//        java.util.Comparator<java.lang.Object> objComparator68 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator8);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator69 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator70 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator71 = objectToStringComparator70.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate73 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj74 = null;
//        int int75 = objectToStringComparator70.compare((java.lang.Object) "hi!", obj74);
//        java.util.Comparator<java.lang.Object> objComparator76 = objectToStringComparator69.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator70);
//        java.util.Comparator<java.lang.Object> objComparator77 = objComparator68.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator70);
//        java.util.Comparator<java.lang.Object> objComparator78 = null;
//        // The following exception was thrown during execution in test generation
//        try {
//            java.util.Comparator<java.lang.Object> objComparator79 = objComparator68.thenComparing(objComparator78);
//            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
//        } catch (java.lang.NullPointerException e) {
//            // Expected exception.
//        }
//        org.junit.Assert.assertNotNull(objComparator2);
//        org.junit.Assert.assertNotNull(strPredicate4);
//        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-16) + "'", int6 == (-16));
//        org.junit.Assert.assertNotNull(objComparator7);
//        org.junit.Assert.assertNotNull(objComparator9);
//        org.junit.Assert.assertNotNull(strPredicate11);
//        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-16) + "'", int13 == (-16));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder15);
//        org.junit.Assert.assertNotNull(strPredicate17);
//        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-7) + "'", int18 == (-7));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder20);
//        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
//        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
//        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
//        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
//        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
//        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
//        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
//        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
//        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
//        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
//        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
//        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
//        org.junit.Assert.assertNotNull(objComparator49);
//        org.junit.Assert.assertNotNull(strPredicate51);
//        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
//        org.junit.Assert.assertNotNull(objComparator55);
//        org.junit.Assert.assertNotNull(objComparator56);
//        org.junit.Assert.assertNotNull(objComparator59);
//        org.junit.Assert.assertNotNull(strPredicate61);
//        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
//        org.junit.Assert.assertNotNull(objComparator64);
//        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 62 + "'", int66 == 62);
//        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-66) + "'", int67 == (-66));
//        org.junit.Assert.assertNotNull(objComparator68);
//        org.junit.Assert.assertNotNull(objComparator71);
//        org.junit.Assert.assertNotNull(strPredicate73);
//        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
//        org.junit.Assert.assertNotNull(objComparator76);
//        org.junit.Assert.assertNotNull(objComparator77);
//    }

//    @Test
//    public void test0200() throws Throwable {
//        if (debug)
//            System.out.format("%n%s%n", "RegressionTest0.test0200");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj4 = null;
//        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder7 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        boolean boolean10 = strComparableCheckBuilder7.betweenExclusive("", "");
//        boolean boolean12 = strComparableCheckBuilder7.greaterThan("");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator14.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj18 = null;
//        int int19 = objectToStringComparator14.compare((java.lang.Object) "hi!", obj18);
//        java.util.Comparator<java.lang.Object> objComparator20 = objectToStringComparator13.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator14);
//        int int21 = objectToStringComparator0.compare((java.lang.Object) "", (java.lang.Object) objComparator20);
//        java.util.Comparator<java.lang.Object> objComparator22 = objComparator20.reversed();
//        org.junit.Assert.assertNotNull(objComparator1);
//        org.junit.Assert.assertNotNull(strPredicate3);
//        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder7);
//        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
//        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
//        org.junit.Assert.assertNotNull(objComparator15);
//        org.junit.Assert.assertNotNull(strPredicate17);
//        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
//        org.junit.Assert.assertNotNull(objComparator20);
//        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-50) + "'", int21 == (-50));
//        org.junit.Assert.assertNotNull(objComparator22);
//    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector12 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass11);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier13 = objArrayCollector12.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction14 = objArrayCollector12.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer15 = objArrayCollector12.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = objArrayCollector12.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector12.supplier();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator18 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator18.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder21 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean23 = strComparableCheckBuilder21.greaterThan("hi!");
        boolean boolean26 = strComparableCheckBuilder21.between("hi!", "");
        boolean boolean28 = strComparableCheckBuilder21.lessThanOrEqualTo("hi!");
        int int30 = objectToStringComparator18.compare((java.lang.Object) strComparableCheckBuilder21, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate32 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass33 = strPredicate32.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector34 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass33);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier35 = objArrayCollector34.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator36 = objArrayCollector34.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction37 = objArrayCollector34.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator38 = objArrayCollector34.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder40 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean42 = strComparableCheckBuilder40.greaterThan("hi!");
        boolean boolean45 = strComparableCheckBuilder40.betweenExclusive("", "");
        boolean boolean47 = strComparableCheckBuilder40.equalTo("hi!");
        boolean boolean49 = strComparableCheckBuilder40.lessThan("");
        boolean boolean51 = strComparableCheckBuilder40.equalTo("");
        boolean boolean53 = strComparableCheckBuilder40.lessThan("hi!");
        boolean boolean55 = strComparableCheckBuilder40.greaterThan("hi!");
        int int56 = objectToStringComparator18.compare((java.lang.Object) objArrayCollector34, (java.lang.Object) "hi!");
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer57 = objArrayCollector34.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList59 = objectToStringComparatorFailableStream1.collect(objListSupplier17, objListBiConsumer57, objListBiConsumer58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(objListSupplier13);
        org.junit.Assert.assertNotNull(objListFunction14);
        org.junit.Assert.assertNotNull(objListBiConsumer15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objectToStringComparator18);
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 59 + "'", int30 == 59);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(objListSupplier35);
        org.junit.Assert.assertNotNull(objListBinaryOperator36);
        org.junit.Assert.assertNotNull(objListFunction37);
        org.junit.Assert.assertNotNull(objListBinaryOperator38);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 7 + "'", int56 == 7);
        org.junit.Assert.assertNotNull(objListBiConsumer57);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass4 = strPredicate3.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector5 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass4);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier6 = objArrayCollector5.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector5.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector5.characteristics();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray9 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(objListSupplier6);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        java.lang.Class<java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object>> objListBiConsumerClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object>> objListBiConsumerEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object>>(objListBiConsumerClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = null;
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector11.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction13 = objArrayCollector11.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer14 = objArrayCollector11.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = objArrayCollector11.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer16 = objArrayCollector11.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector11.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer18 = objArrayCollector11.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList20 = objectToStringComparatorFailableStream1.collect(objListSupplier7, objListBiConsumer18, objListBiConsumer19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objListFunction13);
        org.junit.Assert.assertNotNull(objListBiConsumer14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(objListBiConsumer16);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListBiConsumer18);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass9 = strPredicate8.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass9);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction12 = objArrayCollector10.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer13 = objArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = objArrayCollector10.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer15 = objArrayCollector10.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector10.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass19 = strPredicate18.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector20 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass19);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier21 = objArrayCollector20.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction22 = objArrayCollector20.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer23 = objArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = objArrayCollector20.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier25 = objArrayCollector20.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator26 = objArrayCollector20.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer27 = objArrayCollector20.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList29 = objectToStringComparatorFailableStream1.collect(objListSupplier16, objListBiConsumer27, objListBiConsumer28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(objListFunction12);
        org.junit.Assert.assertNotNull(objListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(objListBiConsumer15);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(objListSupplier21);
        org.junit.Assert.assertNotNull(objListFunction22);
        org.junit.Assert.assertNotNull(objListBiConsumer23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(objListSupplier25);
        org.junit.Assert.assertNotNull(objListBinaryOperator26);
        org.junit.Assert.assertNotNull(objListBiConsumer27);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        java.lang.Class<java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object>[]> listBiConsumerArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object>[]> listBiConsumerArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object>[]>(listBiConsumerArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams4 = new org.apache.commons.lang3.stream.Streams();
        int int5 = objectToStringComparator0.compare((java.lang.Object) strPredicate3, (java.lang.Object) streams4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj10 = null;
        int int11 = objectToStringComparator6.compare((java.lang.Object) "hi!", obj10);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator12.reversed();
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator6.thenComparing(objComparator13);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator15 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator16.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj20 = null;
        int int21 = objectToStringComparator16.compare((java.lang.Object) "hi!", obj20);
        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator15.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
        int int24 = objectToStringComparator6.compare((java.lang.Object) objectToStringComparator15, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator15);
        java.util.Comparator<java.lang.Object> objComparator26 = objComparator25.reversed();
        java.lang.Class<?> wildcardClass27 = objComparator26.getClass();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-16) + "'", int5 == (-16));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 62 + "'", int24 == 62);
        org.junit.Assert.assertNotNull(objComparator25);
        org.junit.Assert.assertNotNull(objComparator26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        boolean boolean22 = strComparableCheckBuilder1.equalTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.lessThan("");
        boolean boolean18 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = null;
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass12 = strPredicate11.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector13 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier14 = objArrayCollector13.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction15 = objArrayCollector13.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer16 = objArrayCollector13.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = objArrayCollector13.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer18 = objArrayCollector13.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier19 = objArrayCollector13.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer20 = objArrayCollector13.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList22 = objectToStringComparatorFailableStream1.collect(objListSupplier9, objListBiConsumer20, objListBiConsumer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(objListSupplier14);
        org.junit.Assert.assertNotNull(objListFunction15);
        org.junit.Assert.assertNotNull(objListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(objListBiConsumer18);
        org.junit.Assert.assertNotNull(objListSupplier19);
        org.junit.Assert.assertNotNull(objListBiConsumer20);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        java.lang.Class<java.util.ArrayList<java.util.stream.Collector.Characteristics>> characteristicsListClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.ArrayList<java.util.stream.Collector.Characteristics>> characteristicsListEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.ArrayList<java.util.stream.Collector.Characteristics>>(characteristicsListClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator7 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator7.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams11 = new org.apache.commons.lang3.stream.Streams();
        int int12 = objectToStringComparator7.compare((java.lang.Object) strPredicate10, (java.lang.Object) streams11);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder14 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int17 = objectToStringComparator7.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate16);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator18 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator18.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams22 = new org.apache.commons.lang3.stream.Streams();
        int int23 = objectToStringComparator18.compare((java.lang.Object) strPredicate21, (java.lang.Object) streams22);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder25 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate27 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int28 = objectToStringComparator18.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate27);
        java.util.Comparator<java.lang.Object> objComparator29 = objectToStringComparator18.reversed();
        java.util.Comparator<java.lang.Object> objComparator30 = objectToStringComparator7.thenComparing(objComparator29);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator32 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator7, objectToStringComparatorBinaryOperator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-16) + "'", int12 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-7) + "'", int17 == (-7));
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-16) + "'", int23 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder25);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-7) + "'", int28 == (-7));
        org.junit.Assert.assertNotNull(objComparator29);
        org.junit.Assert.assertNotNull(objComparator30);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed(7);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator7 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator7.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj11 = null;
        int int12 = objectToStringComparator7.compare((java.lang.Object) "hi!", obj11);
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator6.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator7);
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.gt("");
        java.util.stream.IntStream intStream17 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((int) (byte) 100);
        int int18 = objectToStringComparator6.compare((java.lang.Object) strPredicate15, (java.lang.Object) intStream17);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator6, objectToStringComparatorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(intStream17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range((int) (short) 100);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range(1);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range(4);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector12 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass11);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier13 = objArrayCollector12.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction14 = objArrayCollector12.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = objArrayCollector12.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = objArrayCollector12.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = objArrayCollector12.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction18 = objArrayCollector12.finisher();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray19 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(objListSupplier13);
        org.junit.Assert.assertNotNull(objListFunction14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(objListFunction18);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector12 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass11);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier13 = objArrayCollector12.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator14 = objArrayCollector12.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction15 = objArrayCollector12.finisher();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray16 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(objListSupplier13);
        org.junit.Assert.assertNotNull(objListBinaryOperator14);
        org.junit.Assert.assertNotNull(objListFunction15);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass9 = strPredicate8.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass9);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction12 = objArrayCollector10.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer13 = objArrayCollector10.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer14 = objArrayCollector10.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier15 = objArrayCollector10.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass18 = strPredicate17.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector19 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass18);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier20 = objArrayCollector19.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction21 = objArrayCollector19.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = objArrayCollector19.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator23 = objArrayCollector19.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer24 = objArrayCollector19.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList26 = objectToStringComparatorFailableStream1.collect(objListSupplier15, objListBiConsumer24, objListBiConsumer25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(objListFunction12);
        org.junit.Assert.assertNotNull(objListBiConsumer13);
        org.junit.Assert.assertNotNull(objListBiConsumer14);
        org.junit.Assert.assertNotNull(objListSupplier15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(objListSupplier20);
        org.junit.Assert.assertNotNull(objListFunction21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(objListBinaryOperator23);
        org.junit.Assert.assertNotNull(objListBiConsumer24);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer7 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(objListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj10 = null;
        int int11 = objectToStringComparator6.compare((java.lang.Object) "hi!", obj10);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator12.reversed();
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator6.thenComparing(objComparator13);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator15 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator16.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj20 = null;
        int int21 = objectToStringComparator16.compare((java.lang.Object) "hi!", obj20);
        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator15.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator16);
        int int24 = objectToStringComparator6.compare((java.lang.Object) objectToStringComparator15, (java.lang.Object) 1L);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator26 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator6, objectToStringComparatorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 62 + "'", int24 == 62);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        java.lang.Class<java.io.Serializable[][]> serializableArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.io.Serializable[][]> serializableArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.io.Serializable[][]>(serializableArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.between("", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator8.reversed();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator11 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator8, objectToStringComparatorBinaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNotNull(objectToStringComparator8);
        org.junit.Assert.assertNotNull(objComparator9);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        java.lang.Class<java.util.RandomAccess> randomAccessClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.RandomAccess> randomAccessEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.RandomAccess>(randomAccessClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj14 = null;
        int int15 = objectToStringComparator10.compare((java.lang.Object) "hi!", obj14);
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator9.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator10);
        int int18 = objectToStringComparator0.compare((java.lang.Object) objectToStringComparator9, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator0.reversed();
        java.lang.Class<?> wildcardClass20 = objComparator19.getClass();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 62 + "'", int18 == 62);
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        java.lang.Class<java.lang.Cloneable> cloneableClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.Cloneable> cloneableEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.Cloneable>(cloneableClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream1 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream0);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream1);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean6 = strComparableCheckBuilder1.equalTo("");
        boolean boolean8 = strComparableCheckBuilder1.lessThan("");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean13 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator5 = null;
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator7 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator5, objectToStringComparatorBinaryOperator6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range((-49));
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.lang.CharSequence[] charSequenceArray5 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.lang.CharSequence[][] charSequenceArray12 = new java.lang.CharSequence[][] { charSequenceArray2, charSequenceArray5, charSequenceArray8, charSequenceArray11 };
        java.util.stream.Stream<java.lang.CharSequence[]> charSequenceArrayStream13 = org.apache.commons.lang3.stream.Streams.of(charSequenceArray12);
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertNotNull(charSequenceArray5);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertNotNull(charSequenceArrayStream13);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj7 = null;
        int int8 = objectToStringComparator3.compare((java.lang.Object) "hi!", obj7);
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator3.reversed();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator3.reversed();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator3.reversed();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator3, objectToStringComparatorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(objComparator11);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector6 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector6.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector6.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector6.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector6.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector15 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass14);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction17 = objArrayCollector15.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = objArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector15.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer20 = objArrayCollector15.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList22 = objectToStringComparatorFailableStream1.collect(objListSupplier11, objListBiConsumer20, objListBiConsumer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objListFunction8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(objListFunction17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListBiConsumer20);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder6 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean8 = strComparableCheckBuilder6.greaterThan("hi!");
        boolean boolean11 = strComparableCheckBuilder6.betweenExclusive("", "");
        boolean boolean13 = strComparableCheckBuilder6.equalTo("hi!");
        boolean boolean15 = strComparableCheckBuilder6.lessThan("");
        boolean boolean17 = strComparableCheckBuilder6.equalTo("");
        boolean boolean19 = strComparableCheckBuilder6.greaterThanOrEqualTo("hi!");
        boolean boolean22 = strComparableCheckBuilder6.between("hi!", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder24 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean26 = strComparableCheckBuilder24.greaterThan("hi!");
        boolean boolean29 = strComparableCheckBuilder24.betweenExclusive("", "");
        boolean boolean31 = strComparableCheckBuilder24.equalTo("hi!");
        boolean boolean33 = strComparableCheckBuilder24.lessThan("");
        boolean boolean35 = strComparableCheckBuilder24.lessThan("");
        boolean boolean37 = strComparableCheckBuilder24.lessThanOrEqualTo("");
        boolean boolean40 = strComparableCheckBuilder24.between("hi!", "hi!");
        boolean boolean43 = strComparableCheckBuilder24.betweenExclusive("hi!", "hi!");
        boolean boolean45 = strComparableCheckBuilder24.lessThanOrEqualTo("hi!");
        boolean boolean47 = strComparableCheckBuilder24.greaterThan("hi!");
        boolean boolean49 = strComparableCheckBuilder24.lessThan("hi!");
        boolean boolean51 = strComparableCheckBuilder24.lessThanOrEqualTo("");
        int int52 = objectToStringComparator3.compare((java.lang.Object) "hi!", (java.lang.Object) "");
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator54 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator3, objectToStringComparatorBinaryOperator53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(objectToStringComparator3);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        java.lang.Class<java.util.function.BiFunction<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>, java.util.List<java.lang.Object>>> objListBiFunctionClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.function.BiFunction<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>, java.util.List<java.lang.Object>>> objListBiFunctionEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.function.BiFunction<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>, java.util.List<java.lang.Object>>>(objListBiFunctionClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range((-50));
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector12 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass11);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier13 = objArrayCollector12.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator14 = objArrayCollector12.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction15 = objArrayCollector12.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator16 = objArrayCollector12.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction17 = objArrayCollector12.finisher();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray18 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(objListSupplier13);
        org.junit.Assert.assertNotNull(objListBinaryOperator14);
        org.junit.Assert.assertNotNull(objListFunction15);
        org.junit.Assert.assertNotNull(objListBinaryOperator16);
        org.junit.Assert.assertNotNull(objListFunction17);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean6 = strComparableCheckBuilder1.equalTo("");
        boolean boolean8 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean11 = strComparableCheckBuilder1.between("hi!", "");
        java.lang.Class<?> wildcardClass12 = strComparableCheckBuilder1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector13 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector14 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector15 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer16 = objArrayCollector15.accumulator();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(objListBiConsumer16);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate5 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass6 = strPredicate5.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector7 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass6);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector7.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector12 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass11);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier13 = objArrayCollector12.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction14 = objArrayCollector12.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer15 = objArrayCollector12.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = objArrayCollector12.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer17 = objArrayCollector12.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList19 = objectToStringComparatorFailableStream1.collect(objListSupplier8, objListBiConsumer17, objListBiConsumer18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(strPredicate5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(objListSupplier13);
        org.junit.Assert.assertNotNull(objListFunction14);
        org.junit.Assert.assertNotNull(objListBiConsumer15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(objListBiConsumer17);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        java.lang.Class<java.io.Serializable[]> serializableArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.io.Serializable[]> serializableArrayArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.io.Serializable[]>(serializableArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean9 = strComparableCheckBuilder1.greaterThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        java.lang.Class<java.lang.Iterable<java.util.stream.Collector.Characteristics>> characteristicsIterableClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.Iterable<java.util.stream.Collector.Characteristics>> characteristicsIterableEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.Iterable<java.util.stream.Collector.Characteristics>>(characteristicsIterableClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        java.lang.Class<java.util.Collection<java.util.stream.Collector.Characteristics>> characteristicsCollectionClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.Collection<java.util.stream.Collector.Characteristics>> characteristicsCollectionEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.Collection<java.util.stream.Collector.Characteristics>>(characteristicsCollectionClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        java.lang.Class<java.util.List<java.util.stream.Collector.Characteristics>> characteristicsListClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.List<java.util.stream.Collector.Characteristics>> characteristicsListEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.List<java.util.stream.Collector.Characteristics>>(characteristicsListClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector11.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction13 = objArrayCollector11.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator14 = objArrayCollector11.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator15 = objArrayCollector11.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector11.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass19 = strPredicate18.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector20 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass19);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier21 = objArrayCollector20.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction22 = objArrayCollector20.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = objArrayCollector20.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer24 = objArrayCollector20.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer25 = objArrayCollector20.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer26 = objArrayCollector20.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList28 = objectToStringComparatorFailableStream1.collect(objListSupplier16, objListBiConsumer26, objListBiConsumer27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objListFunction13);
        org.junit.Assert.assertNotNull(objListBinaryOperator14);
        org.junit.Assert.assertNotNull(objListBinaryOperator15);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(objListSupplier21);
        org.junit.Assert.assertNotNull(objListFunction22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(objListBiConsumer24);
        org.junit.Assert.assertNotNull(objListBiConsumer25);
        org.junit.Assert.assertNotNull(objListBiConsumer26);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        java.lang.Class<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>> characteristicsCollectionClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>> characteristicsCollectionEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>>(characteristicsCollectionClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream5 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsStream5);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector6 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator8 = objArrayCollector6.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector6.combiner();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray10 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListBinaryOperator8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector6 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector6.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector6.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector6.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = objArrayCollector6.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector6.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction18 = objArrayCollector16.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = objArrayCollector16.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer20 = objArrayCollector16.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList22 = objectToStringComparatorFailableStream1.collect(objListSupplier12, objListBiConsumer20, objListBiConsumer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objListFunction8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(objListSupplier10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListFunction18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(objListBiConsumer20);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean10 = strComparableCheckBuilder1.between("", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = objArrayCollector11.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream13 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass16 = strPredicate15.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector17 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass16);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier18 = objArrayCollector17.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector17.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer20 = objArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = objArrayCollector17.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream22 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet21);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass25 = strPredicate24.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector26 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass25);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier27 = objArrayCollector26.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction28 = objArrayCollector26.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = objArrayCollector26.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = objArrayCollector26.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = objArrayCollector26.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream32 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet31);
        java.util.function.Predicate<java.lang.String> strPredicate34 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass35 = strPredicate34.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector36 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass35);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier37 = objArrayCollector36.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction38 = objArrayCollector36.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet39 = objArrayCollector36.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet40 = objArrayCollector36.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream41 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet40);
        java.util.Set[] setArray43 = new java.util.Set[5];
        @SuppressWarnings("unchecked")
        java.util.Set<java.util.stream.Collector.Characteristics>[] characteristicsSetArray44 = (java.util.Set<java.util.stream.Collector.Characteristics>[]) setArray43;
        characteristicsSetArray44[0] = characteristicsSet6;
        characteristicsSetArray44[1] = characteristicsSet12;
        characteristicsSetArray44[2] = characteristicsSet21;
        characteristicsSetArray44[3] = characteristicsSet31;
        characteristicsSetArray44[4] = characteristicsSet40;
        java.util.stream.Stream<java.util.Set<java.util.stream.Collector.Characteristics>> characteristicsSetStream55 = org.apache.commons.lang3.stream.Streams.of(characteristicsSetArray44);
        java.util.stream.Stream<java.util.Collection<java.util.stream.Collector.Characteristics>> characteristicsCollectionStream56 = org.apache.commons.lang3.stream.Streams.of((java.util.Collection<java.util.stream.Collector.Characteristics>[]) characteristicsSetArray44);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsStream13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objListSupplier18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(characteristicsFailableStream22);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objListSupplier27);
        org.junit.Assert.assertNotNull(objListFunction28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(characteristicsStream32);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(objListSupplier37);
        org.junit.Assert.assertNotNull(objListFunction38);
        org.junit.Assert.assertNotNull(characteristicsSet39);
        org.junit.Assert.assertNotNull(characteristicsSet40);
        org.junit.Assert.assertNotNull(characteristicsFailableStream41);
        org.junit.Assert.assertNotNull(setArray43);
        org.junit.Assert.assertNotNull(characteristicsSetArray44);
        org.junit.Assert.assertNotNull(characteristicsSetStream55);
        org.junit.Assert.assertNotNull(characteristicsCollectionStream56);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        java.lang.Class<java.util.function.BiFunction<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>, java.util.List<java.lang.Object>>> objListBiFunctionClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.function.BiFunction<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>, java.util.List<java.lang.Object>>> objListBiFunctionArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.function.BiFunction<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>, java.util.List<java.lang.Object>>>(objListBiFunctionClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator14.reversed();
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator14.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator17 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator18 = objectToStringComparator17.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate20 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams21 = new org.apache.commons.lang3.stream.Streams();
        int int22 = objectToStringComparator17.compare((java.lang.Object) strPredicate20, (java.lang.Object) streams21);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder24 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int27 = objectToStringComparator17.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate26);
        java.util.Comparator<java.lang.Object> objComparator28 = objectToStringComparator17.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator29 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator30 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator31 = objectToStringComparator30.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate33 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj34 = null;
        int int35 = objectToStringComparator30.compare((java.lang.Object) "hi!", obj34);
        java.util.Comparator<java.lang.Object> objComparator36 = objectToStringComparator29.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator30);
        java.util.Comparator<java.lang.Object> objComparator37 = objectToStringComparator17.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator30);
        java.util.Comparator<java.lang.Object> objComparator38 = objComparator16.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator30);
        java.util.Comparator<java.lang.Object> objComparator39 = objComparator13.thenComparing(objComparator16);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator40 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator41 = objectToStringComparator40.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams44 = new org.apache.commons.lang3.stream.Streams();
        int int45 = objectToStringComparator40.compare((java.lang.Object) strPredicate43, (java.lang.Object) streams44);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator46 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator47 = objectToStringComparator46.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate49 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj50 = null;
        int int51 = objectToStringComparator46.compare((java.lang.Object) "hi!", obj50);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator52 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator53 = objectToStringComparator52.reversed();
        java.util.Comparator<java.lang.Object> objComparator54 = objectToStringComparator46.thenComparing(objComparator53);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator55 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator56 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator57 = objectToStringComparator56.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate59 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj60 = null;
        int int61 = objectToStringComparator56.compare((java.lang.Object) "hi!", obj60);
        java.util.Comparator<java.lang.Object> objComparator62 = objectToStringComparator55.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator56);
        int int64 = objectToStringComparator46.compare((java.lang.Object) objectToStringComparator55, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator65 = objectToStringComparator40.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator55);
        java.util.Comparator<java.lang.Object> objComparator66 = objectToStringComparator40.reversed();
        java.util.Comparator<java.lang.Object> objComparator67 = objComparator39.thenComparing(objComparator66);
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(objectToStringComparator14);
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertNotNull(objComparator18);
        org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-16) + "'", int22 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder24);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-7) + "'", int27 == (-7));
        org.junit.Assert.assertNotNull(objComparator28);
        org.junit.Assert.assertNotNull(objComparator31);
        org.junit.Assert.assertNotNull(strPredicate33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(objComparator36);
        org.junit.Assert.assertNotNull(objComparator37);
        org.junit.Assert.assertNotNull(objComparator38);
        org.junit.Assert.assertNotNull(objComparator39);
        org.junit.Assert.assertNotNull(objComparator41);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-16) + "'", int45 == (-16));
        org.junit.Assert.assertNotNull(objComparator47);
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(objComparator53);
        org.junit.Assert.assertNotNull(objComparator54);
        org.junit.Assert.assertNotNull(objComparator57);
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(objComparator62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 62 + "'", int64 == 62);
        org.junit.Assert.assertNotNull(objComparator65);
        org.junit.Assert.assertNotNull(objComparator66);
        org.junit.Assert.assertNotNull(objComparator67);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        java.util.stream.Stream<java.util.ArrayList<java.util.stream.Collector.Characteristics>[]> characteristicsListArrayStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.ArrayList<java.util.stream.Collector.Characteristics>[]> characteristicsListArrayFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.util.ArrayList<java.util.stream.Collector.Characteristics>[]>(characteristicsListArrayStream0);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean26 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean28 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        java.util.stream.Stream<java.util.function.BiFunction<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>, java.util.List<java.lang.Object>>> objListBiFunctionStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.function.BiFunction<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>, java.util.List<java.lang.Object>>> objListBiFunctionFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.util.function.BiFunction<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>, java.util.List<java.lang.Object>>>(objListBiFunctionStream0);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListFunction9);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        java.lang.Class<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>>(strComparableCheckBuilderClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass12 = strPredicate11.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector13 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier14 = objArrayCollector13.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator15 = objArrayCollector13.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = objArrayCollector13.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream17 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet16);
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass20 = strPredicate19.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector21 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass20);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier22 = objArrayCollector21.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction23 = objArrayCollector21.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer24 = objArrayCollector21.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = objArrayCollector21.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer26 = objArrayCollector21.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = objArrayCollector21.characteristics();
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass30 = strPredicate29.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector31 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass30);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = objArrayCollector31.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream33 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet32);
        java.util.function.Predicate<java.lang.String> strPredicate35 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass36 = strPredicate35.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector37 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass36);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier38 = objArrayCollector37.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction39 = objArrayCollector37.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet40 = objArrayCollector37.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream41 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet40);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream42 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet40);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream43 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet40);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream44 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet40);
        java.lang.Iterable[] iterableArray46 = new java.lang.Iterable[5];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<java.util.stream.Collector.Characteristics>[] characteristicsIterableArray47 = (java.lang.Iterable<java.util.stream.Collector.Characteristics>[]) iterableArray46;
        characteristicsIterableArray47[0] = characteristicsSet8;
        characteristicsIterableArray47[1] = characteristicsSet16;
        characteristicsIterableArray47[2] = characteristicsSet27;
        characteristicsIterableArray47[3] = characteristicsSet32;
        characteristicsIterableArray47[4] = characteristicsSet40;
        java.util.stream.Stream<java.lang.Iterable<java.util.stream.Collector.Characteristics>> characteristicsIterableStream58 = org.apache.commons.lang3.stream.Streams.of(characteristicsIterableArray47);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(objListSupplier14);
        org.junit.Assert.assertNotNull(objListBinaryOperator15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(characteristicsFailableStream17);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(objListSupplier22);
        org.junit.Assert.assertNotNull(objListFunction23);
        org.junit.Assert.assertNotNull(objListBiConsumer24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(objListBiConsumer26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(characteristicsSet32);
        org.junit.Assert.assertNotNull(characteristicsFailableStream33);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(objListSupplier38);
        org.junit.Assert.assertNotNull(objListFunction39);
        org.junit.Assert.assertNotNull(characteristicsSet40);
        org.junit.Assert.assertNotNull(characteristicsStream41);
        org.junit.Assert.assertNotNull(characteristicsFailableStream42);
        org.junit.Assert.assertNotNull(characteristicsStream43);
        org.junit.Assert.assertNotNull(characteristicsFailableStream44);
        org.junit.Assert.assertNotNull(iterableArray46);
        org.junit.Assert.assertNotNull(characteristicsIterableArray47);
        org.junit.Assert.assertNotNull(characteristicsIterableStream58);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        java.lang.Class<java.util.Set<java.util.stream.Collector.Characteristics>> characteristicsSetClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.Set<java.util.stream.Collector.Characteristics>> characteristicsSetEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.Set<java.util.stream.Collector.Characteristics>>(characteristicsSetClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.lang.Class<?> wildcardClass9 = objListSupplier8.getClass();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector8 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass7);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector8.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector8.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = objArrayCollector8.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = objArrayCollector8.characteristics();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray13 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator7 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator7.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder10 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean12 = strComparableCheckBuilder10.greaterThan("hi!");
        boolean boolean15 = strComparableCheckBuilder10.between("hi!", "");
        boolean boolean17 = strComparableCheckBuilder10.lessThanOrEqualTo("hi!");
        int int19 = objectToStringComparator7.compare((java.lang.Object) strComparableCheckBuilder10, (java.lang.Object) 4);
        java.util.Comparator<java.lang.Object> objComparator20 = objectToStringComparator7.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator21 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator21.reversed();
        java.util.Comparator<java.lang.Object> objComparator23 = objComparator22.reversed();
        java.util.Comparator<java.lang.Object> objComparator24 = objectToStringComparator7.thenComparing(objComparator23);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator26 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator7, objectToStringComparatorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(objectToStringComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertNotNull(objComparator20);
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertNotNull(objComparator24);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        java.lang.Class<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>[]> intBaseStreamArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>[]> intBaseStreamArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>[]>(intBaseStreamArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator9.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder12 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean14 = strComparableCheckBuilder12.greaterThan("hi!");
        boolean boolean17 = strComparableCheckBuilder12.between("hi!", "");
        boolean boolean19 = strComparableCheckBuilder12.lessThanOrEqualTo("hi!");
        int int21 = objectToStringComparator9.compare((java.lang.Object) strComparableCheckBuilder12, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass24 = strPredicate23.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector25 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass24);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier26 = objArrayCollector25.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction27 = objArrayCollector25.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = objArrayCollector25.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream29 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet28);
        java.util.function.Predicate<java.lang.String> strPredicate31 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass32 = strPredicate31.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector33 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass32);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier34 = objArrayCollector33.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction35 = objArrayCollector33.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet36 = objArrayCollector33.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet37 = objArrayCollector33.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream38 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet37);
        int int39 = objectToStringComparator9.compare((java.lang.Object) characteristicsFailableStream29, (java.lang.Object) characteristicsSet37);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator40 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator41 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator42 = objectToStringComparator41.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate44 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams45 = new org.apache.commons.lang3.stream.Streams();
        int int46 = objectToStringComparator41.compare((java.lang.Object) strPredicate44, (java.lang.Object) streams45);
        java.util.Comparator<java.lang.Object> objComparator47 = objectToStringComparator40.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator41);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator48 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator49 = objectToStringComparator48.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate51 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams52 = new org.apache.commons.lang3.stream.Streams();
        int int53 = objectToStringComparator48.compare((java.lang.Object) strPredicate51, (java.lang.Object) streams52);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator54 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator55 = objectToStringComparator54.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj58 = null;
        int int59 = objectToStringComparator54.compare((java.lang.Object) "hi!", obj58);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator60 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator61 = objectToStringComparator60.reversed();
        java.util.Comparator<java.lang.Object> objComparator62 = objectToStringComparator54.thenComparing(objComparator61);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator63 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator64 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator65 = objectToStringComparator64.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate67 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj68 = null;
        int int69 = objectToStringComparator64.compare((java.lang.Object) "hi!", obj68);
        java.util.Comparator<java.lang.Object> objComparator70 = objectToStringComparator63.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator64);
        int int72 = objectToStringComparator54.compare((java.lang.Object) objectToStringComparator63, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator73 = objectToStringComparator48.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator63);
        java.util.Comparator<java.lang.Object> objComparator74 = objectToStringComparator41.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator48);
        java.util.Comparator<java.lang.Object> objComparator75 = objectToStringComparator9.thenComparing(objComparator74);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator77 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator9, objectToStringComparatorBinaryOperator76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNotNull(objectToStringComparator9);
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(objListSupplier26);
        org.junit.Assert.assertNotNull(objListFunction27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(characteristicsFailableStream29);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(objListSupplier34);
        org.junit.Assert.assertNotNull(objListFunction35);
        org.junit.Assert.assertNotNull(characteristicsSet36);
        org.junit.Assert.assertNotNull(characteristicsSet37);
        org.junit.Assert.assertNotNull(characteristicsStream38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20 + "'", int39 == 20);
        org.junit.Assert.assertNotNull(objComparator42);
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-16) + "'", int46 == (-16));
        org.junit.Assert.assertNotNull(objComparator47);
        org.junit.Assert.assertNotNull(objComparator49);
        org.junit.Assert.assertNotNull(strPredicate51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-16) + "'", int53 == (-16));
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(objComparator61);
        org.junit.Assert.assertNotNull(objComparator62);
        org.junit.Assert.assertNotNull(objComparator65);
        org.junit.Assert.assertNotNull(strPredicate67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(objComparator70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 62 + "'", int72 == 62);
        org.junit.Assert.assertNotNull(objComparator73);
        org.junit.Assert.assertNotNull(objComparator74);
        org.junit.Assert.assertNotNull(objComparator75);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams10 = new org.apache.commons.lang3.stream.Streams();
        int int11 = objectToStringComparator6.compare((java.lang.Object) strPredicate9, (java.lang.Object) streams10);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder13 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int16 = objectToStringComparator6.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate15);
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator18 = objectToStringComparator6.reversed();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator6, objectToStringComparatorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-16) + "'", int11 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-7) + "'", int16 == (-7));
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(objComparator18);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        java.lang.Class<java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>> objCollectorClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>> objCollectorEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>>(objCollectorClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        java.lang.Class<java.util.function.Predicate<java.lang.String>> strPredicateClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.function.Predicate<java.lang.String>> strPredicateEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.function.Predicate<java.lang.String>>(strPredicateClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        java.lang.Class<java.io.Serializable> serializableClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.io.Serializable> serializableEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.io.Serializable>(serializableClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((-62));
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean5 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean8 = strComparableCheckBuilder1.between("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator4 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator5 = objectToStringComparator4.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder7 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean9 = strComparableCheckBuilder7.greaterThan("hi!");
        boolean boolean12 = strComparableCheckBuilder7.betweenExclusive("", "");
        boolean boolean14 = strComparableCheckBuilder7.equalTo("hi!");
        boolean boolean16 = strComparableCheckBuilder7.lessThan("");
        boolean boolean18 = strComparableCheckBuilder7.equalTo("");
        boolean boolean20 = strComparableCheckBuilder7.greaterThanOrEqualTo("hi!");
        boolean boolean23 = strComparableCheckBuilder7.between("hi!", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder25 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean27 = strComparableCheckBuilder25.greaterThan("hi!");
        boolean boolean30 = strComparableCheckBuilder25.betweenExclusive("", "");
        boolean boolean32 = strComparableCheckBuilder25.equalTo("hi!");
        boolean boolean34 = strComparableCheckBuilder25.lessThan("");
        boolean boolean36 = strComparableCheckBuilder25.lessThan("");
        boolean boolean38 = strComparableCheckBuilder25.lessThanOrEqualTo("");
        boolean boolean41 = strComparableCheckBuilder25.between("hi!", "hi!");
        boolean boolean44 = strComparableCheckBuilder25.betweenExclusive("hi!", "hi!");
        boolean boolean46 = strComparableCheckBuilder25.lessThanOrEqualTo("hi!");
        boolean boolean48 = strComparableCheckBuilder25.greaterThan("hi!");
        boolean boolean50 = strComparableCheckBuilder25.lessThan("hi!");
        boolean boolean52 = strComparableCheckBuilder25.lessThanOrEqualTo("");
        int int53 = objectToStringComparator4.compare((java.lang.Object) "hi!", (java.lang.Object) "");
        java.util.Comparator<java.lang.Object> objComparator54 = objectToStringComparator4.reversed();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator56 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator4, objectToStringComparatorBinaryOperator55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(objectToStringComparator4);
        org.junit.Assert.assertNotNull(objComparator5);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(objComparator54);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer9 = objArrayCollector3.accumulator();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(objListBiConsumer9);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction6 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector3.finisher();
        java.lang.Class<?> wildcardClass9 = objArrayCollector3.getClass();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(objListFunction6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(objListFunction8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator9.reversed();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator9, objectToStringComparatorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNotNull(objComparator10);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean7 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean10 = strComparableCheckBuilder1.between("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean6 = strComparableCheckBuilder1.equalTo("");
        boolean boolean8 = strComparableCheckBuilder1.lessThan("");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean13 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector8 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass7);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector8.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction10 = objArrayCollector8.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer11 = objArrayCollector8.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer12 = objArrayCollector8.accumulator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray13 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListFunction10);
        org.junit.Assert.assertNotNull(objListBiConsumer11);
        org.junit.Assert.assertNotNull(objListBiConsumer12);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate5 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass6 = strPredicate5.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector7 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass6);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector7.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector7.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector7.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector7.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector15 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass14);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction17 = objArrayCollector15.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer18 = objArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = objArrayCollector15.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier20 = objArrayCollector15.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator21 = objArrayCollector15.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer22 = objArrayCollector15.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList24 = objectToStringComparatorFailableStream1.collect(objListSupplier11, objListBiConsumer22, objListBiConsumer23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(strPredicate5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListFunction9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(objListFunction17);
        org.junit.Assert.assertNotNull(objListBiConsumer18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(objListSupplier20);
        org.junit.Assert.assertNotNull(objListBinaryOperator21);
        org.junit.Assert.assertNotNull(objListBiConsumer22);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        java.lang.Class<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[]> objArrayCollectorArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[]> objArrayCollectorArrayArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[]>(objArrayCollectorArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        java.lang.Class<java.util.function.Supplier<java.util.List<java.lang.Object>>> objListSupplierClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.function.Supplier<java.util.List<java.lang.Object>>> objListSupplierArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.function.Supplier<java.util.List<java.lang.Object>>>(objListSupplierClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean26 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean28 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean31 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        java.lang.Class<java.util.AbstractList<java.util.stream.Collector.Characteristics>> characteristicsListClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.AbstractList<java.util.stream.Collector.Characteristics>> characteristicsListEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.AbstractList<java.util.stream.Collector.Characteristics>>(characteristicsListClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer7 = objArrayCollector3.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector12 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass11);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier13 = objArrayCollector12.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction14 = objArrayCollector12.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = objArrayCollector12.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer16 = objArrayCollector12.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer17 = objArrayCollector12.accumulator();
        java.util.function.BiConsumer[] biConsumerArray19 = new java.util.function.BiConsumer[2];
        @SuppressWarnings("unchecked")
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object>[] objListBiConsumerArray20 = (java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object>[]) biConsumerArray19;
        objListBiConsumerArray20[0] = objListBiConsumer8;
        objListBiConsumerArray20[1] = objListBiConsumer17;
        java.util.stream.Stream<java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object>> objListBiConsumerStream25 = org.apache.commons.lang3.stream.Streams.of(objListBiConsumerArray20);
        java.util.stream.Stream<java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object>> objListBiConsumerStream26 = org.apache.commons.lang3.stream.Streams.of(objListBiConsumerArray20);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListBiConsumer7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(objListSupplier13);
        org.junit.Assert.assertNotNull(objListFunction14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(objListBiConsumer16);
        org.junit.Assert.assertNotNull(objListBiConsumer17);
        org.junit.Assert.assertNotNull(biConsumerArray19);
        org.junit.Assert.assertNotNull(objListBiConsumerArray20);
        org.junit.Assert.assertNotNull(objListBiConsumerStream25);
        org.junit.Assert.assertNotNull(objListBiConsumerStream26);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((int) (short) -1);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams4 = new org.apache.commons.lang3.stream.Streams();
        int int5 = objectToStringComparator0.compare((java.lang.Object) strPredicate3, (java.lang.Object) streams4);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder7 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int10 = objectToStringComparator0.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate9);
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator12 = objectToStringComparator0.reversed();
        java.util.stream.Collector.Characteristics[] characteristicsArray13 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList14 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList14, characteristicsArray13);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream16 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList14);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream17 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList14);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream18 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList14);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder20 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean22 = strComparableCheckBuilder20.greaterThan("hi!");
        boolean boolean25 = strComparableCheckBuilder20.betweenExclusive("", "");
        boolean boolean27 = strComparableCheckBuilder20.equalTo("hi!");
        boolean boolean29 = strComparableCheckBuilder20.lessThan("");
        boolean boolean31 = strComparableCheckBuilder20.lessThan("hi!");
        boolean boolean33 = strComparableCheckBuilder20.greaterThanOrEqualTo("hi!");
        boolean boolean35 = strComparableCheckBuilder20.greaterThanOrEqualTo("hi!");
        boolean boolean38 = strComparableCheckBuilder20.betweenExclusive("", "");
        int int39 = objectToStringComparator0.compare((java.lang.Object) characteristicsList14, (java.lang.Object) "");
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream40 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList14);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-16) + "'", int5 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(objComparator12);
        org.junit.Assert.assertNotNull(characteristicsArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream16);
        org.junit.Assert.assertNotNull(characteristicsFailableStream17);
        org.junit.Assert.assertNotNull(characteristicsStream18);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(characteristicsFailableStream40);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean18 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean21 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean23 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean16 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        java.lang.Class<java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]>> objListFunctionClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]>> objListFunctionEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]>>(objListFunctionClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("");
        boolean boolean10 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean12 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.equalTo("");
        boolean boolean24 = strComparableCheckBuilder1.equalTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj5 = null;
        int int6 = objectToStringComparator1.compare((java.lang.Object) "hi!", obj5);
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
        java.lang.Class<?> wildcardClass8 = objectToStringComparator0.getClass();
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean23 = strComparableCheckBuilder1.between("", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        java.util.stream.Stream<java.util.stream.IntStream> intStreamStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.IntStream> intStreamFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.IntStream>(intStreamStream0);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        java.lang.Class<java.util.Collection<java.util.stream.Collector.Characteristics>[]> characteristicsCollectionArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.Collection<java.util.stream.Collector.Characteristics>[]> characteristicsCollectionArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.Collection<java.util.stream.Collector.Characteristics>[]>(characteristicsCollectionArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream4 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsStream4);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean13 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector11.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator13 = objArrayCollector11.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction14 = objArrayCollector11.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator15 = objArrayCollector11.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction16 = objArrayCollector11.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector11.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass20 = strPredicate19.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector21 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass20);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier22 = objArrayCollector21.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction23 = objArrayCollector21.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = objArrayCollector21.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer25 = objArrayCollector21.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList27 = objectToStringComparatorFailableStream1.collect(objListSupplier17, objListBiConsumer25, objListBiConsumer26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objListBinaryOperator13);
        org.junit.Assert.assertNotNull(objListFunction14);
        org.junit.Assert.assertNotNull(objListBinaryOperator15);
        org.junit.Assert.assertNotNull(objListFunction16);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(objListSupplier22);
        org.junit.Assert.assertNotNull(objListFunction23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(objListBiConsumer25);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector12 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass11);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier13 = objArrayCollector12.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator14 = objArrayCollector12.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction15 = objArrayCollector12.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector12.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector12.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass20 = strPredicate19.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector21 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass20);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier22 = objArrayCollector21.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction23 = objArrayCollector21.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer24 = objArrayCollector21.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = objArrayCollector21.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer26 = objArrayCollector21.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier27 = objArrayCollector21.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer28 = objArrayCollector21.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList30 = objectToStringComparatorFailableStream1.collect(objListSupplier17, objListBiConsumer28, objListBiConsumer29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(objListSupplier13);
        org.junit.Assert.assertNotNull(objListBinaryOperator14);
        org.junit.Assert.assertNotNull(objListFunction15);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(objListSupplier22);
        org.junit.Assert.assertNotNull(objListFunction23);
        org.junit.Assert.assertNotNull(objListBiConsumer24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(objListBiConsumer26);
        org.junit.Assert.assertNotNull(objListSupplier27);
        org.junit.Assert.assertNotNull(objListBiConsumer28);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        java.lang.Class<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>[]> characteristicsCollectionArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>[]> characteristicsCollectionArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>[]>(characteristicsCollectionArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream4 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        java.lang.Class<java.lang.AutoCloseable> autoCloseableClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.AutoCloseable> autoCloseableArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.AutoCloseable>(autoCloseableClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean26 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean28 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean30 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean7 = strComparableCheckBuilder1.lessThan("hi!");
        java.lang.Class<?> wildcardClass8 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        java.lang.Class<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>[][]> intBaseStreamArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>[][]> intBaseStreamArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream>[][]>(intBaseStreamArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass9 = strPredicate8.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass9);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction12 = objArrayCollector10.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer13 = objArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = objArrayCollector10.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier15 = objArrayCollector10.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator16 = objArrayCollector10.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer17 = objArrayCollector10.accumulator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray18 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(objListFunction12);
        org.junit.Assert.assertNotNull(objListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(objListSupplier15);
        org.junit.Assert.assertNotNull(objListBinaryOperator16);
        org.junit.Assert.assertNotNull(objListBiConsumer17);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean18 = strComparableCheckBuilder1.lessThan("");
        boolean boolean20 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThan("hi!");
        java.lang.Class<?> wildcardClass20 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        java.lang.Class<java.util.AbstractList<java.util.stream.Collector.Characteristics>> characteristicsListClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.AbstractList<java.util.stream.Collector.Characteristics>> characteristicsListEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.AbstractList<java.util.stream.Collector.Characteristics>>(characteristicsListClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        java.lang.Class<java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]>> objListFunctionClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]>> objListFunctionEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]>>(objListFunctionClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams5 = new org.apache.commons.lang3.stream.Streams();
        int int6 = objectToStringComparator1.compare((java.lang.Object) strPredicate4, (java.lang.Object) streams5);
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int11 = objectToStringComparator8.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector15 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass14);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction17 = objArrayCollector15.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer18 = objArrayCollector15.accumulator();
        int int19 = objectToStringComparator0.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer18);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams24 = new org.apache.commons.lang3.stream.Streams();
        int int25 = objectToStringComparator20.compare((java.lang.Object) strPredicate23, (java.lang.Object) streams24);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int30 = objectToStringComparator20.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate29);
        java.util.Comparator<java.lang.Object> objComparator31 = objectToStringComparator20.reversed();
        java.util.Comparator<java.lang.Object> objComparator32 = objectToStringComparator20.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder34 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean36 = strComparableCheckBuilder34.greaterThanOrEqualTo("");
        int int37 = objectToStringComparator0.compare((java.lang.Object) objComparator32, (java.lang.Object) boolean36);
        java.util.function.Predicate<java.lang.String> strPredicate39 = org.apache.commons.lang3.compare.ComparableUtils.gt("");
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass42 = strPredicate41.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector43 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass42);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier44 = objArrayCollector43.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction45 = objArrayCollector43.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer46 = objArrayCollector43.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet47 = objArrayCollector43.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier48 = objArrayCollector43.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator49 = objArrayCollector43.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet50 = objArrayCollector43.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator51 = objArrayCollector43.combiner();
        int int52 = objectToStringComparator0.compare((java.lang.Object) strPredicate39, (java.lang.Object) objArrayCollector43);
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer53 = objArrayCollector43.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction54 = objArrayCollector43.finisher();
        java.lang.Class<?> wildcardClass55 = objListFunction54.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.Object> objEventListenerSupport56 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Class org.apache.commons.lang3.stream.Streams$ArrayCollector$$Lambda$273/1412171774 is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-16) + "'", int6 == (-16));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(objListFunction17);
        org.junit.Assert.assertNotNull(objListBiConsumer18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-62) + "'", int19 == (-62));
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-16) + "'", int25 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-7) + "'", int30 == (-7));
        org.junit.Assert.assertNotNull(objComparator31);
        org.junit.Assert.assertNotNull(objComparator32);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-10) + "'", int37 == (-10));
        org.junit.Assert.assertNotNull(strPredicate39);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(objListSupplier44);
        org.junit.Assert.assertNotNull(objListFunction45);
        org.junit.Assert.assertNotNull(objListBiConsumer46);
        org.junit.Assert.assertNotNull(characteristicsSet47);
        org.junit.Assert.assertNotNull(objListSupplier48);
        org.junit.Assert.assertNotNull(objListBinaryOperator49);
        org.junit.Assert.assertNotNull(characteristicsSet50);
        org.junit.Assert.assertNotNull(objListBinaryOperator51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-16) + "'", int52 == (-16));
        org.junit.Assert.assertNotNull(objListBiConsumer53);
        org.junit.Assert.assertNotNull(objListFunction54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        java.lang.Class<?> wildcardClass10 = characteristicsSet9.getClass();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean7 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean9 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean11 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean13 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean15 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean17 = strComparableCheckBuilder1.greaterThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer9 = objArrayCollector3.accumulator();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(objListBiConsumer9);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean9 = strComparableCheckBuilder1.greaterThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean19 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean22 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed(100);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        java.lang.Class<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>>(strComparableCheckBuilderClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

//    @Disabled
//    @Test
//    public void test0331() throws Throwable {
//        if (debug)
//            System.out.format("%n%s%n", "RegressionTest0.test0331");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj4 = null;
//        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder7 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        boolean boolean10 = strComparableCheckBuilder7.betweenExclusive("", "");
//        boolean boolean12 = strComparableCheckBuilder7.greaterThan("");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator14.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj18 = null;
//        int int19 = objectToStringComparator14.compare((java.lang.Object) "hi!", obj18);
//        java.util.Comparator<java.lang.Object> objComparator20 = objectToStringComparator13.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator14);
//        int int21 = objectToStringComparator0.compare((java.lang.Object) "", (java.lang.Object) objComparator20);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator22 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
//        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator22.reversed();
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder25 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        boolean boolean27 = strComparableCheckBuilder25.greaterThan("hi!");
//        boolean boolean30 = strComparableCheckBuilder25.between("hi!", "");
//        boolean boolean32 = strComparableCheckBuilder25.lessThanOrEqualTo("hi!");
//        int int34 = objectToStringComparator22.compare((java.lang.Object) strComparableCheckBuilder25, (java.lang.Object) 4);
//        java.util.Comparator<java.lang.Object> objComparator35 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator22);
//        java.util.Comparator<java.lang.Object> objComparator36 = objComparator35.reversed();
//        org.junit.Assert.assertNotNull(objComparator1);
//        org.junit.Assert.assertNotNull(strPredicate3);
//        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder7);
//        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
//        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
//        org.junit.Assert.assertNotNull(objComparator15);
//        org.junit.Assert.assertNotNull(strPredicate17);
//        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
//        org.junit.Assert.assertNotNull(objComparator20);
//        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-50) + "'", int21 == (-50));
//        org.junit.Assert.assertNotNull(objectToStringComparator22);
//        org.junit.Assert.assertNotNull(objComparator23);
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder25);
//        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
//        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
//        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
//        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 59 + "'", int34 == 59);
//        org.junit.Assert.assertNotNull(objComparator35);
//        org.junit.Assert.assertNotNull(objComparator36);
//    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = objArrayCollector11.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream13 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass16 = strPredicate15.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector17 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass16);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier18 = objArrayCollector17.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector17.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer20 = objArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = objArrayCollector17.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream22 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet21);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass25 = strPredicate24.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector26 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass25);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier27 = objArrayCollector26.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction28 = objArrayCollector26.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = objArrayCollector26.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = objArrayCollector26.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = objArrayCollector26.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream32 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet31);
        java.util.function.Predicate<java.lang.String> strPredicate34 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass35 = strPredicate34.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector36 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass35);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier37 = objArrayCollector36.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction38 = objArrayCollector36.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet39 = objArrayCollector36.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet40 = objArrayCollector36.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream41 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet40);
        java.util.Set[] setArray43 = new java.util.Set[5];
        @SuppressWarnings("unchecked")
        java.util.Set<java.util.stream.Collector.Characteristics>[] characteristicsSetArray44 = (java.util.Set<java.util.stream.Collector.Characteristics>[]) setArray43;
        characteristicsSetArray44[0] = characteristicsSet6;
        characteristicsSetArray44[1] = characteristicsSet12;
        characteristicsSetArray44[2] = characteristicsSet21;
        characteristicsSetArray44[3] = characteristicsSet31;
        characteristicsSetArray44[4] = characteristicsSet40;
        java.util.stream.Stream<java.util.Set<java.util.stream.Collector.Characteristics>> characteristicsSetStream55 = org.apache.commons.lang3.stream.Streams.of(characteristicsSetArray44);
        java.lang.Class<?> wildcardClass56 = characteristicsSetStream55.getClass();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsStream13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objListSupplier18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(characteristicsFailableStream22);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objListSupplier27);
        org.junit.Assert.assertNotNull(objListFunction28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(characteristicsStream32);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(objListSupplier37);
        org.junit.Assert.assertNotNull(objListFunction38);
        org.junit.Assert.assertNotNull(characteristicsSet39);
        org.junit.Assert.assertNotNull(characteristicsSet40);
        org.junit.Assert.assertNotNull(characteristicsFailableStream41);
        org.junit.Assert.assertNotNull(setArray43);
        org.junit.Assert.assertNotNull(characteristicsSetArray44);
        org.junit.Assert.assertNotNull(characteristicsSetStream55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean17 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean21 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector3.accumulator();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector12 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass11);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier13 = objArrayCollector12.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass16 = strPredicate15.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector17 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass16);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier18 = objArrayCollector17.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector17.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator20 = objArrayCollector17.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction21 = objArrayCollector17.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = objArrayCollector17.characteristics();
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass25 = strPredicate24.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector26 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass25);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier27 = objArrayCollector26.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction28 = objArrayCollector26.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator29 = objArrayCollector26.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator30 = objArrayCollector26.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier31 = objArrayCollector26.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = objArrayCollector26.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator33 = objArrayCollector26.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction34 = objArrayCollector26.finisher();
        org.apache.commons.lang3.stream.Streams.ArrayCollector[] arrayCollectorArray36 = new org.apache.commons.lang3.stream.Streams.ArrayCollector[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[] objArrayCollectorArray37 = (org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[]) arrayCollectorArray36;
        objArrayCollectorArray37[0] = objArrayCollector3;
        objArrayCollectorArray37[1] = objArrayCollector12;
        objArrayCollectorArray37[2] = objArrayCollector17;
        objArrayCollectorArray37[3] = objArrayCollector26;
        java.util.function.Predicate<java.lang.String> strPredicate47 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass48 = strPredicate47.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector49 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass48);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier50 = objArrayCollector49.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction51 = objArrayCollector49.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet52 = objArrayCollector49.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction53 = objArrayCollector49.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer54 = objArrayCollector49.accumulator();
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass57 = strPredicate56.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector58 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass57);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier59 = objArrayCollector58.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate61 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass62 = strPredicate61.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector63 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass62);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier64 = objArrayCollector63.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction65 = objArrayCollector63.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator66 = objArrayCollector63.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction67 = objArrayCollector63.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet68 = objArrayCollector63.characteristics();
        java.util.function.Predicate<java.lang.String> strPredicate70 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass71 = strPredicate70.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector72 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass71);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier73 = objArrayCollector72.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction74 = objArrayCollector72.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator75 = objArrayCollector72.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator76 = objArrayCollector72.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier77 = objArrayCollector72.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet78 = objArrayCollector72.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator79 = objArrayCollector72.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction80 = objArrayCollector72.finisher();
        org.apache.commons.lang3.stream.Streams.ArrayCollector[] arrayCollectorArray82 = new org.apache.commons.lang3.stream.Streams.ArrayCollector[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[] objArrayCollectorArray83 = (org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[]) arrayCollectorArray82;
        objArrayCollectorArray83[0] = objArrayCollector49;
        objArrayCollectorArray83[1] = objArrayCollector58;
        objArrayCollectorArray83[2] = objArrayCollector63;
        objArrayCollectorArray83[3] = objArrayCollector72;
        org.apache.commons.lang3.stream.Streams.ArrayCollector[][] arrayCollectorArray93 = new org.apache.commons.lang3.stream.Streams.ArrayCollector[2][];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][] objArrayCollectorArray94 = (org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][]) arrayCollectorArray93;
        objArrayCollectorArray94[0] = objArrayCollectorArray37;
        objArrayCollectorArray94[1] = objArrayCollectorArray83;
        java.util.stream.Stream<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[]> objArrayCollectorArrayStream99 = org.apache.commons.lang3.stream.Streams.of(objArrayCollectorArray94);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(objListSupplier13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objListSupplier18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListBinaryOperator20);
        org.junit.Assert.assertNotNull(objListFunction21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objListSupplier27);
        org.junit.Assert.assertNotNull(objListFunction28);
        org.junit.Assert.assertNotNull(objListBinaryOperator29);
        org.junit.Assert.assertNotNull(objListBinaryOperator30);
        org.junit.Assert.assertNotNull(objListSupplier31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
        org.junit.Assert.assertNotNull(objListBinaryOperator33);
        org.junit.Assert.assertNotNull(objListFunction34);
        org.junit.Assert.assertNotNull(arrayCollectorArray36);
        org.junit.Assert.assertNotNull(objArrayCollectorArray37);
        org.junit.Assert.assertNotNull(strPredicate47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(objListSupplier50);
        org.junit.Assert.assertNotNull(objListFunction51);
        org.junit.Assert.assertNotNull(characteristicsSet52);
        org.junit.Assert.assertNotNull(objListFunction53);
        org.junit.Assert.assertNotNull(objListBiConsumer54);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(objListSupplier59);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(objListSupplier64);
        org.junit.Assert.assertNotNull(objListFunction65);
        org.junit.Assert.assertNotNull(objListBinaryOperator66);
        org.junit.Assert.assertNotNull(objListFunction67);
        org.junit.Assert.assertNotNull(characteristicsSet68);
        org.junit.Assert.assertNotNull(strPredicate70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(objListSupplier73);
        org.junit.Assert.assertNotNull(objListFunction74);
        org.junit.Assert.assertNotNull(objListBinaryOperator75);
        org.junit.Assert.assertNotNull(objListBinaryOperator76);
        org.junit.Assert.assertNotNull(objListSupplier77);
        org.junit.Assert.assertNotNull(characteristicsSet78);
        org.junit.Assert.assertNotNull(objListBinaryOperator79);
        org.junit.Assert.assertNotNull(objListFunction80);
        org.junit.Assert.assertNotNull(arrayCollectorArray82);
        org.junit.Assert.assertNotNull(objArrayCollectorArray83);
        org.junit.Assert.assertNotNull(arrayCollectorArray93);
        org.junit.Assert.assertNotNull(objArrayCollectorArray94);
        org.junit.Assert.assertNotNull(objArrayCollectorArrayStream99);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate5 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass6 = strPredicate5.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector7 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass6);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector7.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector7.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer10 = objArrayCollector7.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = objArrayCollector7.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector7.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction18 = objArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator19 = objArrayCollector16.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier20 = objArrayCollector16.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = objArrayCollector16.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier22 = objArrayCollector16.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction23 = objArrayCollector16.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer24 = objArrayCollector16.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList26 = objectToStringComparatorFailableStream1.collect(objListSupplier12, objListBiConsumer24, objListBiConsumer25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(strPredicate5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListFunction9);
        org.junit.Assert.assertNotNull(objListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListFunction18);
        org.junit.Assert.assertNotNull(objListBinaryOperator19);
        org.junit.Assert.assertNotNull(objListSupplier20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(objListSupplier22);
        org.junit.Assert.assertNotNull(objListFunction23);
        org.junit.Assert.assertNotNull(objListBiConsumer24);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator4 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator5 = objectToStringComparator4.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate7 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams8 = new org.apache.commons.lang3.stream.Streams();
        int int9 = objectToStringComparator4.compare((java.lang.Object) strPredicate7, (java.lang.Object) streams8);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder11 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int14 = objectToStringComparator4.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate13);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator15 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator15.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams19 = new org.apache.commons.lang3.stream.Streams();
        int int20 = objectToStringComparator15.compare((java.lang.Object) strPredicate18, (java.lang.Object) streams19);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder22 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int25 = objectToStringComparator15.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate24);
        java.util.Comparator<java.lang.Object> objComparator26 = objectToStringComparator15.reversed();
        java.util.Comparator<java.lang.Object> objComparator27 = objectToStringComparator4.thenComparing(objComparator26);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator28 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator29 = objectToStringComparator28.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate31 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams32 = new org.apache.commons.lang3.stream.Streams();
        int int33 = objectToStringComparator28.compare((java.lang.Object) strPredicate31, (java.lang.Object) streams32);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator34 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator35 = objectToStringComparator34.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate37 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj38 = null;
        int int39 = objectToStringComparator34.compare((java.lang.Object) "hi!", obj38);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator40 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator41 = objectToStringComparator40.reversed();
        java.util.Comparator<java.lang.Object> objComparator42 = objectToStringComparator34.thenComparing(objComparator41);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator43 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator44 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator45 = objectToStringComparator44.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate47 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj48 = null;
        int int49 = objectToStringComparator44.compare((java.lang.Object) "hi!", obj48);
        java.util.Comparator<java.lang.Object> objComparator50 = objectToStringComparator43.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator44);
        int int52 = objectToStringComparator34.compare((java.lang.Object) objectToStringComparator43, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator53 = objectToStringComparator28.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator43);
        java.util.Comparator<java.lang.Object> objComparator54 = objComparator26.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator28);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator56 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator28, objectToStringComparatorBinaryOperator55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(objComparator5);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-16) + "'", int9 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-7) + "'", int14 == (-7));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-16) + "'", int20 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder22);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-7) + "'", int25 == (-7));
        org.junit.Assert.assertNotNull(objComparator26);
        org.junit.Assert.assertNotNull(objComparator27);
        org.junit.Assert.assertNotNull(objComparator29);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-16) + "'", int33 == (-16));
        org.junit.Assert.assertNotNull(objComparator35);
        org.junit.Assert.assertNotNull(strPredicate37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(objComparator41);
        org.junit.Assert.assertNotNull(objComparator42);
        org.junit.Assert.assertNotNull(objComparator45);
        org.junit.Assert.assertNotNull(strPredicate47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(objComparator50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 62 + "'", int52 == 62);
        org.junit.Assert.assertNotNull(objComparator53);
        org.junit.Assert.assertNotNull(objComparator54);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(objListFunction9);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass4 = strPredicate3.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector5 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass4);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier6 = objArrayCollector5.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector5.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector11.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction13 = objArrayCollector11.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = objArrayCollector11.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator15 = objArrayCollector11.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer16 = objArrayCollector11.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList18 = objectToStringComparatorFailableStream1.collect(objListSupplier7, objListBiConsumer16, objListBiConsumer17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(objListSupplier6);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objListFunction13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(objListBinaryOperator15);
        org.junit.Assert.assertNotNull(objListBiConsumer16);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj5 = null;
        int int6 = objectToStringComparator1.compare((java.lang.Object) "hi!", obj5);
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder9 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean11 = strComparableCheckBuilder9.greaterThan("hi!");
        boolean boolean14 = strComparableCheckBuilder9.betweenExclusive("", "");
        boolean boolean16 = strComparableCheckBuilder9.equalTo("hi!");
        boolean boolean18 = strComparableCheckBuilder9.lessThan("");
        boolean boolean20 = strComparableCheckBuilder9.lessThan("");
        boolean boolean22 = strComparableCheckBuilder9.lessThanOrEqualTo("");
        boolean boolean25 = strComparableCheckBuilder9.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean29 = strComparableCheckBuilder27.greaterThan("hi!");
        boolean boolean32 = strComparableCheckBuilder27.betweenExclusive("", "");
        boolean boolean34 = strComparableCheckBuilder27.equalTo("hi!");
        boolean boolean36 = strComparableCheckBuilder27.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder38 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean40 = strComparableCheckBuilder38.greaterThan("hi!");
        boolean boolean43 = strComparableCheckBuilder38.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder45 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean47 = strComparableCheckBuilder45.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray49 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray50 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray49;
        strComparableCheckBuilderArray50[0] = strComparableCheckBuilder9;
        strComparableCheckBuilderArray50[1] = strComparableCheckBuilder27;
        strComparableCheckBuilderArray50[2] = strComparableCheckBuilder38;
        strComparableCheckBuilderArray50[3] = strComparableCheckBuilder45;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream59 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray50);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder61 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean63 = strComparableCheckBuilder61.greaterThan("hi!");
        boolean boolean66 = strComparableCheckBuilder61.betweenExclusive("", "");
        boolean boolean68 = strComparableCheckBuilder61.equalTo("hi!");
        boolean boolean70 = strComparableCheckBuilder61.lessThan("");
        boolean boolean72 = strComparableCheckBuilder61.lessThan("hi!");
        boolean boolean74 = strComparableCheckBuilder61.greaterThanOrEqualTo("hi!");
        int int75 = objectToStringComparator1.compare((java.lang.Object) strComparableCheckBuilderStream59, (java.lang.Object) boolean74);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream76 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream59);
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray49);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray50);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream59);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-10) + "'", int75 == (-10));
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream76);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass13 = strPredicate12.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector14 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass13);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier15 = objArrayCollector14.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction16 = objArrayCollector14.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer17 = objArrayCollector14.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer18 = objArrayCollector14.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = objArrayCollector14.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction20 = objArrayCollector14.finisher();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray21 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objListSupplier15);
        org.junit.Assert.assertNotNull(objListFunction16);
        org.junit.Assert.assertNotNull(objListBiConsumer17);
        org.junit.Assert.assertNotNull(objListBiConsumer18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(objListFunction20);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        java.lang.Class<java.util.List<java.util.stream.Collector.Characteristics>> characteristicsListClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.List<java.util.stream.Collector.Characteristics>> characteristicsListArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.util.List<java.util.stream.Collector.Characteristics>>(characteristicsListClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean25 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean27 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean7 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean9 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean11 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean13 = strComparableCheckBuilder1.equalTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        java.lang.Class<java.util.function.BinaryOperator<java.util.List<java.lang.Object>>> objListBinaryOperatorClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.function.BinaryOperator<java.util.List<java.lang.Object>>> objListBinaryOperatorEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.function.BinaryOperator<java.util.List<java.lang.Object>>>(objListBinaryOperatorClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        java.util.ArrayList<java.util.stream.Collector.Characteristics>[][] characteristicsListArray0 = null;
        java.util.stream.Stream<java.util.ArrayList<java.util.stream.Collector.Characteristics>[]> characteristicsListArrayStream1 = org.apache.commons.lang3.stream.Streams.of(characteristicsListArray0);
        org.junit.Assert.assertNotNull(characteristicsListArrayStream1);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator11 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator12 = objectToStringComparator11.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams15 = new org.apache.commons.lang3.stream.Streams();
        int int16 = objectToStringComparator11.compare((java.lang.Object) strPredicate14, (java.lang.Object) streams15);
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator10.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator11);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator19 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator11, objectToStringComparatorBinaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNotNull(objComparator12);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-16) + "'", int16 == (-16));
        org.junit.Assert.assertNotNull(objComparator17);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer10 = objArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator11 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = objArrayCollector3.characteristics();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(objListBiConsumer10);
        org.junit.Assert.assertNotNull(objListBinaryOperator11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range(7);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range(59);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean18 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean21 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean24 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = objArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator11 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction12 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(objListBinaryOperator11);
        org.junit.Assert.assertNotNull(objListFunction12);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream59 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream60 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream61 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream62 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream59);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream60);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream61);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream62);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = null;
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator12, objectToStringComparatorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean9 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean11 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean14 = strComparableCheckBuilder1.between("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream8 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsStream8);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj7 = null;
        int int8 = objectToStringComparator3.compare((java.lang.Object) "hi!", obj7);
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator3.reversed();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator3.reversed();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator3, objectToStringComparatorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertNotNull(objComparator10);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean16 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean18 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        java.util.stream.Stream<java.util.function.BinaryOperator[]> binaryOperatorArrayStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.function.BinaryOperator[]> binaryOperatorArrayFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.util.function.BinaryOperator[]>(binaryOperatorArrayStream0);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder13 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean15 = strComparableCheckBuilder13.greaterThan("hi!");
        boolean boolean18 = strComparableCheckBuilder13.between("hi!", "");
        boolean boolean20 = strComparableCheckBuilder13.lessThanOrEqualTo("hi!");
        int int22 = objectToStringComparator10.compare((java.lang.Object) strComparableCheckBuilder13, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass25 = strPredicate24.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector26 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass25);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier27 = objArrayCollector26.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator28 = objArrayCollector26.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction29 = objArrayCollector26.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator30 = objArrayCollector26.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder32 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean34 = strComparableCheckBuilder32.greaterThan("hi!");
        boolean boolean37 = strComparableCheckBuilder32.betweenExclusive("", "");
        boolean boolean39 = strComparableCheckBuilder32.equalTo("hi!");
        boolean boolean41 = strComparableCheckBuilder32.lessThan("");
        boolean boolean43 = strComparableCheckBuilder32.equalTo("");
        boolean boolean45 = strComparableCheckBuilder32.lessThan("hi!");
        boolean boolean47 = strComparableCheckBuilder32.greaterThan("hi!");
        int int48 = objectToStringComparator10.compare((java.lang.Object) objArrayCollector26, (java.lang.Object) "hi!");
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer49 = objArrayCollector26.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier50 = objArrayCollector26.supplier();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray51 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNotNull(objectToStringComparator10);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objListSupplier27);
        org.junit.Assert.assertNotNull(objListBinaryOperator28);
        org.junit.Assert.assertNotNull(objListFunction29);
        org.junit.Assert.assertNotNull(objListBinaryOperator30);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
        org.junit.Assert.assertNotNull(objListBiConsumer49);
        org.junit.Assert.assertNotNull(objListSupplier50);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams4 = new org.apache.commons.lang3.stream.Streams();
        int int5 = objectToStringComparator0.compare((java.lang.Object) strPredicate3, (java.lang.Object) streams4);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder7 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int10 = objectToStringComparator0.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate9);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator11 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator12 = objectToStringComparator11.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams15 = new org.apache.commons.lang3.stream.Streams();
        int int16 = objectToStringComparator11.compare((java.lang.Object) strPredicate14, (java.lang.Object) streams15);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder18 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate20 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int21 = objectToStringComparator11.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate20);
        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator11.reversed();
        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator0.thenComparing(objComparator22);
        java.util.Comparator<java.lang.Object> objComparator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<java.lang.Object> objComparator25 = objComparator23.thenComparing(objComparator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-16) + "'", int5 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertNotNull(objComparator12);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-16) + "'", int16 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder18);
        org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-7) + "'", int21 == (-7));
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertNotNull(objComparator23);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass13 = strPredicate12.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass16 = strPredicate15.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass19 = strPredicate18.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray20 = new java.lang.reflect.GenericDeclaration[] { wildcardClass7, wildcardClass10, wildcardClass13, wildcardClass16, wildcardClass19 };
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray21 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray20 };
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayStream22 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray21);
        java.lang.Class<?> wildcardClass23 = genericDeclarationArray21.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector24 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray25 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(genericDeclarationArray20);
        org.junit.Assert.assertNotNull(genericDeclarationArray21);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean7 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean9 = strComparableCheckBuilder1.greaterThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj7 = null;
        int int8 = objectToStringComparator3.compare((java.lang.Object) "hi!", obj7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator9.reversed();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator3.thenComparing(objComparator10);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator3, objectToStringComparatorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(objComparator11);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass4 = strPredicate3.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector5 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass4);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier6 = objArrayCollector5.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector5.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector5.finisher();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector5.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector5.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass13 = strPredicate12.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector14 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass13);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier15 = objArrayCollector14.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction16 = objArrayCollector14.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer17 = objArrayCollector14.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = objArrayCollector14.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer19 = objArrayCollector14.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier20 = objArrayCollector14.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer21 = objArrayCollector14.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList23 = objectToStringComparatorFailableStream1.collect(objListSupplier10, objListBiConsumer21, objListBiConsumer22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(objListSupplier6);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objListFunction8);
        org.junit.Assert.assertNotNull(objListFunction9);
        org.junit.Assert.assertNotNull(objListSupplier10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objListSupplier15);
        org.junit.Assert.assertNotNull(objListFunction16);
        org.junit.Assert.assertNotNull(objListBiConsumer17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(objListBiConsumer19);
        org.junit.Assert.assertNotNull(objListSupplier20);
        org.junit.Assert.assertNotNull(objListBiConsumer21);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator4 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator5 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator5.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams9 = new org.apache.commons.lang3.stream.Streams();
        int int10 = objectToStringComparator5.compare((java.lang.Object) strPredicate8, (java.lang.Object) streams9);
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator4.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator5);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator12.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams16 = new org.apache.commons.lang3.stream.Streams();
        int int17 = objectToStringComparator12.compare((java.lang.Object) strPredicate15, (java.lang.Object) streams16);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator18 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator18.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj22 = null;
        int int23 = objectToStringComparator18.compare((java.lang.Object) "hi!", obj22);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator24 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator24.reversed();
        java.util.Comparator<java.lang.Object> objComparator26 = objectToStringComparator18.thenComparing(objComparator25);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator27 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator28 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator29 = objectToStringComparator28.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate31 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj32 = null;
        int int33 = objectToStringComparator28.compare((java.lang.Object) "hi!", obj32);
        java.util.Comparator<java.lang.Object> objComparator34 = objectToStringComparator27.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator28);
        int int36 = objectToStringComparator18.compare((java.lang.Object) objectToStringComparator27, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator37 = objectToStringComparator12.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator27);
        java.util.Comparator<java.lang.Object> objComparator38 = objectToStringComparator5.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator12);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator40 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator12, objectToStringComparatorBinaryOperator39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(objComparator6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-16) + "'", int10 == (-16));
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-16) + "'", int17 == (-16));
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(objComparator25);
        org.junit.Assert.assertNotNull(objComparator26);
        org.junit.Assert.assertNotNull(objComparator29);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objComparator34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 62 + "'", int36 == 62);
        org.junit.Assert.assertNotNull(objComparator37);
        org.junit.Assert.assertNotNull(objComparator38);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector15 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass14);
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction16 = objArrayCollector15.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator17 = objArrayCollector15.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator18 = objArrayCollector15.combiner();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray19 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objListFunction16);
        org.junit.Assert.assertNotNull(objListBinaryOperator17);
        org.junit.Assert.assertNotNull(objListBinaryOperator18);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

//    @Test
//    public void test0368() throws Throwable {
//        if (debug)
//            System.out.format("%n%s%n", "RegressionTest0.test0368");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        org.apache.commons.lang3.stream.Streams streams5 = new org.apache.commons.lang3.stream.Streams();
//        int int6 = objectToStringComparator1.compare((java.lang.Object) strPredicate4, (java.lang.Object) streams5);
//        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator8.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        org.apache.commons.lang3.stream.Streams streams12 = new org.apache.commons.lang3.stream.Streams();
//        int int13 = objectToStringComparator8.compare((java.lang.Object) strPredicate11, (java.lang.Object) streams12);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder15 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
//        int int18 = objectToStringComparator8.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate17);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder20 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        boolean boolean22 = strComparableCheckBuilder20.greaterThan("hi!");
//        boolean boolean25 = strComparableCheckBuilder20.betweenExclusive("", "");
//        boolean boolean27 = strComparableCheckBuilder20.equalTo("hi!");
//        boolean boolean29 = strComparableCheckBuilder20.lessThan("");
//        boolean boolean31 = strComparableCheckBuilder20.lessThan("");
//        boolean boolean33 = strComparableCheckBuilder20.lessThanOrEqualTo("");
//        boolean boolean36 = strComparableCheckBuilder20.between("hi!", "hi!");
//        boolean boolean39 = strComparableCheckBuilder20.betweenExclusive("hi!", "hi!");
//        boolean boolean41 = strComparableCheckBuilder20.lessThanOrEqualTo("hi!");
//        boolean boolean43 = strComparableCheckBuilder20.greaterThan("hi!");
//        boolean boolean45 = strComparableCheckBuilder20.lessThan("hi!");
//        boolean boolean47 = strComparableCheckBuilder20.lessThanOrEqualTo("");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator48 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator49 = objectToStringComparator48.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate51 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj52 = null;
//        int int53 = objectToStringComparator48.compare((java.lang.Object) "hi!", obj52);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator54 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator55 = objectToStringComparator54.reversed();
//        java.util.Comparator<java.lang.Object> objComparator56 = objectToStringComparator48.thenComparing(objComparator55);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator57 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator58 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator59 = objectToStringComparator58.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate61 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj62 = null;
//        int int63 = objectToStringComparator58.compare((java.lang.Object) "hi!", obj62);
//        java.util.Comparator<java.lang.Object> objComparator64 = objectToStringComparator57.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator58);
//        int int66 = objectToStringComparator48.compare((java.lang.Object) objectToStringComparator57, (java.lang.Object) 1L);
//        int int67 = objectToStringComparator8.compare((java.lang.Object) "", (java.lang.Object) objectToStringComparator57);
//        java.util.Comparator<java.lang.Object> objComparator68 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator8);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator69 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator70 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator71 = objectToStringComparator70.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate73 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj74 = null;
//        int int75 = objectToStringComparator70.compare((java.lang.Object) "hi!", obj74);
//        java.util.Comparator<java.lang.Object> objComparator76 = objectToStringComparator69.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator70);
//        java.util.Comparator<java.lang.Object> objComparator77 = objComparator68.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator70);
//        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray78 = new java.lang.reflect.GenericDeclaration[][][] {};
//        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayStream79 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray78);
//        java.lang.Object obj80 = null;
//        int int81 = objectToStringComparator70.compare((java.lang.Object) genericDeclarationArray78, obj80);
//        org.junit.Assert.assertNotNull(objComparator2);
//        org.junit.Assert.assertNotNull(strPredicate4);
//        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-16) + "'", int6 == (-16));
//        org.junit.Assert.assertNotNull(objComparator7);
//        org.junit.Assert.assertNotNull(objComparator9);
//        org.junit.Assert.assertNotNull(strPredicate11);
//        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-16) + "'", int13 == (-16));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder15);
//        org.junit.Assert.assertNotNull(strPredicate17);
//        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-7) + "'", int18 == (-7));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder20);
//        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
//        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
//        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
//        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
//        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
//        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
//        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
//        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
//        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
//        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
//        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
//        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
//        org.junit.Assert.assertNotNull(objComparator49);
//        org.junit.Assert.assertNotNull(strPredicate51);
//        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
//        org.junit.Assert.assertNotNull(objComparator55);
//        org.junit.Assert.assertNotNull(objComparator56);
//        org.junit.Assert.assertNotNull(objComparator59);
//        org.junit.Assert.assertNotNull(strPredicate61);
//        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
//        org.junit.Assert.assertNotNull(objComparator64);
//        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 62 + "'", int66 == 62);
//        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-66) + "'", int67 == (-66));
//        org.junit.Assert.assertNotNull(objComparator68);
//        org.junit.Assert.assertNotNull(objComparator71);
//        org.junit.Assert.assertNotNull(strPredicate73);
//        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
//        org.junit.Assert.assertNotNull(objComparator76);
//        org.junit.Assert.assertNotNull(objComparator77);
//        org.junit.Assert.assertNotNull(genericDeclarationArray78);
//        org.junit.Assert.assertNotNull(genericDeclarationArrayStream79);
//        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
//    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean19 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean21 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.betweenExclusive("", "");
        boolean boolean10 = strComparableCheckBuilder3.equalTo("hi!");
        boolean boolean12 = strComparableCheckBuilder3.lessThan("");
        boolean boolean14 = strComparableCheckBuilder3.equalTo("");
        boolean boolean16 = strComparableCheckBuilder3.greaterThanOrEqualTo("hi!");
        boolean boolean19 = strComparableCheckBuilder3.between("hi!", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder21 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean23 = strComparableCheckBuilder21.greaterThan("hi!");
        boolean boolean26 = strComparableCheckBuilder21.betweenExclusive("", "");
        boolean boolean28 = strComparableCheckBuilder21.equalTo("hi!");
        boolean boolean30 = strComparableCheckBuilder21.lessThan("");
        boolean boolean32 = strComparableCheckBuilder21.lessThan("");
        boolean boolean34 = strComparableCheckBuilder21.lessThanOrEqualTo("");
        boolean boolean37 = strComparableCheckBuilder21.between("hi!", "hi!");
        boolean boolean40 = strComparableCheckBuilder21.betweenExclusive("hi!", "hi!");
        boolean boolean42 = strComparableCheckBuilder21.lessThanOrEqualTo("hi!");
        boolean boolean44 = strComparableCheckBuilder21.greaterThan("hi!");
        boolean boolean46 = strComparableCheckBuilder21.lessThan("hi!");
        boolean boolean48 = strComparableCheckBuilder21.lessThanOrEqualTo("");
        int int49 = objectToStringComparator0.compare((java.lang.Object) "hi!", (java.lang.Object) "");
        java.util.Comparator<java.lang.Object> objComparator50 = objectToStringComparator0.reversed();
        java.lang.Class<?> wildcardClass51 = objectToStringComparator0.getClass();
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(objComparator50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = objArrayCollector3.characteristics();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        java.lang.Class<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.reflect.GenericDeclaration[][][][]>(genericDeclarationArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        java.lang.Class<org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>[]> objectToStringComparatorFailableStreamArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>[]> objectToStringComparatorFailableStreamArrayEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>[]>(objectToStringComparatorFailableStreamArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator2 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams7 = new org.apache.commons.lang3.stream.Streams();
        int int8 = objectToStringComparator3.compare((java.lang.Object) strPredicate6, (java.lang.Object) streams7);
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator2.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator3);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int13 = objectToStringComparator10.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass16 = strPredicate15.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector17 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass16);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier18 = objArrayCollector17.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector17.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer20 = objArrayCollector17.accumulator();
        int int21 = objectToStringComparator2.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer20);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator22 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator22.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate25 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams26 = new org.apache.commons.lang3.stream.Streams();
        int int27 = objectToStringComparator22.compare((java.lang.Object) strPredicate25, (java.lang.Object) streams26);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder29 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate31 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int32 = objectToStringComparator22.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate31);
        java.util.Comparator<java.lang.Object> objComparator33 = objectToStringComparator22.reversed();
        java.util.Comparator<java.lang.Object> objComparator34 = objectToStringComparator22.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder36 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean38 = strComparableCheckBuilder36.greaterThanOrEqualTo("");
        int int39 = objectToStringComparator2.compare((java.lang.Object) objComparator34, (java.lang.Object) boolean38);
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.apache.commons.lang3.compare.ComparableUtils.gt("");
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass44 = strPredicate43.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector45 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass44);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier46 = objArrayCollector45.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction47 = objArrayCollector45.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer48 = objArrayCollector45.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet49 = objArrayCollector45.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier50 = objArrayCollector45.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator51 = objArrayCollector45.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet52 = objArrayCollector45.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator53 = objArrayCollector45.combiner();
        int int54 = objectToStringComparator2.compare((java.lang.Object) strPredicate41, (java.lang.Object) objArrayCollector45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray55 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-16) + "'", int8 == (-16));
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objListSupplier18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(objListBiConsumer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-62) + "'", int21 == (-62));
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-16) + "'", int27 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder29);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-7) + "'", int32 == (-7));
        org.junit.Assert.assertNotNull(objComparator33);
        org.junit.Assert.assertNotNull(objComparator34);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-10) + "'", int39 == (-10));
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(objListSupplier46);
        org.junit.Assert.assertNotNull(objListFunction47);
        org.junit.Assert.assertNotNull(objListBiConsumer48);
        org.junit.Assert.assertNotNull(characteristicsSet49);
        org.junit.Assert.assertNotNull(objListSupplier50);
        org.junit.Assert.assertNotNull(objListBinaryOperator51);
        org.junit.Assert.assertNotNull(characteristicsSet52);
        org.junit.Assert.assertNotNull(objListBinaryOperator53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-16) + "'", int54 == (-16));
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate7 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass8 = strPredicate7.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray15 = new java.lang.reflect.GenericDeclaration[] { wildcardClass2, wildcardClass5, wildcardClass8, wildcardClass11, wildcardClass14 };
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray16 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray15 };
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayStream17 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray16);
        java.util.stream.Stream<java.io.Serializable> serializableStream18 = org.apache.commons.lang3.stream.Streams.of((java.io.Serializable[]) genericDeclarationArray16);
        java.lang.Class<?> wildcardClass19 = genericDeclarationArray16.getClass();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(genericDeclarationArray15);
        org.junit.Assert.assertNotNull(genericDeclarationArray16);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream17);
        org.junit.Assert.assertNotNull(serializableStream18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean7 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean9 = strComparableCheckBuilder1.equalTo("");
        boolean boolean11 = strComparableCheckBuilder1.equalTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector12 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass11);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = objArrayCollector12.characteristics();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray14 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(characteristicsSet13);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator9 = objArrayCollector3.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer10 = objArrayCollector3.accumulator();
        java.lang.Class<?> wildcardClass11 = objArrayCollector3.getClass();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListBinaryOperator9);
        org.junit.Assert.assertNotNull(objListBiConsumer10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator11 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator12 = objectToStringComparator11.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder14 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean16 = strComparableCheckBuilder14.greaterThan("hi!");
        boolean boolean19 = strComparableCheckBuilder14.between("hi!", "");
        boolean boolean21 = strComparableCheckBuilder14.lessThanOrEqualTo("hi!");
        int int23 = objectToStringComparator11.compare((java.lang.Object) strComparableCheckBuilder14, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate25 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass26 = strPredicate25.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector27 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass26);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier28 = objArrayCollector27.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator29 = objArrayCollector27.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction30 = objArrayCollector27.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator31 = objArrayCollector27.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder33 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean35 = strComparableCheckBuilder33.greaterThan("hi!");
        boolean boolean38 = strComparableCheckBuilder33.betweenExclusive("", "");
        boolean boolean40 = strComparableCheckBuilder33.equalTo("hi!");
        boolean boolean42 = strComparableCheckBuilder33.lessThan("");
        boolean boolean44 = strComparableCheckBuilder33.equalTo("");
        boolean boolean46 = strComparableCheckBuilder33.lessThan("hi!");
        boolean boolean48 = strComparableCheckBuilder33.greaterThan("hi!");
        int int49 = objectToStringComparator11.compare((java.lang.Object) objArrayCollector27, (java.lang.Object) "hi!");
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator50 = objArrayCollector27.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer51 = objArrayCollector27.accumulator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray52 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNotNull(objectToStringComparator11);
        org.junit.Assert.assertNotNull(objComparator12);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 59 + "'", int23 == 59);
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(objListSupplier28);
        org.junit.Assert.assertNotNull(objListBinaryOperator29);
        org.junit.Assert.assertNotNull(objListFunction30);
        org.junit.Assert.assertNotNull(objListBinaryOperator31);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 7 + "'", int49 == 7);
        org.junit.Assert.assertNotNull(objListBinaryOperator50);
        org.junit.Assert.assertNotNull(objListBiConsumer51);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj14 = null;
        int int15 = objectToStringComparator10.compare((java.lang.Object) "hi!", obj14);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder17 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean20 = strComparableCheckBuilder17.betweenExclusive("", "");
        boolean boolean22 = strComparableCheckBuilder17.greaterThan("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator23 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator24 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator24.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate27 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj28 = null;
        int int29 = objectToStringComparator24.compare((java.lang.Object) "hi!", obj28);
        java.util.Comparator<java.lang.Object> objComparator30 = objectToStringComparator23.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator24);
        int int31 = objectToStringComparator10.compare((java.lang.Object) "", (java.lang.Object) objComparator30);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator32 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator33 = objectToStringComparator32.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder35 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean37 = strComparableCheckBuilder35.greaterThan("hi!");
        boolean boolean40 = strComparableCheckBuilder35.between("hi!", "");
        boolean boolean42 = strComparableCheckBuilder35.lessThanOrEqualTo("hi!");
        int int44 = objectToStringComparator32.compare((java.lang.Object) strComparableCheckBuilder35, (java.lang.Object) 4);
        java.util.Comparator<java.lang.Object> objComparator45 = objectToStringComparator10.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator32);
        java.util.Comparator<java.lang.Object> objComparator46 = objectToStringComparator32.reversed();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator48 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator32, objectToStringComparatorBinaryOperator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objComparator25);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(objComparator30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-50) + "'", int31 == (-50));
        org.junit.Assert.assertNotNull(objectToStringComparator32);
        org.junit.Assert.assertNotNull(objComparator33);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 59 + "'", int44 == 59);
        org.junit.Assert.assertNotNull(objComparator45);
        org.junit.Assert.assertNotNull(objComparator46);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector6 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector6.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction8 = objArrayCollector6.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer9 = objArrayCollector6.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector6.supplier();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray11 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objListFunction8);
        org.junit.Assert.assertNotNull(objListBiConsumer9);
        org.junit.Assert.assertNotNull(objListSupplier10);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator5 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator5.reversed();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator5, objectToStringComparatorBinaryOperator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(objComparator6);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector12 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass11);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier13 = objArrayCollector12.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator14 = objArrayCollector12.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction15 = objArrayCollector12.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector12.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector12.supplier();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray18 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(objListSupplier13);
        org.junit.Assert.assertNotNull(objListBinaryOperator14);
        org.junit.Assert.assertNotNull(objListFunction15);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(objListSupplier17);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        java.lang.Class<java.lang.reflect.Type> typeClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.Type> typeEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.reflect.Type>(typeClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass9 = strPredicate8.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass9);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction12 = objArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator13 = objArrayCollector10.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier14 = objArrayCollector10.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = objArrayCollector10.characteristics();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray16 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(objListFunction12);
        org.junit.Assert.assertNotNull(objListBinaryOperator13);
        org.junit.Assert.assertNotNull(objListSupplier14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass9 = strPredicate8.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass9);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector10.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator12 = objArrayCollector10.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = objArrayCollector10.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = objArrayCollector10.characteristics();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray15 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(objListBinaryOperator12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean7 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean9 = strComparableCheckBuilder1.greaterThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean26 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean28 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean31 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        java.lang.Class<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>> characteristicsCollectionClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>> characteristicsCollectionEventListenerSupport1 = new org.apache.commons.lang3.event.EventListenerSupport<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>>(characteristicsCollectionClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        boolean boolean23 = strComparableCheckBuilder1.between("hi!", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector11.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction13 = objArrayCollector11.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = objArrayCollector11.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction15 = objArrayCollector11.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator16 = objArrayCollector11.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction17 = objArrayCollector11.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier18 = objArrayCollector11.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier19 = objArrayCollector11.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass22 = strPredicate21.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector23 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass22);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier24 = objArrayCollector23.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction25 = objArrayCollector23.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = objArrayCollector23.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer27 = objArrayCollector23.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer28 = objArrayCollector23.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction29 = objArrayCollector23.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer30 = objArrayCollector23.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList32 = objectToStringComparatorFailableStream1.collect(objListSupplier19, objListBiConsumer30, objListBiConsumer31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objListFunction13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(objListFunction15);
        org.junit.Assert.assertNotNull(objListBinaryOperator16);
        org.junit.Assert.assertNotNull(objListFunction17);
        org.junit.Assert.assertNotNull(objListSupplier18);
        org.junit.Assert.assertNotNull(objListSupplier19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(objListSupplier24);
        org.junit.Assert.assertNotNull(objListFunction25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(objListBiConsumer27);
        org.junit.Assert.assertNotNull(objListBiConsumer28);
        org.junit.Assert.assertNotNull(objListFunction29);
        org.junit.Assert.assertNotNull(objListBiConsumer30);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean21 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean24 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean27 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder9 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean11 = strComparableCheckBuilder9.greaterThan("hi!");
        boolean boolean14 = strComparableCheckBuilder9.betweenExclusive("", "");
        boolean boolean16 = strComparableCheckBuilder9.equalTo("hi!");
        boolean boolean18 = strComparableCheckBuilder9.lessThan("");
        boolean boolean20 = strComparableCheckBuilder9.lessThan("");
        boolean boolean22 = strComparableCheckBuilder9.lessThanOrEqualTo("");
        boolean boolean25 = strComparableCheckBuilder9.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean29 = strComparableCheckBuilder27.greaterThan("hi!");
        boolean boolean32 = strComparableCheckBuilder27.betweenExclusive("", "");
        boolean boolean34 = strComparableCheckBuilder27.equalTo("hi!");
        boolean boolean36 = strComparableCheckBuilder27.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder38 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean40 = strComparableCheckBuilder38.greaterThan("hi!");
        boolean boolean43 = strComparableCheckBuilder38.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder45 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean47 = strComparableCheckBuilder45.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray49 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray50 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray49;
        strComparableCheckBuilderArray50[0] = strComparableCheckBuilder9;
        strComparableCheckBuilderArray50[1] = strComparableCheckBuilder27;
        strComparableCheckBuilderArray50[2] = strComparableCheckBuilder38;
        strComparableCheckBuilderArray50[3] = strComparableCheckBuilder45;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream59 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray50);
        java.lang.Class<?> wildcardClass60 = strComparableCheckBuilderArray50.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector61 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass60);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier62 = objArrayCollector61.supplier();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray63 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray49);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray50);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(objListSupplier62);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.equalTo("");
        boolean boolean26 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean28 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream4 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Collector.Characteristics[] characteristicsArray8 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList9 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList9, characteristicsArray8);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList9);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList9);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator13.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams17 = new org.apache.commons.lang3.stream.Streams();
        int int18 = objectToStringComparator13.compare((java.lang.Object) strPredicate16, (java.lang.Object) streams17);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder20 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int23 = objectToStringComparator13.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate22);
        java.util.Comparator<java.lang.Object> objComparator24 = objectToStringComparator13.reversed();
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator13.reversed();
        java.util.stream.Collector.Characteristics[] characteristicsArray26 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList27 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList27, characteristicsArray26);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream29 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList27);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream30 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList27);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream31 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList27);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder33 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean35 = strComparableCheckBuilder33.greaterThan("hi!");
        boolean boolean38 = strComparableCheckBuilder33.betweenExclusive("", "");
        boolean boolean40 = strComparableCheckBuilder33.equalTo("hi!");
        boolean boolean42 = strComparableCheckBuilder33.lessThan("");
        boolean boolean44 = strComparableCheckBuilder33.lessThan("hi!");
        boolean boolean46 = strComparableCheckBuilder33.greaterThanOrEqualTo("hi!");
        boolean boolean48 = strComparableCheckBuilder33.greaterThanOrEqualTo("hi!");
        boolean boolean51 = strComparableCheckBuilder33.betweenExclusive("", "");
        int int52 = objectToStringComparator13.compare((java.lang.Object) characteristicsList27, (java.lang.Object) "");
        java.util.stream.Collector.Characteristics[] characteristicsArray53 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList54 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList54, characteristicsArray53);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream56 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList54);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream57 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList54);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream58 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList54);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream59 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList54);
        java.util.stream.Collector.Characteristics[] characteristicsArray60 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList61 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList61, characteristicsArray60);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream63 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList61);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream64 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList61);
        java.util.stream.Collector.Characteristics[] characteristicsArray65 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList66 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList66, characteristicsArray65);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream68 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList66);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream69 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList66);
        java.util.ArrayList[] arrayListArray71 = new java.util.ArrayList[6];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.stream.Collector.Characteristics>[] characteristicsListArray72 = (java.util.ArrayList<java.util.stream.Collector.Characteristics>[]) arrayListArray71;
        characteristicsListArray72[0] = characteristicsList1;
        characteristicsListArray72[1] = characteristicsList9;
        characteristicsListArray72[2] = characteristicsList27;
        characteristicsListArray72[3] = characteristicsList54;
        characteristicsListArray72[4] = characteristicsList61;
        characteristicsListArray72[5] = characteristicsList66;
        java.util.ArrayList[][] arrayListArray86 = new java.util.ArrayList[1][];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.stream.Collector.Characteristics>[][] characteristicsListArray87 = (java.util.ArrayList<java.util.stream.Collector.Characteristics>[][]) arrayListArray86;
        characteristicsListArray87[0] = characteristicsListArray72;
        java.util.stream.Stream<java.util.ArrayList<java.util.stream.Collector.Characteristics>[]> characteristicsListArrayStream90 = org.apache.commons.lang3.stream.Streams.of(characteristicsListArray87);
        java.util.stream.Stream<java.util.List<java.util.stream.Collector.Characteristics>[]> characteristicsListArrayStream91 = org.apache.commons.lang3.stream.Streams.of((java.util.List<java.util.stream.Collector.Characteristics>[][]) characteristicsListArray87);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-16) + "'", int18 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder20);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-7) + "'", int23 == (-7));
        org.junit.Assert.assertNotNull(objComparator24);
        org.junit.Assert.assertNotNull(objComparator25);
        org.junit.Assert.assertNotNull(characteristicsArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream29);
        org.junit.Assert.assertNotNull(characteristicsFailableStream30);
        org.junit.Assert.assertNotNull(characteristicsStream31);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(characteristicsArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream56);
        org.junit.Assert.assertNotNull(characteristicsFailableStream57);
        org.junit.Assert.assertNotNull(characteristicsStream58);
        org.junit.Assert.assertNotNull(characteristicsStream59);
        org.junit.Assert.assertNotNull(characteristicsArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream63);
        org.junit.Assert.assertNotNull(characteristicsFailableStream64);
        org.junit.Assert.assertNotNull(characteristicsArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream68);
        org.junit.Assert.assertNotNull(characteristicsStream69);
        org.junit.Assert.assertNotNull(arrayListArray71);
        org.junit.Assert.assertNotNull(characteristicsListArray72);
        org.junit.Assert.assertNotNull(arrayListArray86);
        org.junit.Assert.assertNotNull(characteristicsListArray87);
        org.junit.Assert.assertNotNull(characteristicsListArrayStream90);
        org.junit.Assert.assertNotNull(characteristicsListArrayStream91);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream12 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
        org.junit.Assert.assertNotNull(characteristicsStream12);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass11 = strPredicate10.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector12 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray13 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams5 = new org.apache.commons.lang3.stream.Streams();
        int int6 = objectToStringComparator1.compare((java.lang.Object) strPredicate4, (java.lang.Object) streams5);
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int11 = objectToStringComparator8.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass14 = strPredicate13.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector15 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass14);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction17 = objArrayCollector15.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer18 = objArrayCollector15.accumulator();
        int int19 = objectToStringComparator0.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer18);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams24 = new org.apache.commons.lang3.stream.Streams();
        int int25 = objectToStringComparator20.compare((java.lang.Object) strPredicate23, (java.lang.Object) streams24);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int30 = objectToStringComparator20.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate29);
        java.util.Comparator<java.lang.Object> objComparator31 = objectToStringComparator20.reversed();
        java.util.Comparator<java.lang.Object> objComparator32 = objectToStringComparator20.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder34 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean36 = strComparableCheckBuilder34.greaterThanOrEqualTo("");
        int int37 = objectToStringComparator0.compare((java.lang.Object) objComparator32, (java.lang.Object) boolean36);
        java.util.function.Predicate<java.lang.String> strPredicate39 = org.apache.commons.lang3.compare.ComparableUtils.gt("");
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass42 = strPredicate41.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector43 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass42);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier44 = objArrayCollector43.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction45 = objArrayCollector43.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer46 = objArrayCollector43.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet47 = objArrayCollector43.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier48 = objArrayCollector43.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator49 = objArrayCollector43.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet50 = objArrayCollector43.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator51 = objArrayCollector43.combiner();
        int int52 = objectToStringComparator0.compare((java.lang.Object) strPredicate39, (java.lang.Object) objArrayCollector43);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet53 = objArrayCollector43.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream54 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet53);
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-16) + "'", int6 == (-16));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objListSupplier16);
        org.junit.Assert.assertNotNull(objListFunction17);
        org.junit.Assert.assertNotNull(objListBiConsumer18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-62) + "'", int19 == (-62));
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-16) + "'", int25 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-7) + "'", int30 == (-7));
        org.junit.Assert.assertNotNull(objComparator31);
        org.junit.Assert.assertNotNull(objComparator32);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-10) + "'", int37 == (-10));
        org.junit.Assert.assertNotNull(strPredicate39);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(objListSupplier44);
        org.junit.Assert.assertNotNull(objListFunction45);
        org.junit.Assert.assertNotNull(objListBiConsumer46);
        org.junit.Assert.assertNotNull(characteristicsSet47);
        org.junit.Assert.assertNotNull(objListSupplier48);
        org.junit.Assert.assertNotNull(objListBinaryOperator49);
        org.junit.Assert.assertNotNull(characteristicsSet50);
        org.junit.Assert.assertNotNull(objListBinaryOperator51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-16) + "'", int52 == (-16));
        org.junit.Assert.assertNotNull(characteristicsSet53);
        org.junit.Assert.assertNotNull(characteristicsStream54);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThan("hi!");
        java.lang.Class<?> wildcardClass6 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean21 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean24 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean27 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean29 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction11 = objArrayCollector3.finisher();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(objListFunction11);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean21 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean24 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean27 = strComparableCheckBuilder1.betweenExclusive("", "");
        java.lang.Class<?> wildcardClass28 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        boolean boolean15 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean17 = strComparableCheckBuilder3.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean9 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean12 = strComparableCheckBuilder1.between("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = objArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream6 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsStream6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator9.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams13 = new org.apache.commons.lang3.stream.Streams();
        int int14 = objectToStringComparator9.compare((java.lang.Object) strPredicate12, (java.lang.Object) streams13);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder16 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int19 = objectToStringComparator9.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate18);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams24 = new org.apache.commons.lang3.stream.Streams();
        int int25 = objectToStringComparator20.compare((java.lang.Object) strPredicate23, (java.lang.Object) streams24);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int30 = objectToStringComparator20.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate29);
        java.util.Comparator<java.lang.Object> objComparator31 = objectToStringComparator20.reversed();
        java.util.Comparator<java.lang.Object> objComparator32 = objectToStringComparator9.thenComparing(objComparator31);
        java.util.Comparator<java.lang.Object> objComparator33 = objComparator8.thenComparing(objComparator32);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator34 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator35 = objectToStringComparator34.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate37 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams38 = new org.apache.commons.lang3.stream.Streams();
        int int39 = objectToStringComparator34.compare((java.lang.Object) strPredicate37, (java.lang.Object) streams38);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder41 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int44 = objectToStringComparator34.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate43);
        java.util.Comparator<java.lang.Object> objComparator45 = objectToStringComparator34.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator46 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator47 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator48 = objectToStringComparator47.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate50 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj51 = null;
        int int52 = objectToStringComparator47.compare((java.lang.Object) "hi!", obj51);
        java.util.Comparator<java.lang.Object> objComparator53 = objectToStringComparator46.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        java.util.Comparator<java.lang.Object> objComparator54 = objectToStringComparator34.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        java.util.Comparator<java.lang.Object> objComparator55 = objComparator32.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator34);
        java.util.Comparator<java.lang.Object> objComparator56 = objectToStringComparator34.reversed();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-16) + "'", int14 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder16);
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-7) + "'", int19 == (-7));
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-16) + "'", int25 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-7) + "'", int30 == (-7));
        org.junit.Assert.assertNotNull(objComparator31);
        org.junit.Assert.assertNotNull(objComparator32);
        org.junit.Assert.assertNotNull(objComparator33);
        org.junit.Assert.assertNotNull(objComparator35);
        org.junit.Assert.assertNotNull(strPredicate37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-16) + "'", int39 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder41);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-7) + "'", int44 == (-7));
        org.junit.Assert.assertNotNull(objComparator45);
        org.junit.Assert.assertNotNull(objComparator48);
        org.junit.Assert.assertNotNull(strPredicate50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(objComparator53);
        org.junit.Assert.assertNotNull(objComparator54);
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(objComparator56);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator14 = objComparator13.reversed();
        java.util.Comparator<java.lang.Object> objComparator15 = objComparator14.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator17 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator18 = objectToStringComparator17.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate20 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams21 = new org.apache.commons.lang3.stream.Streams();
        int int22 = objectToStringComparator17.compare((java.lang.Object) strPredicate20, (java.lang.Object) streams21);
        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator16.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator17);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator24 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int27 = objectToStringComparator24.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass30 = strPredicate29.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector31 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass30);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier32 = objArrayCollector31.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction33 = objArrayCollector31.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer34 = objArrayCollector31.accumulator();
        int int35 = objectToStringComparator16.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer34);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator36 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator37 = objectToStringComparator36.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate39 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams40 = new org.apache.commons.lang3.stream.Streams();
        int int41 = objectToStringComparator36.compare((java.lang.Object) strPredicate39, (java.lang.Object) streams40);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder43 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate45 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int46 = objectToStringComparator36.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate45);
        java.util.Comparator<java.lang.Object> objComparator47 = objectToStringComparator36.reversed();
        java.util.Comparator<java.lang.Object> objComparator48 = objectToStringComparator36.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder50 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean52 = strComparableCheckBuilder50.greaterThanOrEqualTo("");
        int int53 = objectToStringComparator16.compare((java.lang.Object) objComparator48, (java.lang.Object) boolean52);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator54 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator55 = objectToStringComparator54.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams58 = new org.apache.commons.lang3.stream.Streams();
        int int59 = objectToStringComparator54.compare((java.lang.Object) strPredicate57, (java.lang.Object) streams58);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder61 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate63 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int64 = objectToStringComparator54.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate63);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator65 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator66 = objectToStringComparator65.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate68 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams69 = new org.apache.commons.lang3.stream.Streams();
        int int70 = objectToStringComparator65.compare((java.lang.Object) strPredicate68, (java.lang.Object) streams69);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder72 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate74 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int75 = objectToStringComparator65.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate74);
        java.util.Comparator<java.lang.Object> objComparator76 = objectToStringComparator65.reversed();
        java.util.Comparator<java.lang.Object> objComparator77 = objectToStringComparator54.thenComparing(objComparator76);
        java.util.Comparator<java.lang.Object> objComparator78 = objectToStringComparator16.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator54);
        java.util.Comparator<java.lang.Object> objComparator79 = objComparator78.reversed();
        java.util.Comparator<java.lang.Object> objComparator80 = objComparator15.thenComparing(objComparator79);
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(objComparator18);
        org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-16) + "'", int22 == (-16));
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(objListSupplier32);
        org.junit.Assert.assertNotNull(objListFunction33);
        org.junit.Assert.assertNotNull(objListBiConsumer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-62) + "'", int35 == (-62));
        org.junit.Assert.assertNotNull(objComparator37);
        org.junit.Assert.assertNotNull(strPredicate39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-16) + "'", int41 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder43);
        org.junit.Assert.assertNotNull(strPredicate45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-7) + "'", int46 == (-7));
        org.junit.Assert.assertNotNull(objComparator47);
        org.junit.Assert.assertNotNull(objComparator48);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-10) + "'", int53 == (-10));
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-16) + "'", int59 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder61);
        org.junit.Assert.assertNotNull(strPredicate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-7) + "'", int64 == (-7));
        org.junit.Assert.assertNotNull(objComparator66);
        org.junit.Assert.assertNotNull(strPredicate68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-16) + "'", int70 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder72);
        org.junit.Assert.assertNotNull(strPredicate74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-7) + "'", int75 == (-7));
        org.junit.Assert.assertNotNull(objComparator76);
        org.junit.Assert.assertNotNull(objComparator77);
        org.junit.Assert.assertNotNull(objComparator78);
        org.junit.Assert.assertNotNull(objComparator79);
        org.junit.Assert.assertNotNull(objComparator80);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream12 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator13.reversed();
        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator13.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator16.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams20 = new org.apache.commons.lang3.stream.Streams();
        int int21 = objectToStringComparator16.compare((java.lang.Object) strPredicate19, (java.lang.Object) streams20);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder23 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate25 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int26 = objectToStringComparator16.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate25);
        java.util.Comparator<java.lang.Object> objComparator27 = objectToStringComparator16.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator28 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator29 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator30 = objectToStringComparator29.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate32 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj33 = null;
        int int34 = objectToStringComparator29.compare((java.lang.Object) "hi!", obj33);
        java.util.Comparator<java.lang.Object> objComparator35 = objectToStringComparator28.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator29);
        java.util.Comparator<java.lang.Object> objComparator36 = objectToStringComparator16.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator29);
        java.util.Comparator<java.lang.Object> objComparator37 = objComparator15.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator29);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder39 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean41 = strComparableCheckBuilder39.greaterThan("hi!");
        boolean boolean44 = strComparableCheckBuilder39.betweenExclusive("", "");
        boolean boolean46 = strComparableCheckBuilder39.equalTo("hi!");
        boolean boolean48 = strComparableCheckBuilder39.lessThan("");
        boolean boolean50 = strComparableCheckBuilder39.lessThan("");
        boolean boolean52 = strComparableCheckBuilder39.lessThanOrEqualTo("");
        boolean boolean55 = strComparableCheckBuilder39.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder57 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean59 = strComparableCheckBuilder57.greaterThan("hi!");
        boolean boolean62 = strComparableCheckBuilder57.betweenExclusive("", "");
        boolean boolean64 = strComparableCheckBuilder57.equalTo("hi!");
        boolean boolean66 = strComparableCheckBuilder57.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder68 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean70 = strComparableCheckBuilder68.greaterThan("hi!");
        boolean boolean73 = strComparableCheckBuilder68.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder75 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean77 = strComparableCheckBuilder75.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray79 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray80 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray79;
        strComparableCheckBuilderArray80[0] = strComparableCheckBuilder39;
        strComparableCheckBuilderArray80[1] = strComparableCheckBuilder57;
        strComparableCheckBuilderArray80[2] = strComparableCheckBuilder68;
        strComparableCheckBuilderArray80[3] = strComparableCheckBuilder75;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream89 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray80);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream90 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream89);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream91 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream89);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream92 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream89);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream93 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream89);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream94 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream89);
        java.lang.Object obj95 = null;
        int int96 = objectToStringComparator29.compare((java.lang.Object) strComparableCheckBuilderFailableStream94, obj95);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator98 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator29, objectToStringComparatorBinaryOperator97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNull(objectToStringComparatorStream12);
        org.junit.Assert.assertNotNull(objectToStringComparator13);
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-16) + "'", int21 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder23);
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-7) + "'", int26 == (-7));
        org.junit.Assert.assertNotNull(objComparator27);
        org.junit.Assert.assertNotNull(objComparator30);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(objComparator35);
        org.junit.Assert.assertNotNull(objComparator36);
        org.junit.Assert.assertNotNull(objComparator37);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray79);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray80);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream89);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream90);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream91);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream92);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream93);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction6 = objArrayCollector3.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector3.supplier();
        java.lang.Class<?> wildcardClass8 = objListSupplier7.getClass();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(objListFunction6);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj14 = null;
        int int15 = objectToStringComparator10.compare((java.lang.Object) "hi!", obj14);
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator9.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator10);
        int int18 = objectToStringComparator0.compare((java.lang.Object) objectToStringComparator9, (java.lang.Object) 1L);
        java.lang.Class<?> wildcardClass19 = objectToStringComparator9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector20 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass19);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector21 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass19);
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator22 = objArrayCollector21.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer23 = objArrayCollector21.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = objArrayCollector21.characteristics();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 62 + "'", int18 == 62);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(objListBinaryOperator22);
        org.junit.Assert.assertNotNull(objListBiConsumer23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass10 = strPredicate9.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector11 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass10);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector11.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction13 = objArrayCollector11.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer14 = objArrayCollector11.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer15 = objArrayCollector11.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier16 = objArrayCollector11.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer17 = null;
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList19 = objectToStringComparatorFailableStream1.collect(objListSupplier16, objListBiConsumer17, objListBiConsumer18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objListFunction13);
        org.junit.Assert.assertNotNull(objListBiConsumer14);
        org.junit.Assert.assertNotNull(objListBiConsumer15);
        org.junit.Assert.assertNotNull(objListSupplier16);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean7 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        java.lang.Class<java.lang.Iterable<java.util.stream.Collector.Characteristics>[][]> characteristicsIterableArrayClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.Iterable<java.util.stream.Collector.Characteristics>[][]> characteristicsIterableArrayEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.Iterable<java.util.stream.Collector.Characteristics>[][]>(characteristicsIterableArrayClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean12 = strComparableCheckBuilder1.greaterThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator9.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams13 = new org.apache.commons.lang3.stream.Streams();
        int int14 = objectToStringComparator9.compare((java.lang.Object) strPredicate12, (java.lang.Object) streams13);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder16 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int19 = objectToStringComparator9.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate18);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams24 = new org.apache.commons.lang3.stream.Streams();
        int int25 = objectToStringComparator20.compare((java.lang.Object) strPredicate23, (java.lang.Object) streams24);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int30 = objectToStringComparator20.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate29);
        java.util.Comparator<java.lang.Object> objComparator31 = objectToStringComparator20.reversed();
        java.util.Comparator<java.lang.Object> objComparator32 = objectToStringComparator9.thenComparing(objComparator31);
        java.util.Comparator<java.lang.Object> objComparator33 = objComparator8.thenComparing(objComparator32);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator34 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator35 = objectToStringComparator34.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate37 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams38 = new org.apache.commons.lang3.stream.Streams();
        int int39 = objectToStringComparator34.compare((java.lang.Object) strPredicate37, (java.lang.Object) streams38);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder41 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int44 = objectToStringComparator34.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate43);
        java.util.Comparator<java.lang.Object> objComparator45 = objectToStringComparator34.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator46 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator47 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator48 = objectToStringComparator47.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate50 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj51 = null;
        int int52 = objectToStringComparator47.compare((java.lang.Object) "hi!", obj51);
        java.util.Comparator<java.lang.Object> objComparator53 = objectToStringComparator46.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        java.util.Comparator<java.lang.Object> objComparator54 = objectToStringComparator34.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        java.util.Comparator<java.lang.Object> objComparator55 = objComparator32.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator34);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator56 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator57 = objectToStringComparator56.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate59 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams60 = new org.apache.commons.lang3.stream.Streams();
        int int61 = objectToStringComparator56.compare((java.lang.Object) strPredicate59, (java.lang.Object) streams60);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator62 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator63 = objectToStringComparator62.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate65 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj66 = null;
        int int67 = objectToStringComparator62.compare((java.lang.Object) "hi!", obj66);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator68 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator69 = objectToStringComparator68.reversed();
        java.util.Comparator<java.lang.Object> objComparator70 = objectToStringComparator62.thenComparing(objComparator69);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator71 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator72 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator73 = objectToStringComparator72.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate75 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj76 = null;
        int int77 = objectToStringComparator72.compare((java.lang.Object) "hi!", obj76);
        java.util.Comparator<java.lang.Object> objComparator78 = objectToStringComparator71.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator72);
        int int80 = objectToStringComparator62.compare((java.lang.Object) objectToStringComparator71, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator81 = objectToStringComparator56.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator71);
        java.util.Comparator<java.lang.Object> objComparator82 = objectToStringComparator34.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator56);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-16) + "'", int14 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder16);
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-7) + "'", int19 == (-7));
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-16) + "'", int25 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-7) + "'", int30 == (-7));
        org.junit.Assert.assertNotNull(objComparator31);
        org.junit.Assert.assertNotNull(objComparator32);
        org.junit.Assert.assertNotNull(objComparator33);
        org.junit.Assert.assertNotNull(objComparator35);
        org.junit.Assert.assertNotNull(strPredicate37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-16) + "'", int39 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder41);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-7) + "'", int44 == (-7));
        org.junit.Assert.assertNotNull(objComparator45);
        org.junit.Assert.assertNotNull(objComparator48);
        org.junit.Assert.assertNotNull(strPredicate50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(objComparator53);
        org.junit.Assert.assertNotNull(objComparator54);
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(objComparator57);
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-16) + "'", int61 == (-16));
        org.junit.Assert.assertNotNull(objComparator63);
        org.junit.Assert.assertNotNull(strPredicate65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(objComparator69);
        org.junit.Assert.assertNotNull(objComparator70);
        org.junit.Assert.assertNotNull(objComparator73);
        org.junit.Assert.assertNotNull(strPredicate75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(objComparator78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 62 + "'", int80 == 62);
        org.junit.Assert.assertNotNull(objComparator81);
        org.junit.Assert.assertNotNull(objComparator82);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer7 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray0 = null;
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayStream1 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray0);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream1);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier5 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListSupplier5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.equalTo("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean22 = strComparableCheckBuilder1.between("", "");
        boolean boolean25 = strComparableCheckBuilder1.between("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass9 = strPredicate8.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass9);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction12 = objArrayCollector10.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer13 = objArrayCollector10.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction14 = objArrayCollector10.finisher();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier15 = objArrayCollector10.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass18 = strPredicate17.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector19 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass18);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier20 = objArrayCollector19.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator21 = objArrayCollector19.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction22 = objArrayCollector19.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator23 = objArrayCollector19.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer24 = objArrayCollector19.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList26 = objectToStringComparatorFailableStream1.collect(objListSupplier15, objListBiConsumer24, objListBiConsumer25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(objListFunction12);
        org.junit.Assert.assertNotNull(objListBiConsumer13);
        org.junit.Assert.assertNotNull(objListFunction14);
        org.junit.Assert.assertNotNull(objListSupplier15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(objListSupplier20);
        org.junit.Assert.assertNotNull(objListBinaryOperator21);
        org.junit.Assert.assertNotNull(objListFunction22);
        org.junit.Assert.assertNotNull(objListBinaryOperator23);
        org.junit.Assert.assertNotNull(objListBiConsumer24);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator4 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator5 = objectToStringComparator4.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate7 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams8 = new org.apache.commons.lang3.stream.Streams();
        int int9 = objectToStringComparator4.compare((java.lang.Object) strPredicate7, (java.lang.Object) streams8);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj14 = null;
        int int15 = objectToStringComparator10.compare((java.lang.Object) "hi!", obj14);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator16.reversed();
        java.util.Comparator<java.lang.Object> objComparator18 = objectToStringComparator10.thenComparing(objComparator17);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator19 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj24 = null;
        int int25 = objectToStringComparator20.compare((java.lang.Object) "hi!", obj24);
        java.util.Comparator<java.lang.Object> objComparator26 = objectToStringComparator19.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator20);
        int int28 = objectToStringComparator10.compare((java.lang.Object) objectToStringComparator19, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator29 = objectToStringComparator4.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator19);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator31 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator19, objectToStringComparatorBinaryOperator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(objComparator5);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-16) + "'", int9 == (-16));
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(objComparator18);
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(objComparator26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 62 + "'", int28 == 62);
        org.junit.Assert.assertNotNull(objComparator29);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        java.lang.Class<?> wildcardClass23 = strComparableCheckBuilder1.getClass();
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        boolean boolean23 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean25 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("");
        boolean boolean19 = strComparableCheckBuilder1.between("", "");
        boolean boolean21 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "");
        boolean boolean19 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean21 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean24 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean28 = strComparableCheckBuilder1.equalTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        java.lang.Class<org.apache.commons.lang3.event.EventUtils> eventUtilsClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.event.EventUtils> eventUtilsArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.event.EventUtils>(eventUtilsClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        java.lang.Class<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][]> objArrayCollectorArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][]> objArrayCollectorArrayArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][]>(objArrayCollectorArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator2 = objComparator1.reversed();
        java.util.Comparator<java.lang.Object> objComparator3 = objComparator2.reversed();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(objComparator2);
        org.junit.Assert.assertNotNull(objComparator3);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.lang.Class<?> wildcardClass9 = characteristicsFailableStream8.getClass();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        java.util.stream.Stream<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][]> objArrayCollectorArrayStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][]> objArrayCollectorArrayFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>[][]>(objArrayCollectorArrayStream0);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        boolean boolean14 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean17 = strComparableCheckBuilder3.betweenExclusive("hi!", "");
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams10 = new org.apache.commons.lang3.stream.Streams();
        int int11 = objectToStringComparator6.compare((java.lang.Object) strPredicate9, (java.lang.Object) streams10);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator13 = objectToStringComparator12.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj16 = null;
        int int17 = objectToStringComparator12.compare((java.lang.Object) "hi!", obj16);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator18 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator18.reversed();
        java.util.Comparator<java.lang.Object> objComparator20 = objectToStringComparator12.thenComparing(objComparator19);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator21 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator22 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator23 = objectToStringComparator22.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate25 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj26 = null;
        int int27 = objectToStringComparator22.compare((java.lang.Object) "hi!", obj26);
        java.util.Comparator<java.lang.Object> objComparator28 = objectToStringComparator21.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator22);
        int int30 = objectToStringComparator12.compare((java.lang.Object) objectToStringComparator21, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator31 = objectToStringComparator6.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator21);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator32 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator33 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator34 = objectToStringComparator33.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate36 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams37 = new org.apache.commons.lang3.stream.Streams();
        int int38 = objectToStringComparator33.compare((java.lang.Object) strPredicate36, (java.lang.Object) streams37);
        java.util.Comparator<java.lang.Object> objComparator39 = objectToStringComparator32.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator33);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator40 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int43 = objectToStringComparator40.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate45 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass46 = strPredicate45.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector47 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass46);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier48 = objArrayCollector47.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction49 = objArrayCollector47.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer50 = objArrayCollector47.accumulator();
        int int51 = objectToStringComparator32.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer50);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator52 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator53 = objectToStringComparator52.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate55 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams56 = new org.apache.commons.lang3.stream.Streams();
        int int57 = objectToStringComparator52.compare((java.lang.Object) strPredicate55, (java.lang.Object) streams56);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder59 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate61 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int62 = objectToStringComparator52.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate61);
        java.util.Comparator<java.lang.Object> objComparator63 = objectToStringComparator52.reversed();
        java.util.Comparator<java.lang.Object> objComparator64 = objectToStringComparator52.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder66 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean68 = strComparableCheckBuilder66.greaterThanOrEqualTo("");
        int int69 = objectToStringComparator32.compare((java.lang.Object) objComparator64, (java.lang.Object) boolean68);
        java.util.Comparator<java.lang.Object> objComparator70 = objectToStringComparator6.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator32);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator72 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator32, objectToStringComparatorBinaryOperator71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-16) + "'", int11 == (-16));
        org.junit.Assert.assertNotNull(objComparator13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(objComparator20);
        org.junit.Assert.assertNotNull(objComparator23);
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(objComparator28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 62 + "'", int30 == 62);
        org.junit.Assert.assertNotNull(objComparator31);
        org.junit.Assert.assertNotNull(objComparator34);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-16) + "'", int38 == (-16));
        org.junit.Assert.assertNotNull(objComparator39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(strPredicate45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(objListSupplier48);
        org.junit.Assert.assertNotNull(objListFunction49);
        org.junit.Assert.assertNotNull(objListBiConsumer50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-62) + "'", int51 == (-62));
        org.junit.Assert.assertNotNull(objComparator53);
        org.junit.Assert.assertNotNull(strPredicate55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-16) + "'", int57 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder59);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-7) + "'", int62 == (-7));
        org.junit.Assert.assertNotNull(objComparator63);
        org.junit.Assert.assertNotNull(objComparator64);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-10) + "'", int69 == (-10));
        org.junit.Assert.assertNotNull(objComparator70);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector8 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass7);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector8.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector8.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = objArrayCollector8.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = objArrayCollector8.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator13 = objArrayCollector8.combiner();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray14 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(objListBinaryOperator13);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean19 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean21 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean27 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean29 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream11 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream10);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream12 = objectToStringComparatorFailableStream11.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream13 = objectToStringComparatorFailableStream11.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream14 = objectToStringComparatorFailableStream11.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream15 = objectToStringComparatorFailableStream11.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream16 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream17 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream16);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream18 = objectToStringComparatorFailableStream17.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream19 = objectToStringComparatorFailableStream17.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream20 = objectToStringComparatorFailableStream17.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream21 = objectToStringComparatorFailableStream17.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream22 = objectToStringComparatorFailableStream17.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream23 = objectToStringComparatorFailableStream17.stream();
        org.apache.commons.lang3.stream.Streams.FailableStream[] failableStreamArray25 = new org.apache.commons.lang3.stream.Streams.FailableStream[3];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>[] objectToStringComparatorFailableStreamArray26 = (org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>[]) failableStreamArray25;
        objectToStringComparatorFailableStreamArray26[0] = objectToStringComparatorFailableStream1;
        objectToStringComparatorFailableStreamArray26[1] = objectToStringComparatorFailableStream11;
        objectToStringComparatorFailableStreamArray26[2] = objectToStringComparatorFailableStream17;
        java.util.stream.Stream<org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>> objectToStringComparatorFailableStreamStream33 = org.apache.commons.lang3.stream.Streams.of(objectToStringComparatorFailableStreamArray26);
        java.util.stream.Stream<org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>> objectToStringComparatorFailableStreamStream34 = org.apache.commons.lang3.stream.Streams.of(objectToStringComparatorFailableStreamArray26);
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream12);
        org.junit.Assert.assertNull(objectToStringComparatorStream13);
        org.junit.Assert.assertNull(objectToStringComparatorStream14);
        org.junit.Assert.assertNull(objectToStringComparatorStream15);
        org.junit.Assert.assertNull(objectToStringComparatorStream18);
        org.junit.Assert.assertNull(objectToStringComparatorStream19);
        org.junit.Assert.assertNull(objectToStringComparatorStream20);
        org.junit.Assert.assertNull(objectToStringComparatorStream21);
        org.junit.Assert.assertNull(objectToStringComparatorStream22);
        org.junit.Assert.assertNull(objectToStringComparatorStream23);
        org.junit.Assert.assertNotNull(failableStreamArray25);
        org.junit.Assert.assertNotNull(objectToStringComparatorFailableStreamArray26);
        org.junit.Assert.assertNotNull(objectToStringComparatorFailableStreamStream33);
        org.junit.Assert.assertNotNull(objectToStringComparatorFailableStreamStream34);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean11 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean14 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean26 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean28 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean30 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean33 = strComparableCheckBuilder1.between("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator8.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams12 = new org.apache.commons.lang3.stream.Streams();
        int int13 = objectToStringComparator8.compare((java.lang.Object) strPredicate11, (java.lang.Object) streams12);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator14 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator14.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj18 = null;
        int int19 = objectToStringComparator14.compare((java.lang.Object) "hi!", obj18);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.Comparator<java.lang.Object> objComparator22 = objectToStringComparator14.thenComparing(objComparator21);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator23 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator24 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator24.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate27 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj28 = null;
        int int29 = objectToStringComparator24.compare((java.lang.Object) "hi!", obj28);
        java.util.Comparator<java.lang.Object> objComparator30 = objectToStringComparator23.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator24);
        int int32 = objectToStringComparator14.compare((java.lang.Object) objectToStringComparator23, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator33 = objectToStringComparator8.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator23);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator34 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator35 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator36 = objectToStringComparator35.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate38 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams39 = new org.apache.commons.lang3.stream.Streams();
        int int40 = objectToStringComparator35.compare((java.lang.Object) strPredicate38, (java.lang.Object) streams39);
        java.util.Comparator<java.lang.Object> objComparator41 = objectToStringComparator34.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator35);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator42 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int45 = objectToStringComparator42.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate47 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass48 = strPredicate47.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector49 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass48);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier50 = objArrayCollector49.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction51 = objArrayCollector49.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer52 = objArrayCollector49.accumulator();
        int int53 = objectToStringComparator34.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer52);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator54 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator55 = objectToStringComparator54.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams58 = new org.apache.commons.lang3.stream.Streams();
        int int59 = objectToStringComparator54.compare((java.lang.Object) strPredicate57, (java.lang.Object) streams58);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder61 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate63 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int64 = objectToStringComparator54.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate63);
        java.util.Comparator<java.lang.Object> objComparator65 = objectToStringComparator54.reversed();
        java.util.Comparator<java.lang.Object> objComparator66 = objectToStringComparator54.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder68 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean70 = strComparableCheckBuilder68.greaterThanOrEqualTo("");
        int int71 = objectToStringComparator34.compare((java.lang.Object) objComparator66, (java.lang.Object) boolean70);
        java.util.Comparator<java.lang.Object> objComparator72 = objectToStringComparator8.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator34);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator74 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator8, objectToStringComparatorBinaryOperator73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-16) + "'", int13 == (-16));
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(objComparator22);
        org.junit.Assert.assertNotNull(objComparator25);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(objComparator30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 62 + "'", int32 == 62);
        org.junit.Assert.assertNotNull(objComparator33);
        org.junit.Assert.assertNotNull(objComparator36);
        org.junit.Assert.assertNotNull(strPredicate38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-16) + "'", int40 == (-16));
        org.junit.Assert.assertNotNull(objComparator41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(strPredicate47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(objListSupplier50);
        org.junit.Assert.assertNotNull(objListFunction51);
        org.junit.Assert.assertNotNull(objListBiConsumer52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-62) + "'", int53 == (-62));
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-16) + "'", int59 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder61);
        org.junit.Assert.assertNotNull(strPredicate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-7) + "'", int64 == (-7));
        org.junit.Assert.assertNotNull(objComparator65);
        org.junit.Assert.assertNotNull(objComparator66);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-10) + "'", int71 == (-10));
        org.junit.Assert.assertNotNull(objComparator72);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator5 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream7 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator2 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator3 = objectToStringComparator2.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate5 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj6 = null;
        int int7 = objectToStringComparator2.compare((java.lang.Object) "hi!", obj6);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator8.reversed();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator2.thenComparing(objComparator9);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder12 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean14 = strComparableCheckBuilder12.greaterThan("hi!");
        boolean boolean16 = strComparableCheckBuilder12.greaterThanOrEqualTo("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.between("", "");
        int int20 = objectToStringComparator2.compare((java.lang.Object) boolean16, (java.lang.Object) strPredicate19);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator22 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator2, objectToStringComparatorBinaryOperator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objComparator3);
        org.junit.Assert.assertNotNull(strPredicate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction18 = objArrayCollector16.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = objArrayCollector16.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream20 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet19);
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass23 = strPredicate22.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector24 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass23);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier25 = objArrayCollector24.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction26 = objArrayCollector24.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = objArrayCollector24.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = objArrayCollector24.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream29 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet28);
        int int30 = objectToStringComparator0.compare((java.lang.Object) characteristicsFailableStream20, (java.lang.Object) characteristicsSet28);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream31 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet28);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream32 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet28);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream33 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet28);
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListFunction18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(characteristicsFailableStream20);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(objListSupplier25);
        org.junit.Assert.assertNotNull(objListFunction26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(characteristicsStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
        org.junit.Assert.assertNotNull(characteristicsStream31);
        org.junit.Assert.assertNotNull(characteristicsFailableStream32);
        org.junit.Assert.assertNotNull(characteristicsStream33);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator7 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator7.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj11 = null;
        int int12 = objectToStringComparator7.compare((java.lang.Object) "hi!", obj11);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator13.reversed();
        java.util.Comparator<java.lang.Object> objComparator15 = objectToStringComparator7.thenComparing(objComparator14);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator16 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator17 = objectToStringComparator16.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams20 = new org.apache.commons.lang3.stream.Streams();
        int int21 = objectToStringComparator16.compare((java.lang.Object) strPredicate19, (java.lang.Object) streams20);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder23 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate25 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int26 = objectToStringComparator16.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate25);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator27 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator28 = objectToStringComparator27.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate30 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams31 = new org.apache.commons.lang3.stream.Streams();
        int int32 = objectToStringComparator27.compare((java.lang.Object) strPredicate30, (java.lang.Object) streams31);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder34 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate36 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int37 = objectToStringComparator27.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate36);
        java.util.Comparator<java.lang.Object> objComparator38 = objectToStringComparator27.reversed();
        java.util.Comparator<java.lang.Object> objComparator39 = objectToStringComparator16.thenComparing(objComparator38);
        java.util.Comparator<java.lang.Object> objComparator40 = objComparator15.thenComparing(objComparator39);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator41 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator42 = objectToStringComparator41.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate44 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams45 = new org.apache.commons.lang3.stream.Streams();
        int int46 = objectToStringComparator41.compare((java.lang.Object) strPredicate44, (java.lang.Object) streams45);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder48 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate50 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int51 = objectToStringComparator41.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate50);
        java.util.Comparator<java.lang.Object> objComparator52 = objectToStringComparator41.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator53 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator54 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator55 = objectToStringComparator54.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj58 = null;
        int int59 = objectToStringComparator54.compare((java.lang.Object) "hi!", obj58);
        java.util.Comparator<java.lang.Object> objComparator60 = objectToStringComparator53.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator54);
        java.util.Comparator<java.lang.Object> objComparator61 = objectToStringComparator41.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator54);
        java.util.Comparator<java.lang.Object> objComparator62 = objComparator39.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator41);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator64 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator41, objectToStringComparatorBinaryOperator63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(objComparator15);
        org.junit.Assert.assertNotNull(objComparator17);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-16) + "'", int21 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder23);
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-7) + "'", int26 == (-7));
        org.junit.Assert.assertNotNull(objComparator28);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-16) + "'", int32 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder34);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-7) + "'", int37 == (-7));
        org.junit.Assert.assertNotNull(objComparator38);
        org.junit.Assert.assertNotNull(objComparator39);
        org.junit.Assert.assertNotNull(objComparator40);
        org.junit.Assert.assertNotNull(objComparator42);
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-16) + "'", int46 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder48);
        org.junit.Assert.assertNotNull(strPredicate50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-7) + "'", int51 == (-7));
        org.junit.Assert.assertNotNull(objComparator52);
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(objComparator60);
        org.junit.Assert.assertNotNull(objComparator61);
        org.junit.Assert.assertNotNull(objComparator62);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[][][] {};
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayStream1 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray0);
        java.lang.Class<?> wildcardClass2 = genericDeclarationArrayStream1.getClass();
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean24 = strComparableCheckBuilder1.equalTo("");
        boolean boolean26 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass5 = strPredicate4.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector6 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass5);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector6.supplier();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator8.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder11 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean13 = strComparableCheckBuilder11.greaterThan("hi!");
        boolean boolean16 = strComparableCheckBuilder11.between("hi!", "");
        boolean boolean18 = strComparableCheckBuilder11.lessThanOrEqualTo("hi!");
        int int20 = objectToStringComparator8.compare((java.lang.Object) strComparableCheckBuilder11, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass23 = strPredicate22.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector24 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass23);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier25 = objArrayCollector24.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator26 = objArrayCollector24.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction27 = objArrayCollector24.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator28 = objArrayCollector24.combiner();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        boolean boolean37 = strComparableCheckBuilder30.equalTo("hi!");
        boolean boolean39 = strComparableCheckBuilder30.lessThan("");
        boolean boolean41 = strComparableCheckBuilder30.equalTo("");
        boolean boolean43 = strComparableCheckBuilder30.lessThan("hi!");
        boolean boolean45 = strComparableCheckBuilder30.greaterThan("hi!");
        int int46 = objectToStringComparator8.compare((java.lang.Object) objArrayCollector24, (java.lang.Object) "hi!");
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator47 = objArrayCollector24.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer48 = objArrayCollector24.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList50 = objectToStringComparatorFailableStream1.collect(objListSupplier7, objListBiConsumer48, objListBiConsumer49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(objectToStringComparator8);
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(objListSupplier25);
        org.junit.Assert.assertNotNull(objListBinaryOperator26);
        org.junit.Assert.assertNotNull(objListFunction27);
        org.junit.Assert.assertNotNull(objListBinaryOperator28);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 7 + "'", int46 == 7);
        org.junit.Assert.assertNotNull(objListBinaryOperator47);
        org.junit.Assert.assertNotNull(objListBiConsumer48);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean9 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean11 = strComparableCheckBuilder1.equalTo("");
        boolean boolean13 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean7 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean10 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        boolean boolean12 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("");
        boolean boolean19 = strComparableCheckBuilder1.between("", "");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream10 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass9 = strPredicate8.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass9);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier11 = objArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction12 = objArrayCollector10.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = objArrayCollector10.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = objArrayCollector10.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = objArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction16 = objArrayCollector10.finisher();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray17 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objListSupplier11);
        org.junit.Assert.assertNotNull(objListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(objListFunction16);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.reversed();
        java.lang.Class<?> wildcardClass8 = objectToStringComparator0.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector9 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass8);
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector10 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass8);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator6);
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("");
        boolean boolean3 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean9 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean11 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction18 = objArrayCollector16.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = objArrayCollector16.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream20 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet19);
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass23 = strPredicate22.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector24 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass23);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier25 = objArrayCollector24.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction26 = objArrayCollector24.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = objArrayCollector24.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = objArrayCollector24.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream29 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet28);
        int int30 = objectToStringComparator0.compare((java.lang.Object) characteristicsFailableStream20, (java.lang.Object) characteristicsSet28);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream31 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet28);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream32 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet28);
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListFunction18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(characteristicsFailableStream20);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(objListSupplier25);
        org.junit.Assert.assertNotNull(objListFunction26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(characteristicsStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
        org.junit.Assert.assertNotNull(characteristicsStream31);
        org.junit.Assert.assertNotNull(characteristicsStream32);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass4 = strPredicate3.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector5 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass4);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier6 = objArrayCollector5.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector5.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer8 = objArrayCollector5.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer9 = objArrayCollector5.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier10 = objArrayCollector5.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass13 = strPredicate12.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector14 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass13);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier15 = objArrayCollector14.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction16 = objArrayCollector14.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = objArrayCollector14.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator18 = objArrayCollector14.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer19 = objArrayCollector14.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList21 = objectToStringComparatorFailableStream1.collect(objListSupplier10, objListBiConsumer19, objListBiConsumer20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(objListSupplier6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListBiConsumer8);
        org.junit.Assert.assertNotNull(objListBiConsumer9);
        org.junit.Assert.assertNotNull(objListSupplier10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objListSupplier15);
        org.junit.Assert.assertNotNull(objListFunction16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(objListBinaryOperator18);
        org.junit.Assert.assertNotNull(objListBiConsumer19);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream12 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator13.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams17 = new org.apache.commons.lang3.stream.Streams();
        int int18 = objectToStringComparator13.compare((java.lang.Object) strPredicate16, (java.lang.Object) streams17);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder20 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int23 = objectToStringComparator13.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate22);
        java.util.Comparator<java.lang.Object> objComparator24 = objectToStringComparator13.reversed();
        java.util.Comparator<java.lang.Object> objComparator25 = objectToStringComparator13.reversed();
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator27 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator13, objectToStringComparatorBinaryOperator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNull(objectToStringComparatorStream12);
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-16) + "'", int18 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder20);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-7) + "'", int23 == (-7));
        org.junit.Assert.assertNotNull(objComparator24);
        org.junit.Assert.assertNotNull(objComparator25);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator7 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer6 = objArrayCollector3.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer7 = objArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream9 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBiConsumer6);
        org.junit.Assert.assertNotNull(objListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsStream9);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator10 = objComparator9.reversed();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator6);
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertNotNull(objComparator10);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.rangeClosed((-5));
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator2 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator3 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator4 = objectToStringComparator3.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj7 = null;
        int int8 = objectToStringComparator3.compare((java.lang.Object) "hi!", obj7);
        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator2.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator3);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder11 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean13 = strComparableCheckBuilder11.greaterThan("hi!");
        boolean boolean16 = strComparableCheckBuilder11.betweenExclusive("", "");
        boolean boolean18 = strComparableCheckBuilder11.equalTo("hi!");
        boolean boolean20 = strComparableCheckBuilder11.lessThan("");
        boolean boolean22 = strComparableCheckBuilder11.lessThan("");
        boolean boolean24 = strComparableCheckBuilder11.lessThanOrEqualTo("");
        boolean boolean27 = strComparableCheckBuilder11.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder29 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean31 = strComparableCheckBuilder29.greaterThan("hi!");
        boolean boolean34 = strComparableCheckBuilder29.betweenExclusive("", "");
        boolean boolean36 = strComparableCheckBuilder29.equalTo("hi!");
        boolean boolean38 = strComparableCheckBuilder29.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder40 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean42 = strComparableCheckBuilder40.greaterThan("hi!");
        boolean boolean45 = strComparableCheckBuilder40.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder47 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean49 = strComparableCheckBuilder47.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray51 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray52 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray51;
        strComparableCheckBuilderArray52[0] = strComparableCheckBuilder11;
        strComparableCheckBuilderArray52[1] = strComparableCheckBuilder29;
        strComparableCheckBuilderArray52[2] = strComparableCheckBuilder40;
        strComparableCheckBuilderArray52[3] = strComparableCheckBuilder47;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream61 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray52);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder63 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean65 = strComparableCheckBuilder63.greaterThan("hi!");
        boolean boolean68 = strComparableCheckBuilder63.betweenExclusive("", "");
        boolean boolean70 = strComparableCheckBuilder63.equalTo("hi!");
        boolean boolean72 = strComparableCheckBuilder63.lessThan("");
        boolean boolean74 = strComparableCheckBuilder63.lessThan("hi!");
        boolean boolean76 = strComparableCheckBuilder63.greaterThanOrEqualTo("hi!");
        int int77 = objectToStringComparator3.compare((java.lang.Object) strComparableCheckBuilderStream61, (java.lang.Object) boolean76);
        java.util.Comparator<java.lang.Object> objComparator78 = objComparator1.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator3);
        java.util.Comparator<java.lang.Object> objComparator79 = objComparator78.reversed();
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(objComparator4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(objComparator9);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream61);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-10) + "'", int77 == (-10));
        org.junit.Assert.assertNotNull(objComparator78);
        org.junit.Assert.assertNotNull(objComparator79);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder3 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean5 = strComparableCheckBuilder3.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder3.between("hi!", "");
        boolean boolean10 = strComparableCheckBuilder3.lessThanOrEqualTo("hi!");
        int int12 = objectToStringComparator0.compare((java.lang.Object) strComparableCheckBuilder3, (java.lang.Object) 4);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass15 = strPredicate14.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector16 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass15);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier17 = objArrayCollector16.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction18 = objArrayCollector16.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = objArrayCollector16.characteristics();
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream20 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet19);
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass23 = strPredicate22.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector24 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass23);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier25 = objArrayCollector24.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction26 = objArrayCollector24.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = objArrayCollector24.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = objArrayCollector24.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream29 = org.apache.commons.lang3.stream.Streams.nullSafeStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet28);
        int int30 = objectToStringComparator0.compare((java.lang.Object) characteristicsFailableStream20, (java.lang.Object) characteristicsSet28);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator31 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator32 = objectToStringComparator31.reversed();
        java.util.Comparator<java.lang.Object> objComparator33 = objectToStringComparator31.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator34 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator35 = objectToStringComparator34.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate37 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams38 = new org.apache.commons.lang3.stream.Streams();
        int int39 = objectToStringComparator34.compare((java.lang.Object) strPredicate37, (java.lang.Object) streams38);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder41 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int44 = objectToStringComparator34.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate43);
        java.util.Comparator<java.lang.Object> objComparator45 = objectToStringComparator34.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator46 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator47 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator48 = objectToStringComparator47.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate50 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj51 = null;
        int int52 = objectToStringComparator47.compare((java.lang.Object) "hi!", obj51);
        java.util.Comparator<java.lang.Object> objComparator53 = objectToStringComparator46.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        java.util.Comparator<java.lang.Object> objComparator54 = objectToStringComparator34.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        java.util.Comparator<java.lang.Object> objComparator55 = objComparator33.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        java.util.Comparator<java.lang.Object> objComparator56 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        org.junit.Assert.assertNotNull(objectToStringComparator0);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objListSupplier17);
        org.junit.Assert.assertNotNull(objListFunction18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(characteristicsFailableStream20);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(objListSupplier25);
        org.junit.Assert.assertNotNull(objListFunction26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(characteristicsStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
        org.junit.Assert.assertNotNull(objectToStringComparator31);
        org.junit.Assert.assertNotNull(objComparator32);
        org.junit.Assert.assertNotNull(objComparator33);
        org.junit.Assert.assertNotNull(objComparator35);
        org.junit.Assert.assertNotNull(strPredicate37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-16) + "'", int39 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder41);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-7) + "'", int44 == (-7));
        org.junit.Assert.assertNotNull(objComparator45);
        org.junit.Assert.assertNotNull(objComparator48);
        org.junit.Assert.assertNotNull(strPredicate50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(objComparator53);
        org.junit.Assert.assertNotNull(objComparator54);
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(objComparator56);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction7 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator8 = objArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = objArrayCollector3.characteristics();
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(objListFunction7);
        org.junit.Assert.assertNotNull(objListBinaryOperator8);
        org.junit.Assert.assertNotNull(objListFunction9);
        org.junit.Assert.assertNotNull(objListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass12 = strPredicate11.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector13 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier14 = objArrayCollector13.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction15 = objArrayCollector13.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = objArrayCollector13.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = objArrayCollector13.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = objArrayCollector13.characteristics();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray19 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(objListSupplier14);
        org.junit.Assert.assertNotNull(objListFunction15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean7 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean9 = strComparableCheckBuilder1.equalTo("");
        boolean boolean12 = strComparableCheckBuilder1.betweenExclusive("", "hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean8 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean13 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean16 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean18 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream9 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream10 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream11 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator12 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator13 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator14 = objectToStringComparator13.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams17 = new org.apache.commons.lang3.stream.Streams();
        int int18 = objectToStringComparator13.compare((java.lang.Object) strPredicate16, (java.lang.Object) streams17);
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator12.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator13);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int23 = objectToStringComparator20.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate25 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass26 = strPredicate25.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector27 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass26);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier28 = objArrayCollector27.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction29 = objArrayCollector27.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer30 = objArrayCollector27.accumulator();
        int int31 = objectToStringComparator12.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer30);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator32 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator33 = objectToStringComparator32.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate35 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams36 = new org.apache.commons.lang3.stream.Streams();
        int int37 = objectToStringComparator32.compare((java.lang.Object) strPredicate35, (java.lang.Object) streams36);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder39 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int42 = objectToStringComparator32.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate41);
        java.util.Comparator<java.lang.Object> objComparator43 = objectToStringComparator32.reversed();
        java.util.Comparator<java.lang.Object> objComparator44 = objectToStringComparator32.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder46 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean48 = strComparableCheckBuilder46.greaterThanOrEqualTo("");
        int int49 = objectToStringComparator12.compare((java.lang.Object) objComparator44, (java.lang.Object) boolean48);
        java.util.function.Predicate<java.lang.String> strPredicate51 = org.apache.commons.lang3.compare.ComparableUtils.gt("");
        java.util.function.Predicate<java.lang.String> strPredicate53 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass54 = strPredicate53.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector55 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass54);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier56 = objArrayCollector55.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction57 = objArrayCollector55.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer58 = objArrayCollector55.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet59 = objArrayCollector55.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier60 = objArrayCollector55.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator61 = objArrayCollector55.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet62 = objArrayCollector55.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator63 = objArrayCollector55.combiner();
        int int64 = objectToStringComparator12.compare((java.lang.Object) strPredicate51, (java.lang.Object) objArrayCollector55);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator66 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator12, objectToStringComparatorBinaryOperator65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNull(objectToStringComparatorStream9);
        org.junit.Assert.assertNull(objectToStringComparatorStream10);
        org.junit.Assert.assertNull(objectToStringComparatorStream11);
        org.junit.Assert.assertNotNull(objComparator14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-16) + "'", int18 == (-16));
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(objListSupplier28);
        org.junit.Assert.assertNotNull(objListFunction29);
        org.junit.Assert.assertNotNull(objListBiConsumer30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-62) + "'", int31 == (-62));
        org.junit.Assert.assertNotNull(objComparator33);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-16) + "'", int37 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder39);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-7) + "'", int42 == (-7));
        org.junit.Assert.assertNotNull(objComparator43);
        org.junit.Assert.assertNotNull(objComparator44);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-10) + "'", int49 == (-10));
        org.junit.Assert.assertNotNull(strPredicate51);
        org.junit.Assert.assertNotNull(strPredicate53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(objListSupplier56);
        org.junit.Assert.assertNotNull(objListFunction57);
        org.junit.Assert.assertNotNull(objListBiConsumer58);
        org.junit.Assert.assertNotNull(characteristicsSet59);
        org.junit.Assert.assertNotNull(objListSupplier60);
        org.junit.Assert.assertNotNull(objListBinaryOperator61);
        org.junit.Assert.assertNotNull(characteristicsSet62);
        org.junit.Assert.assertNotNull(objListBinaryOperator63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-16) + "'", int64 == (-16));
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder19 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean21 = strComparableCheckBuilder19.greaterThan("hi!");
        boolean boolean24 = strComparableCheckBuilder19.betweenExclusive("", "");
        boolean boolean26 = strComparableCheckBuilder19.equalTo("hi!");
        boolean boolean28 = strComparableCheckBuilder19.lessThan("");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder30 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean32 = strComparableCheckBuilder30.greaterThan("hi!");
        boolean boolean35 = strComparableCheckBuilder30.betweenExclusive("", "");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder37 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean39 = strComparableCheckBuilder37.greaterThan("hi!");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[] comparableCheckBuilderArray41 = new org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder[4];
        @SuppressWarnings("unchecked")
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[] strComparableCheckBuilderArray42 = (org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]) comparableCheckBuilderArray41;
        strComparableCheckBuilderArray42[0] = strComparableCheckBuilder1;
        strComparableCheckBuilderArray42[1] = strComparableCheckBuilder19;
        strComparableCheckBuilderArray42[2] = strComparableCheckBuilder30;
        strComparableCheckBuilderArray42[3] = strComparableCheckBuilder37;
        java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderStream51 = org.apache.commons.lang3.stream.Streams.of(strComparableCheckBuilderArray42);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream52 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream53 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream54 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream55 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream56 = org.apache.commons.lang3.stream.Streams.failableStream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream57 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>> strComparableCheckBuilderFailableStream58 = org.apache.commons.lang3.stream.Streams.stream(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(comparableCheckBuilderArray41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderArray42);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderStream51);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream52);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream53);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream54);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream55);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream56);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilderFailableStream58);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean5 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean8 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean10 = strComparableCheckBuilder1.greaterThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        java.lang.Class<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]> strComparableCheckBuilderArrayClass0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]> strComparableCheckBuilderArrayArrayCollector1 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>[]>(strComparableCheckBuilderArrayClass0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: elementType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        java.util.Comparator<java.lang.Object> objComparator6 = objectToStringComparator0.reversed();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder9 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean11 = strComparableCheckBuilder9.greaterThan("hi!");
        boolean boolean14 = strComparableCheckBuilder9.betweenExclusive("", "");
        boolean boolean16 = strComparableCheckBuilder9.equalTo("hi!");
        boolean boolean18 = strComparableCheckBuilder9.lessThan("");
        boolean boolean20 = strComparableCheckBuilder9.lessThan("hi!");
        boolean boolean22 = strComparableCheckBuilder9.lessThan("hi!");
        boolean boolean24 = strComparableCheckBuilder9.equalTo("hi!");
        boolean boolean26 = strComparableCheckBuilder9.greaterThanOrEqualTo("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator27 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator28 = objectToStringComparator27.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate30 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj31 = null;
        int int32 = objectToStringComparator27.compare((java.lang.Object) "hi!", obj31);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder34 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean37 = strComparableCheckBuilder34.betweenExclusive("", "");
        boolean boolean39 = strComparableCheckBuilder34.greaterThan("");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator40 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator41 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator42 = objectToStringComparator41.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate44 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj45 = null;
        int int46 = objectToStringComparator41.compare((java.lang.Object) "hi!", obj45);
        java.util.Comparator<java.lang.Object> objComparator47 = objectToStringComparator40.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator41);
        int int48 = objectToStringComparator27.compare((java.lang.Object) "", (java.lang.Object) objComparator47);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator49 = org.apache.commons.lang3.compare.ObjectToStringComparator.INSTANCE;
        java.util.Comparator<java.lang.Object> objComparator50 = objectToStringComparator49.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder52 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean54 = strComparableCheckBuilder52.greaterThan("hi!");
        boolean boolean57 = strComparableCheckBuilder52.between("hi!", "");
        boolean boolean59 = strComparableCheckBuilder52.lessThanOrEqualTo("hi!");
        int int61 = objectToStringComparator49.compare((java.lang.Object) strComparableCheckBuilder52, (java.lang.Object) 4);
        java.util.Comparator<java.lang.Object> objComparator62 = objectToStringComparator27.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator49);
        java.util.function.Predicate<java.lang.String> strPredicate64 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass65 = strPredicate64.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate67 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass68 = strPredicate67.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate70 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass71 = strPredicate70.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate73 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass74 = strPredicate73.getClass();
        java.util.function.Predicate<java.lang.String> strPredicate76 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass77 = strPredicate76.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray78 = new java.lang.reflect.GenericDeclaration[] { wildcardClass65, wildcardClass68, wildcardClass71, wildcardClass74, wildcardClass77 };
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray79 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray78 };
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayStream80 = org.apache.commons.lang3.stream.Streams.of(genericDeclarationArray79);
        java.lang.Class<?> wildcardClass81 = genericDeclarationArray79.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector82 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass81);
        java.util.function.Predicate<java.lang.String> strPredicate84 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass85 = strPredicate84.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector86 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass85);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier87 = objArrayCollector86.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator88 = objArrayCollector86.combiner();
        int int89 = objectToStringComparator49.compare((java.lang.Object) wildcardClass81, (java.lang.Object) objListBinaryOperator88);
        int int90 = objectToStringComparator0.compare((java.lang.Object) "", (java.lang.Object) int89);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator6);
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objComparator28);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objComparator42);
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(objComparator47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-50) + "'", int48 == (-50));
        org.junit.Assert.assertNotNull(objectToStringComparator49);
        org.junit.Assert.assertNotNull(objComparator50);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 59 + "'", int61 == 59);
        org.junit.Assert.assertNotNull(objComparator62);
        org.junit.Assert.assertNotNull(strPredicate64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(strPredicate67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(strPredicate70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(strPredicate73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(strPredicate76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(genericDeclarationArray78);
        org.junit.Assert.assertNotNull(genericDeclarationArray79);
        org.junit.Assert.assertNotNull(genericDeclarationArrayStream80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(strPredicate84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(objListSupplier87);
        org.junit.Assert.assertNotNull(objListBinaryOperator88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-12) + "'", int89 == (-12));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
    }

//    @Test
//    public void test0482() throws Throwable {
//        if (debug)
//            System.out.format("%n%s%n", "RegressionTest0.test0482");
//        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
//        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
//        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
//        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
//        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = objArrayCollector3.characteristics();
//        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = objArrayCollector3.characteristics();
//        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
//        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector3.finisher();
//        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator10 = objArrayCollector3.combiner();
//        org.junit.Assert.assertNotNull(strPredicate1);
//        org.junit.Assert.assertNotNull(wildcardClass2);
//        org.junit.Assert.assertNotNull(objListSupplier4);
//        org.junit.Assert.assertNotNull(objListFunction5);
//        org.junit.Assert.assertNotNull(characteristicsSet6);
//        org.junit.Assert.assertNotNull(characteristicsSet7);
//        org.junit.Assert.assertNotNull(characteristicsSet8);
//        org.junit.Assert.assertNotNull(objListFunction9);
//        org.junit.Assert.assertNotNull(objListBinaryOperator10);
//    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream5 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.lang.Class<?> wildcardClass6 = characteristicsList1.getClass();
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsStream5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("hi!", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "hi!");
        boolean boolean22 = strComparableCheckBuilder1.greaterThan("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

//    @Test
//    public void test0485() throws Throwable {
//        if (debug)
//            System.out.format("%n%s%n", "RegressionTest0.test0485");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator1 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator2 = objectToStringComparator1.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate4 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        org.apache.commons.lang3.stream.Streams streams5 = new org.apache.commons.lang3.stream.Streams();
//        int int6 = objectToStringComparator1.compare((java.lang.Object) strPredicate4, (java.lang.Object) streams5);
//        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator1);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator8 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator9 = objectToStringComparator8.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate11 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        org.apache.commons.lang3.stream.Streams streams12 = new org.apache.commons.lang3.stream.Streams();
//        int int13 = objectToStringComparator8.compare((java.lang.Object) strPredicate11, (java.lang.Object) streams12);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder15 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        java.util.function.Predicate<java.lang.String> strPredicate17 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
//        int int18 = objectToStringComparator8.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate17);
//        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder20 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
//        boolean boolean22 = strComparableCheckBuilder20.greaterThan("hi!");
//        boolean boolean25 = strComparableCheckBuilder20.betweenExclusive("", "");
//        boolean boolean27 = strComparableCheckBuilder20.equalTo("hi!");
//        boolean boolean29 = strComparableCheckBuilder20.lessThan("");
//        boolean boolean31 = strComparableCheckBuilder20.lessThan("");
//        boolean boolean33 = strComparableCheckBuilder20.lessThanOrEqualTo("");
//        boolean boolean36 = strComparableCheckBuilder20.between("hi!", "hi!");
//        boolean boolean39 = strComparableCheckBuilder20.betweenExclusive("hi!", "hi!");
//        boolean boolean41 = strComparableCheckBuilder20.lessThanOrEqualTo("hi!");
//        boolean boolean43 = strComparableCheckBuilder20.greaterThan("hi!");
//        boolean boolean45 = strComparableCheckBuilder20.lessThan("hi!");
//        boolean boolean47 = strComparableCheckBuilder20.lessThanOrEqualTo("");
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator48 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator49 = objectToStringComparator48.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate51 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj52 = null;
//        int int53 = objectToStringComparator48.compare((java.lang.Object) "hi!", obj52);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator54 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator55 = objectToStringComparator54.reversed();
//        java.util.Comparator<java.lang.Object> objComparator56 = objectToStringComparator48.thenComparing(objComparator55);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator57 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator58 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator59 = objectToStringComparator58.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate61 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj62 = null;
//        int int63 = objectToStringComparator58.compare((java.lang.Object) "hi!", obj62);
//        java.util.Comparator<java.lang.Object> objComparator64 = objectToStringComparator57.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator58);
//        int int66 = objectToStringComparator48.compare((java.lang.Object) objectToStringComparator57, (java.lang.Object) 1L);
//        int int67 = objectToStringComparator8.compare((java.lang.Object) "", (java.lang.Object) objectToStringComparator57);
//        java.util.Comparator<java.lang.Object> objComparator68 = objectToStringComparator0.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator8);
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator69 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator70 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
//        java.util.Comparator<java.lang.Object> objComparator71 = objectToStringComparator70.reversed();
//        java.util.function.Predicate<java.lang.String> strPredicate73 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
//        java.lang.Object obj74 = null;
//        int int75 = objectToStringComparator70.compare((java.lang.Object) "hi!", obj74);
//        java.util.Comparator<java.lang.Object> objComparator76 = objectToStringComparator69.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator70);
//        java.util.Comparator<java.lang.Object> objComparator77 = objComparator68.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator70);
//        java.util.Comparator<java.lang.Object> objComparator78 = objectToStringComparator70.reversed();
//        java.util.Comparator<java.lang.Object> objComparator79 = objectToStringComparator70.reversed();
//        org.junit.Assert.assertNotNull(objComparator2);
//        org.junit.Assert.assertNotNull(strPredicate4);
//        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-16) + "'", int6 == (-16));
//        org.junit.Assert.assertNotNull(objComparator7);
//        org.junit.Assert.assertNotNull(objComparator9);
//        org.junit.Assert.assertNotNull(strPredicate11);
//        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-16) + "'", int13 == (-16));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder15);
//        org.junit.Assert.assertNotNull(strPredicate17);
//        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-7) + "'", int18 == (-7));
//        org.junit.Assert.assertNotNull(strComparableCheckBuilder20);
//        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
//        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
//        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
//        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
//        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
//        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
//        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
//        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
//        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
//        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
//        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
//        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
//        org.junit.Assert.assertNotNull(objComparator49);
//        org.junit.Assert.assertNotNull(strPredicate51);
//        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
//        org.junit.Assert.assertNotNull(objComparator55);
//        org.junit.Assert.assertNotNull(objComparator56);
//        org.junit.Assert.assertNotNull(objComparator59);
//        org.junit.Assert.assertNotNull(strPredicate61);
//        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
//        org.junit.Assert.assertNotNull(objComparator64);
//        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 62 + "'", int66 == 62);
//        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-66) + "'", int67 == (-66));
//        org.junit.Assert.assertNotNull(objComparator68);
//        org.junit.Assert.assertNotNull(objComparator71);
//        org.junit.Assert.assertNotNull(strPredicate73);
//        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
//        org.junit.Assert.assertNotNull(objComparator76);
//        org.junit.Assert.assertNotNull(objComparator77);
//        org.junit.Assert.assertNotNull(objComparator78);
//        org.junit.Assert.assertNotNull(objComparator79);
//    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator0 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator1 = objectToStringComparator0.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate3 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj4 = null;
        int int5 = objectToStringComparator0.compare((java.lang.Object) "hi!", obj4);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator6 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator7 = objectToStringComparator6.reversed();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator0.thenComparing(objComparator7);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator10 = objectToStringComparator9.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams13 = new org.apache.commons.lang3.stream.Streams();
        int int14 = objectToStringComparator9.compare((java.lang.Object) strPredicate12, (java.lang.Object) streams13);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder16 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int19 = objectToStringComparator9.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate18);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator20 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator21 = objectToStringComparator20.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams24 = new org.apache.commons.lang3.stream.Streams();
        int int25 = objectToStringComparator20.compare((java.lang.Object) strPredicate23, (java.lang.Object) streams24);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder27 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int30 = objectToStringComparator20.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate29);
        java.util.Comparator<java.lang.Object> objComparator31 = objectToStringComparator20.reversed();
        java.util.Comparator<java.lang.Object> objComparator32 = objectToStringComparator9.thenComparing(objComparator31);
        java.util.Comparator<java.lang.Object> objComparator33 = objComparator8.thenComparing(objComparator32);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator34 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator35 = objectToStringComparator34.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate37 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams38 = new org.apache.commons.lang3.stream.Streams();
        int int39 = objectToStringComparator34.compare((java.lang.Object) strPredicate37, (java.lang.Object) streams38);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder41 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int44 = objectToStringComparator34.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate43);
        java.util.Comparator<java.lang.Object> objComparator45 = objectToStringComparator34.reversed();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator46 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator47 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator48 = objectToStringComparator47.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate50 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj51 = null;
        int int52 = objectToStringComparator47.compare((java.lang.Object) "hi!", obj51);
        java.util.Comparator<java.lang.Object> objComparator53 = objectToStringComparator46.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        java.util.Comparator<java.lang.Object> objComparator54 = objectToStringComparator34.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        java.util.Comparator<java.lang.Object> objComparator55 = objComparator32.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator34);
        java.util.stream.IntStream intStream57 = org.apache.commons.lang3.stream.IntStreams.range((int) 'a');
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder59 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean61 = strComparableCheckBuilder59.greaterThan("hi!");
        boolean boolean63 = strComparableCheckBuilder59.greaterThanOrEqualTo("hi!");
        boolean boolean65 = strComparableCheckBuilder59.greaterThan("");
        boolean boolean68 = strComparableCheckBuilder59.betweenExclusive("hi!", "");
        boolean boolean71 = strComparableCheckBuilder59.betweenExclusive("", "");
        boolean boolean74 = strComparableCheckBuilder59.between("", "hi!");
        boolean boolean77 = strComparableCheckBuilder59.between("", "");
        int int78 = objectToStringComparator34.compare((java.lang.Object) intStream57, (java.lang.Object) boolean77);
        org.junit.Assert.assertNotNull(objComparator1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(objComparator7);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(objComparator10);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-16) + "'", int14 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder16);
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-7) + "'", int19 == (-7));
        org.junit.Assert.assertNotNull(objComparator21);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-16) + "'", int25 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder27);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-7) + "'", int30 == (-7));
        org.junit.Assert.assertNotNull(objComparator31);
        org.junit.Assert.assertNotNull(objComparator32);
        org.junit.Assert.assertNotNull(objComparator33);
        org.junit.Assert.assertNotNull(objComparator35);
        org.junit.Assert.assertNotNull(strPredicate37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-16) + "'", int39 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder41);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-7) + "'", int44 == (-7));
        org.junit.Assert.assertNotNull(objComparator45);
        org.junit.Assert.assertNotNull(objComparator48);
        org.junit.Assert.assertNotNull(strPredicate50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(objComparator53);
        org.junit.Assert.assertNotNull(objComparator54);
        org.junit.Assert.assertNotNull(objComparator55);
        org.junit.Assert.assertNotNull(intStream57);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean16 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean18 = strComparableCheckBuilder1.greaterThanOrEqualTo("");
        boolean boolean21 = strComparableCheckBuilder1.between("hi!", "");
        boolean boolean23 = strComparableCheckBuilder1.equalTo("");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector8 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass7);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector8.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction10 = objArrayCollector8.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = objArrayCollector8.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer12 = objArrayCollector8.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer13 = objArrayCollector8.accumulator();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction14 = objArrayCollector8.finisher();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray15 = objectToStringComparatorFailableStream1.collect((java.util.stream.Collector<java.lang.Object, java.util.List<java.lang.Object>, java.lang.Object[]>) objArrayCollector8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(objListFunction10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(objListBiConsumer12);
        org.junit.Assert.assertNotNull(objListBiConsumer13);
        org.junit.Assert.assertNotNull(objListFunction14);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        java.util.stream.IntStream intStream1 = org.apache.commons.lang3.stream.IntStreams.range((int) ' ');
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        java.lang.Class<java.lang.Iterable<java.util.stream.Collector.Characteristics>> characteristicsIterableClass0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.event.EventListenerSupport<java.lang.Iterable<java.util.stream.Collector.Characteristics>> characteristicsIterableEventListenerSupport2 = new org.apache.commons.lang3.event.EventListenerSupport<java.lang.Iterable<java.util.stream.Collector.Characteristics>>(characteristicsIterableClass0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: listenerInterface");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("");
        boolean boolean14 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean17 = strComparableCheckBuilder1.between("", "hi!");
        boolean boolean20 = strComparableCheckBuilder1.betweenExclusive("hi!", "");
        boolean boolean22 = strComparableCheckBuilder1.lessThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        java.util.stream.Stream<java.util.Comparator<java.lang.Object>> objComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.Comparator<java.lang.Object>> objComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.util.Comparator<java.lang.Object>>(objComparatorStream0);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        java.util.stream.Stream<java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>>> strComparableCheckBuilderStreamStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>>> strComparableCheckBuilderStreamFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Stream<org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String>>>(strComparableCheckBuilderStreamStream0);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean4 = strComparableCheckBuilder1.between("", "");
        boolean boolean7 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean9 = strComparableCheckBuilder1.lessThanOrEqualTo("");
        boolean boolean11 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean13 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean15 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        java.util.function.Predicate<java.lang.String> strPredicate1 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass2 = strPredicate1.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector3 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass2);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier4 = objArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction5 = objArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.Object>> objListBinaryOperator6 = objArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier7 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = objArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier9 = objArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = objArrayCollector3.characteristics();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream11 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream12 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objListSupplier4);
        org.junit.Assert.assertNotNull(objListFunction5);
        org.junit.Assert.assertNotNull(objListBinaryOperator6);
        org.junit.Assert.assertNotNull(objListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(objListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsStream11);
        org.junit.Assert.assertNotNull(characteristicsStream12);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.function.Predicate<java.lang.String> strPredicate5 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass6 = strPredicate5.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector7 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass6);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier8 = objArrayCollector7.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction9 = objArrayCollector7.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer10 = objArrayCollector7.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = objArrayCollector7.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier12 = objArrayCollector7.supplier();
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier13 = objArrayCollector7.supplier();
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass16 = strPredicate15.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector17 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass16);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier18 = objArrayCollector17.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction19 = objArrayCollector17.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = objArrayCollector17.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer21 = objArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = objArrayCollector17.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer23 = objArrayCollector17.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.util.List<java.lang.Object>> objListBiConsumer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList25 = objectToStringComparatorFailableStream1.collect(objListSupplier13, objListBiConsumer23, objListBiConsumer24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNotNull(strPredicate5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(objListSupplier8);
        org.junit.Assert.assertNotNull(objListFunction9);
        org.junit.Assert.assertNotNull(objListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(objListSupplier12);
        org.junit.Assert.assertNotNull(objListSupplier13);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objListSupplier18);
        org.junit.Assert.assertNotNull(objListFunction19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(objListBiConsumer21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(objListBiConsumer23);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator7 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator8 = objectToStringComparator7.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate10 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams11 = new org.apache.commons.lang3.stream.Streams();
        int int12 = objectToStringComparator7.compare((java.lang.Object) strPredicate10, (java.lang.Object) streams11);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder14 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int17 = objectToStringComparator7.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate16);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator18 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator19 = objectToStringComparator18.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams22 = new org.apache.commons.lang3.stream.Streams();
        int int23 = objectToStringComparator18.compare((java.lang.Object) strPredicate21, (java.lang.Object) streams22);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder25 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate27 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int28 = objectToStringComparator18.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate27);
        java.util.Comparator<java.lang.Object> objComparator29 = objectToStringComparator18.reversed();
        java.util.Comparator<java.lang.Object> objComparator30 = objectToStringComparator7.thenComparing(objComparator29);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator31 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator32 = objectToStringComparator31.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate34 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams35 = new org.apache.commons.lang3.stream.Streams();
        int int36 = objectToStringComparator31.compare((java.lang.Object) strPredicate34, (java.lang.Object) streams35);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator37 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator38 = objectToStringComparator37.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj41 = null;
        int int42 = objectToStringComparator37.compare((java.lang.Object) "hi!", obj41);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator43 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator44 = objectToStringComparator43.reversed();
        java.util.Comparator<java.lang.Object> objComparator45 = objectToStringComparator37.thenComparing(objComparator44);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator46 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator47 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator48 = objectToStringComparator47.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate50 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Object obj51 = null;
        int int52 = objectToStringComparator47.compare((java.lang.Object) "hi!", obj51);
        java.util.Comparator<java.lang.Object> objComparator53 = objectToStringComparator46.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        int int55 = objectToStringComparator37.compare((java.lang.Object) objectToStringComparator46, (java.lang.Object) 1L);
        java.util.Comparator<java.lang.Object> objComparator56 = objectToStringComparator31.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator46);
        java.util.Comparator<java.lang.Object> objComparator57 = objComparator29.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator31);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator59 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator31, objectToStringComparatorBinaryOperator58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNotNull(objComparator8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-16) + "'", int12 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-7) + "'", int17 == (-7));
        org.junit.Assert.assertNotNull(objComparator19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-16) + "'", int23 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder25);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-7) + "'", int28 == (-7));
        org.junit.Assert.assertNotNull(objComparator29);
        org.junit.Assert.assertNotNull(objComparator30);
        org.junit.Assert.assertNotNull(objComparator32);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-16) + "'", int36 == (-16));
        org.junit.Assert.assertNotNull(objComparator38);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(objComparator44);
        org.junit.Assert.assertNotNull(objComparator45);
        org.junit.Assert.assertNotNull(objComparator48);
        org.junit.Assert.assertNotNull(strPredicate50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(objComparator53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 62 + "'", int55 == 62);
        org.junit.Assert.assertNotNull(objComparator56);
        org.junit.Assert.assertNotNull(objComparator57);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.stream.Streams.failableStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.stream.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.stream.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream6 = org.apache.commons.lang3.stream.Streams.toStream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsStream6);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder1 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean3 = strComparableCheckBuilder1.greaterThan("hi!");
        boolean boolean6 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean8 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean10 = strComparableCheckBuilder1.lessThan("");
        boolean boolean12 = strComparableCheckBuilder1.lessThan("hi!");
        boolean boolean14 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean16 = strComparableCheckBuilder1.greaterThanOrEqualTo("hi!");
        boolean boolean19 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean22 = strComparableCheckBuilder1.betweenExclusive("", "");
        boolean boolean24 = strComparableCheckBuilder1.equalTo("hi!");
        boolean boolean26 = strComparableCheckBuilder1.lessThan("hi!");
        org.junit.Assert.assertNotNull(strComparableCheckBuilder1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream0 = null;
        org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorFailableStream1 = new org.apache.commons.lang3.stream.Streams.FailableStream<org.apache.commons.lang3.compare.ObjectToStringComparator>(objectToStringComparatorStream0);
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream2 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream3 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream4 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream5 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream6 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream7 = objectToStringComparatorFailableStream1.stream();
        java.util.stream.Stream<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorStream8 = objectToStringComparatorFailableStream1.stream();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator9 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator10 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator11 = objectToStringComparator10.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate13 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams14 = new org.apache.commons.lang3.stream.Streams();
        int int15 = objectToStringComparator10.compare((java.lang.Object) strPredicate13, (java.lang.Object) streams14);
        java.util.Comparator<java.lang.Object> objComparator16 = objectToStringComparator9.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator10);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator17 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        int int20 = objectToStringComparator17.compare((java.lang.Object) 100L, (java.lang.Object) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        java.lang.Class<?> wildcardClass23 = strPredicate22.getClass();
        org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object> objArrayCollector24 = new org.apache.commons.lang3.stream.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass23);
        java.util.function.Supplier<java.util.List<java.lang.Object>> objListSupplier25 = objArrayCollector24.supplier();
        java.util.function.Function<java.util.List<java.lang.Object>, java.lang.Object[]> objListFunction26 = objArrayCollector24.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.Object>, java.lang.Object> objListBiConsumer27 = objArrayCollector24.accumulator();
        int int28 = objectToStringComparator9.compare((java.lang.Object) (short) 10, (java.lang.Object) objListBiConsumer27);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator29 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator30 = objectToStringComparator29.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate32 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams33 = new org.apache.commons.lang3.stream.Streams();
        int int34 = objectToStringComparator29.compare((java.lang.Object) strPredicate32, (java.lang.Object) streams33);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder36 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate38 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int39 = objectToStringComparator29.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate38);
        java.util.Comparator<java.lang.Object> objComparator40 = objectToStringComparator29.reversed();
        java.util.Comparator<java.lang.Object> objComparator41 = objectToStringComparator29.reversed();
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder43 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        boolean boolean45 = strComparableCheckBuilder43.greaterThanOrEqualTo("");
        int int46 = objectToStringComparator9.compare((java.lang.Object) objComparator41, (java.lang.Object) boolean45);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator47 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator48 = objectToStringComparator47.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate50 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams51 = new org.apache.commons.lang3.stream.Streams();
        int int52 = objectToStringComparator47.compare((java.lang.Object) strPredicate50, (java.lang.Object) streams51);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder54 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int57 = objectToStringComparator47.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate56);
        org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator58 = new org.apache.commons.lang3.compare.ObjectToStringComparator();
        java.util.Comparator<java.lang.Object> objComparator59 = objectToStringComparator58.reversed();
        java.util.function.Predicate<java.lang.String> strPredicate61 = org.apache.commons.lang3.compare.ComparableUtils.lt("hi!");
        org.apache.commons.lang3.stream.Streams streams62 = new org.apache.commons.lang3.stream.Streams();
        int int63 = objectToStringComparator58.compare((java.lang.Object) strPredicate61, (java.lang.Object) streams62);
        org.apache.commons.lang3.compare.ComparableUtils.ComparableCheckBuilder<java.lang.String> strComparableCheckBuilder65 = org.apache.commons.lang3.compare.ComparableUtils.is("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate67 = org.apache.commons.lang3.compare.ComparableUtils.gt("hi!");
        int int68 = objectToStringComparator58.compare((java.lang.Object) "hi!", (java.lang.Object) strPredicate67);
        java.util.Comparator<java.lang.Object> objComparator69 = objectToStringComparator58.reversed();
        java.util.Comparator<java.lang.Object> objComparator70 = objectToStringComparator47.thenComparing(objComparator69);
        java.util.Comparator<java.lang.Object> objComparator71 = objectToStringComparator9.thenComparing((java.util.Comparator<java.lang.Object>) objectToStringComparator47);
        java.util.function.BinaryOperator<org.apache.commons.lang3.compare.ObjectToStringComparator> objectToStringComparatorBinaryOperator72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.compare.ObjectToStringComparator objectToStringComparator73 = objectToStringComparatorFailableStream1.reduce(objectToStringComparator9, objectToStringComparatorBinaryOperator72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objectToStringComparatorStream2);
        org.junit.Assert.assertNull(objectToStringComparatorStream3);
        org.junit.Assert.assertNull(objectToStringComparatorStream4);
        org.junit.Assert.assertNull(objectToStringComparatorStream5);
        org.junit.Assert.assertNull(objectToStringComparatorStream6);
        org.junit.Assert.assertNull(objectToStringComparatorStream7);
        org.junit.Assert.assertNull(objectToStringComparatorStream8);
        org.junit.Assert.assertNotNull(objComparator11);
        org.junit.Assert.assertNotNull(strPredicate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-16) + "'", int15 == (-16));
        org.junit.Assert.assertNotNull(objComparator16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(objListSupplier25);
        org.junit.Assert.assertNotNull(objListFunction26);
        org.junit.Assert.assertNotNull(objListBiConsumer27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-62) + "'", int28 == (-62));
        org.junit.Assert.assertNotNull(objComparator30);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-16) + "'", int34 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder36);
        org.junit.Assert.assertNotNull(strPredicate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-7) + "'", int39 == (-7));
        org.junit.Assert.assertNotNull(objComparator40);
        org.junit.Assert.assertNotNull(objComparator41);
        org.junit.Assert.assertNotNull(strComparableCheckBuilder43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-10) + "'", int46 == (-10));
        org.junit.Assert.assertNotNull(objComparator48);
        org.junit.Assert.assertNotNull(strPredicate50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-16) + "'", int52 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder54);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-7) + "'", int57 == (-7));
        org.junit.Assert.assertNotNull(objComparator59);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-16) + "'", int63 == (-16));
        org.junit.Assert.assertNotNull(strComparableCheckBuilder65);
        org.junit.Assert.assertNotNull(strPredicate67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-7) + "'", int68 == (-7));
        org.junit.Assert.assertNotNull(objComparator69);
        org.junit.Assert.assertNotNull(objComparator70);
        org.junit.Assert.assertNotNull(objComparator71);
    }
}

