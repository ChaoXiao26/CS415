/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 21:11:00 GMT 2022
 */

package org.apache.commons.lang3.WillEvoSuite;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.function.Predicate;
import org.apache.commons.lang3.compare.ComparableUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComparableUtils_ESTest extends ComparableUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Predicate<String> predicate0 = ComparableUtils.betweenExclusive((String) null, "`X')5");
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Predicate<String> predicate0 = ComparableUtils.between("", (String) null);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is("DPK0z-j8");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.lessThan("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is("4?1J[u/c.Q.^[m");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.equalTo("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ComparableUtils.min((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = ComparableUtils.max((Integer) null, (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is("XXC");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.lessThanOrEqualTo("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is("1Z");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.lessThanOrEqualTo("org.apache.commons.lang3.compare.ComparableUtils");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is("1Z");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.lessThan("1Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is("1Z");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.lessThan("A(/I");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is("1Z");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.greaterThanOrEqualTo("1Z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is("");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.greaterThanOrEqualTo("44Vn:7|0G");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is("1Z");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.greaterThan("1Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is("org.apache.commons.lang3.compare.ComparableUtils$1");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.greaterThan("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = ComparableUtils.min("Q}vPblcW8i ,-d0GXi", (String) null);
      assertEquals("Q}vPblcW8i ,-d0GXi", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = ComparableUtils.min("i", "1Z");
      assertEquals("1Z", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = ComparableUtils.max("org.apache.commons.lang3.compare.ComparableUtils", "&00%Nwvr");
      assertEquals("org.apache.commons.lang3.compare.ComparableUtils", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = ComparableUtils.max("", ",7FU");
      assertEquals(",7FU", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(" F',>i/");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.equalTo(" F',>i/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(" F',>i/");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.equalTo("5^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(" F',>i/");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.betweenExclusive("Y{_K", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is("`mm{?Tkf1M;V/:Q.");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.betweenExclusive("`mm{?Tkf1M;V/:Q.", "&00%Nwvr");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is("1Z");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.betweenExclusive("", "i");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is("`mm{?Tkf1M;V/:Q.");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.between("&00%Nwvr", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is("");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.between("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ComparableUtils.ComparableCheckBuilder<String> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is("1Z");
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.between("q(l}+*X+OVu^", "1Z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Predicate<Integer> predicate0 = ComparableUtils.gt(integer0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Predicate<String> predicate0 = ComparableUtils.ge("^-");
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Predicate<String> predicate0 = ComparableUtils.lt("");
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Predicate<String> predicate0 = ComparableUtils.le("q(l}+*X+OVu^");
      assertNotNull(predicate0);
  }
}
