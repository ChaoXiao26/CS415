/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Apr 14 02:07:24 GMT 2022
 */

package org.apache.commons.lang3.functionEvoSuite;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class Failable_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.lang3.function.Failable"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.OFF; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    /*No java.lang.System property to set*/
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Failable_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.commons.lang3.function.FailableCallable",
      "org.apache.commons.lang3.stream.Streams$FailableStream",
      "org.apache.commons.lang3.function.Failable",
      "org.apache.commons.lang3.function.FailableLongSupplier",
      "org.apache.commons.lang3.function.FailableBiConsumer",
      "org.apache.commons.lang3.function.FailableIntConsumer",
      "org.apache.commons.lang3.function.FailableBooleanSupplier",
      "org.apache.commons.lang3.function.FailableConsumer",
      "org.apache.commons.lang3.function.FailableBiPredicate",
      "org.apache.commons.lang3.function.FailableRunnable",
      "org.apache.commons.lang3.function.FailableSupplier",
      "org.apache.commons.lang3.function.FailableFunction",
      "org.apache.commons.lang3.function.FailablePredicate",
      "org.apache.commons.lang3.function.FailableIntSupplier",
      "org.apache.commons.lang3.stream.Streams",
      "org.apache.commons.lang3.function.FailableDoubleSupplier",
      "org.apache.commons.lang3.function.FailableBiFunction",
      "org.apache.commons.lang3.function.FailableDoubleConsumer",
      "org.apache.commons.lang3.function.FailableLongConsumer",
      "org.apache.commons.lang3.function.FailableDoubleBinaryOperator",
      "org.apache.commons.lang3.function.FailableShortSupplier"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.apache.commons.lang3.function.FailableBooleanSupplier", false, Failable_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.commons.lang3.function.FailableCallable", false, Failable_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.commons.lang3.function.FailableDoubleBinaryOperator", false, Failable_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.commons.lang3.function.FailableDoubleSupplier", false, Failable_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.commons.lang3.function.FailableFunction", false, Failable_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.commons.lang3.function.FailableIntSupplier", false, Failable_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.commons.lang3.function.FailableLongSupplier", false, Failable_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.commons.lang3.function.FailableRunnable", false, Failable_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.commons.lang3.function.FailableShortSupplier", false, Failable_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.commons.lang3.function.FailableSupplier", false, Failable_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Failable_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.commons.lang3.function.Failable",
      "org.apache.commons.lang3.function.FailableBiPredicate",
      "org.apache.commons.lang3.function.FailableBiConsumer",
      "org.apache.commons.lang3.function.FailableFunction",
      "org.apache.commons.lang3.stream.Streams$FailableStream",
      "org.apache.commons.lang3.function.FailableConsumer",
      "org.apache.commons.lang3.function.FailableIntConsumer",
      "org.apache.commons.lang3.function.FailableBiFunction",
      "org.apache.commons.lang3.function.FailableLongConsumer",
      "org.apache.commons.lang3.function.FailablePredicate",
      "org.apache.commons.lang3.function.FailableDoubleConsumer"
    );
  }
}
